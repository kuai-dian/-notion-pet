/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var config = require('../../config.js');
var button_index = require('../../button/index.js');
require('../../button/button.js');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/defineProperty');
require('../../utils/classnames.js');
require('../../loading/index.js');
require('../../loading/loading.js');
require('../../loading/icon/gradient.js');
require('../../_common/js/loading/circle-adapter.js');
require('../../_common/js/utils/set-style.js');
require('../../_common/js/utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../../utils/dom.js');
require('../../_chunks/dep-eb6b0f94.js');
require('lodash/isString');
require('../../utils/easing.js');
require('../../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isFunction');
require('lodash/isObject');
require('../../utils/transfer-dom.js');
require('../../loading/props.js');
require('../../utils/withInstall.js');
require('../../loading/style');
require('../../loading/plugin.js');
require('../../button/props.js');
require('../../utils/ripple.js');
require('../../utils/set-style.js');
require('../../button/style');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
}

var TransferOperations = vue.defineComponent({
  name: "TTransferOperations",
  components: {
    TButton: button_index.Button
  },
  props: {
    leftDisabled: {
      type: Boolean,
      required: true
    },
    rightDisabled: {
      type: Boolean,
      required: true
    },
    operation: {
      type: [String, Array, Function, Boolean]
    }
  },
  emits: ["moveToRight", "moveToLeft"],
  methods: {
    moveToRight: function moveToRight() {
      this.$emit("moveToRight");
    },
    moveToLeft: function moveToLeft() {
      this.$emit("moveToLeft");
    },
    getIconRight: function getIconRight() {
      return vue.createVNode(tdesignIconsVueNext.ChevronRightIcon, null, null);
    },
    getIconLeft: function getIconLeft() {
      return vue.createVNode(tdesignIconsVueNext.ChevronLeftIcon, null, null);
    },
    getIcon: function getIcon(direction) {
      if (typeof this.operation === "function") {
        return null;
      }

      if (direction === "right" && this.operation && typeof this.operation[0] === "function") {
        return null;
      }

      if (direction === "left" && this.operation && typeof this.operation[1] === "function") {
        return null;
      }

      if (this.$slots.operation) {
        return null;
      }

      return direction === "left" ? this.getIconLeft : this.getIconRight;
    },
    _renderButton: function _renderButton(h, direction) {
      if (typeof this.$slots.operation === "function") {
        return this.$slots.operation({
          direction: direction
        });
      }

      if (typeof this.operation === "function") {
        var renderContent2 = this.operation;
        return renderContent2(h, {
          direction: direction
        });
      }

      var renderContent;

      if (Array.isArray(this.operation)) {
        var _this$operation = _slicedToArray__default["default"](this.operation, 2),
            left = _this$operation[0],
            right = _this$operation[1];

        renderContent = direction === "right" ? right : left;
      } else {
        renderContent = "";
      }

      return renderContent;
    }
  },
  render: function render(h) {
    var _slot, _slot2;

    var _this$$props = this.$props,
        leftDisabled = _this$$props.leftDisabled,
        rightDisabled = _this$$props.rightDisabled;
    return vue.createVNode("div", {
      "class": "".concat(config.prefix, "-transfer__operations")
    }, [vue.createVNode(vue.resolveComponent("t-button"), {
      "variant": rightDisabled ? "outline" : "base",
      "key": rightDisabled ? "right-outline" : "right-base",
      "disabled": rightDisabled,
      "onClick": this.moveToRight,
      "icon": this.getIcon("right")
    }, _isSlot(_slot = this._renderButton(h, "right")) ? _slot : {
      "default": function _default() {
        return [_slot];
      }
    }), vue.createVNode(vue.resolveComponent("t-button"), {
      "variant": leftDisabled ? "outline" : "base",
      "key": rightDisabled ? "left-outline" : "left-base",
      "disabled": leftDisabled,
      "onClick": this.moveToLeft,
      "icon": this.getIcon("left")
    }, _isSlot(_slot2 = this._renderButton(h, "left")) ? _slot2 : {
      "default": function _default() {
        return [_slot2];
      }
    })]);
  }
});

exports["default"] = TransferOperations;
//# sourceMappingURL=transfer-operations.js.map
