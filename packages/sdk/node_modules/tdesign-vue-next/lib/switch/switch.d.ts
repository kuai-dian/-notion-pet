import { VNodeChild } from 'vue';
import { SwitchValue } from './type';
import { ClassName } from '../common';
declare const _default: import("vue").DefineComponent<{
    customValue: {
        type: import("vue").PropType<SwitchValue[]>;
    };
    disabled: BooleanConstructor;
    label: {
        type: import("vue").PropType<(string | import("../common").TNode<any>)[] | import("../common").TNode<{
            value: SwitchValue;
        }>>;
        default: () => (string | import("../common").TNode<any>)[] | import("../common").TNode<{
            value: SwitchValue;
        }>;
    };
    loading: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    value: {
        type: import("vue").PropType<SwitchValue>;
        default: boolean;
    };
    defaultValue: {
        type: import("vue").PropType<SwitchValue>;
        default: boolean;
    };
    onChange: import("vue").PropType<(value: SwitchValue) => void>;
}, unknown, unknown, {
    classes(): ClassName;
    nodeClasses(): ClassName;
    contentClasses(): ClassName;
    activeValue(): SwitchValue;
    inactiveValue(): SwitchValue;
    content(): VNodeChild;
}, {
    handleToggle(): void;
    toggle(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "change"[], "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    customValue: {
        type: import("vue").PropType<SwitchValue[]>;
    };
    disabled: BooleanConstructor;
    label: {
        type: import("vue").PropType<(string | import("../common").TNode<any>)[] | import("../common").TNode<{
            value: SwitchValue;
        }>>;
        default: () => (string | import("../common").TNode<any>)[] | import("../common").TNode<{
            value: SwitchValue;
        }>;
    };
    loading: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    value: {
        type: import("vue").PropType<SwitchValue>;
        default: boolean;
    };
    defaultValue: {
        type: import("vue").PropType<SwitchValue>;
        default: boolean;
    };
    onChange: import("vue").PropType<(value: SwitchValue) => void>;
}>> & {
    onChange?: (...args: any[]) => any;
}, {
    value: SwitchValue;
    loading: boolean;
    label: (string | import("../common").TNode<any>)[] | import("../common").TNode<{
        value: SwitchValue;
    }>;
    disabled: boolean;
    size: "small" | "medium" | "large";
    defaultValue: SwitchValue;
}>;
export default _default;
