/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var config = require('../config.js');
var utils_classnames = require('../utils/classnames.js');
var loading_index = require('../loading/index.js');
var switch_props = require('./props.js');
var utils_event = require('../utils/event.js');
require('../loading/loading.js');
require('@babel/runtime/helpers/slicedToArray');
require('../loading/icon/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../utils/dom.js');
require('../_chunks/dep-eb6b0f94.js');
require('lodash/isString');
require('../utils/easing.js');
require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isFunction');
require('lodash/isObject');
require('../utils/transfer-dom.js');
require('../loading/props.js');
require('../utils/withInstall.js');
require('../loading/style');
require('../loading/plugin.js');
require('../utils/helper.js');
require('lodash/camelCase');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(config.prefix, "-switch");
var _Switch = vue.defineComponent({
  name: "TSwitch",
  props: _objectSpread({}, switch_props["default"]),
  emits: ["change"],
  computed: {
    classes: function classes() {
      var _ref;

      return ["".concat(name), utils_classnames["default"].SIZE[this.size], (_ref = {}, _defineProperty__default["default"](_ref, utils_classnames["default"].STATUS.disabled, this.disabled), _defineProperty__default["default"](_ref, utils_classnames["default"].STATUS.loading, this.loading), _defineProperty__default["default"](_ref, utils_classnames["default"].STATUS.checked, this.value === this.activeValue), _ref)];
    },
    nodeClasses: function nodeClasses() {
      var _ref2;

      return ["".concat(name, "__handle"), (_ref2 = {}, _defineProperty__default["default"](_ref2, utils_classnames["default"].STATUS.disabled, this.disabled), _defineProperty__default["default"](_ref2, utils_classnames["default"].STATUS.loading, this.loading), _ref2)];
    },
    contentClasses: function contentClasses() {
      return ["".concat(name, "__content"), utils_classnames["default"].SIZE[this.size], _defineProperty__default["default"]({}, utils_classnames["default"].STATUS.disabled, this.disabled)];
    },
    activeValue: function activeValue() {
      if (this.customValue && this.customValue.length > 0) {
        return this.customValue[0];
      }

      return true;
    },
    inactiveValue: function inactiveValue() {
      if (this.customValue && this.customValue.length > 1) {
        return this.customValue[1];
      }

      return false;
    },
    content: function content() {
      if (typeof this.label === "function") {
        return this.label(vue.h, {
          value: this.value
        });
      }

      if (typeof this.label === "string") {
        return this.label;
      }

      if (Array.isArray(this.label)) {
        var label = this.value === this.activeValue ? this.label[0] : this.label[1];
        if (!label) return;

        if (typeof label === "string") {
          return label;
        }

        if (typeof label === "function") {
          return label(vue.h);
        }
      }

      if (this.$slots.label) {
        return this.$slots.label({
          value: this.value
        });
      }

      return null;
    }
  },
  watch: {
    value: {
      handler: function handler(val) {
        if (this.customValue && this.customValue.length && !this.customValue.includes(val)) {
          throw new Error("value is not in ".concat(JSON.stringify(this.customValue)));
        }
      },
      immediate: true
    }
  },
  methods: {
    handleToggle: function handleToggle() {
      var checked = this.value === this.activeValue ? this.inactiveValue : this.activeValue;
      utils_event.emitEvent(this, "change", checked);
    },
    toggle: function toggle() {
      if (this.disabled || this.loading) {
        return;
      }

      this.handleToggle();
    }
  },
  render: function render() {
    var loading = this.loading,
        disabled = this.disabled,
        content = this.content,
        nodeClasses = this.nodeClasses,
        classes = this.classes,
        toggle = this.toggle,
        contentClasses = this.contentClasses;
    var switchContent;
    var loadingContent;

    if (loading) {
      loadingContent = vue.createVNode(loading_index.Loading, {
        "size": "small"
      }, null);
    } else if (content) {
      switchContent = content;
    }

    return vue.createVNode("div", {
      "class": classes,
      "disabled": disabled,
      "onClick": toggle
    }, [vue.createVNode("span", {
      "class": nodeClasses
    }, [loadingContent]), vue.createVNode("div", {
      "class": contentClasses
    }, [switchContent])]);
  }
});

exports["default"] = _Switch;
//# sourceMappingURL=switch.js.map
