/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var config = require('../config.js');
var input_index = require('../input/index.js');
var tag_index = require('../tag/index.js');
var tagInput_props = require('./props.js');
var utils_renderTnode = require('../utils/render-tnode.js');
var tagInput_useTagScroll = require('./useTagScroll.js');
var tagInput_useTagList = require('./useTagList.js');
var tagInput_useHover = require('./useHover.js');
require('../input/addon.js');
require('../input/input.js');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/typeof');
require('../utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/camelCase');
require('../config-provider/config-receiver.js');
require('../config-provider/zh_CN_config.js');
require('../utils/mixins.js');
require('../utils/classnames.js');
require('../input/props.js');
require('../utils/event.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isFunction');
require('lodash/isObject');
require('../input/input-group.js');
require('../utils/map-props.js');
require('lodash/kebabCase');
require('../utils/withInstall.js');
require('../input/style');
require('../tag/tag.js');
require('../tag/props.js');
require('../tag/check-tag.js');
require('../tag/check-tag-props.js');
require('../tag/style');
require('../utils/dom.js');
require('../_chunks/dep-eb6b0f94.js');
require('../utils/easing.js');
require('../hooks/useDefault.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var NAME_CLASS = "".concat(config.prefix, "-tag-input");
var CLEAR_CLASS = "".concat(config.prefix, "-tag-input__suffix-clear");
var BREAK_LINE_CLASS = "".concat(config.prefix, "-tag-input--break-line");
var _TagInput = vue.defineComponent({
  name: "TTagInput",
  props: _objectSpread({}, tagInput_props["default"]),
  setup: function setup(props2, context) {
    var root = vue.ref(null);
    var inputValueRef = vue.ref();

    var _useHover = tagInput_useHover["default"](props2),
        isHoverRef = _useHover.isHoverRef,
        addHover = _useHover.addHover,
        cancelHover = _useHover.cancelHover;

    var scrollFunctions = tagInput_useTagScroll["default"](props2, root);

    var _useTagList = tagInput_useTagList["default"](props2, context),
        tagValue = _useTagList.tagValue,
        onClose = _useTagList.onClose,
        onInnerEnter = _useTagList.onInnerEnter,
        onInputBackspaceKeyUp = _useTagList.onInputBackspaceKeyUp,
        clearAll = _useTagList.clearAll;

    var classes = vue.computed(function () {
      return [NAME_CLASS, _defineProperty__default["default"]({}, BREAK_LINE_CLASS, props2.excessTagsDisplayType === "break-line")];
    });
    var tagInputPlaceholder = vue.computed(function () {
      var _tagValue$value;

      return isHoverRef.value || !((_tagValue$value = tagValue.value) !== null && _tagValue$value !== void 0 && _tagValue$value.length) ? props2.placeholder : "";
    });
    var showClearIcon = vue.computed(function () {
      var _tagValue$value2;

      return Boolean(!props2.readonly && !props2.disabled && props2.clearable && isHoverRef.value && ((_tagValue$value2 = tagValue.value) === null || _tagValue$value2 === void 0 ? void 0 : _tagValue$value2.length));
    });

    var onInputEnter = function onInputEnter(value, context2) {
      inputValueRef.value = "";
      onInnerEnter(value, context2);
      vue.nextTick(function () {
        scrollFunctions.scrollToRight();
      });
    };

    return _objectSpread(_objectSpread({
      tagValue: tagValue,
      root: root,
      inputValueRef: inputValueRef,
      isHoverRef: isHoverRef,
      tagInputPlaceholder: tagInputPlaceholder,
      showClearIcon: showClearIcon,
      addHover: addHover,
      cancelHover: cancelHover
    }, scrollFunctions), {}, {
      onInputEnter: onInputEnter,
      onClose: onClose,
      onInnerEnter: onInnerEnter,
      onInputBackspaceKeyUp: onInputBackspaceKeyUp,
      clearAll: clearAll,
      classes: classes
    });
  },
  methods: {
    renderLabel: function renderLabel() {
      var _this = this;

      var displayNode = utils_renderTnode.renderTNodeJSX(this, "valueDisplay", {
        params: {
          value: this.tagValue
        }
      });
      var newList = this.minCollapsedNum ? this.tagValue.slice(0, this.minCollapsedNum) : this.tagValue;
      var list = displayNode !== null && displayNode !== void 0 ? displayNode : newList === null || newList === void 0 ? void 0 : newList.map(function (item, index) {
        var tagContent = utils_renderTnode.renderTNodeJSX(_this, "tag", {
          params: {
            value: item
          }
        });
        return vue.createVNode(tag_index.Tag, vue.mergeProps({
          "size": _this.size,
          "disabled": _this.disabled,
          "onClose": function onClose(context) {
            return _this.onClose({
              e: context.e,
              item: item,
              index: index
            });
          },
          "closable": !_this.readonly && !_this.disabled
        }, _this.tagProps), {
          "default": function _default() {
            return [tagContent !== null && tagContent !== void 0 ? tagContent : item];
          }
        });
      });
      var label = utils_renderTnode.renderTNodeJSX(this, "label");

      if (![null, void 0, ""].includes(label)) {
        list.unshift(vue.createVNode("div", {
          "class": "".concat(config.prefix, "-tag-input__prefix")
        }, [label]));
      }

      if (newList.length !== this.tagValue.length) {
        var len = this.tagValue.length - newList.length;
        var more = utils_renderTnode.renderTNodeJSX(this, "collapsedItems", {
          params: {
            value: this.tagValue,
            count: this.tagValue.length,
            collapsedTags: this.tagValue.slice(this.minCollapsedNum, this.tagValue.length)
          }
        });
        list.push(more !== null && more !== void 0 ? more : vue.createVNode(tag_index.Tag, null, {
          "default": function _default() {
            return ["+", len];
          }
        }));
      }

      return list;
    },
    renderSuffixIcon: function renderSuffixIcon() {
      var suffixIcon = utils_renderTnode.renderTNodeJSX(this, "suffixIcon");

      if (this.showClearIcon) {
        return vue.createVNode(tdesignIconsVueNext.CloseCircleFilledIcon, {
          "class": CLEAR_CLASS,
          "onClick": this.clearAll
        }, null);
      }

      return suffixIcon;
    }
  },
  render: function render() {
    var _this2 = this;

    return vue.createVNode(input_index.Input, vue.mergeProps({
      "ref": "root"
    }, this.inputProps, {
      "value": this.inputValueRef,
      "onChange": function onChange(val) {
        _this2.inputValueRef = val;
      },
      "size": this.size,
      "readonly": this.readonly,
      "disabled": this.disabled,
      "label": this.renderLabel,
      "class": this.classes,
      "tips": this.tips,
      "status": this.status,
      "placeholder": this.tagInputPlaceholder,
      "suffix": this.suffix,
      "suffixIcon": this.renderSuffixIcon,
      "onPaste": this.onPaste,
      "onEnter": this.onInputEnter,
      "onKeyup": this.onInputBackspaceKeyUp,
      "onMouseenter": function onMouseenter(context) {
        _this2.addHover(context);

        _this2.scrollToRightOnEnter();
      },
      "onMouseleave": function onMouseleave(context) {
        _this2.cancelHover(context);

        _this2.scrollToLeftOnLeave();
      },
      "onFocus": function onFocus(inputValue, context) {
        var _this2$onFocus;

        (_this2$onFocus = _this2.onFocus) === null || _this2$onFocus === void 0 ? void 0 : _this2$onFocus.call(_this2, _this2.tagValue, {
          e: context.e,
          inputValue: inputValue
        });
      },
      "onBlur": function onBlur(inputValue, context) {
        var _this2$onBlur;

        (_this2$onBlur = _this2.onBlur) === null || _this2$onBlur === void 0 ? void 0 : _this2$onBlur.call(_this2, _this2.tagValue, {
          e: context.e,
          inputValue: inputValue
        });
      }
    }), null);
  }
});

exports["default"] = _TagInput;
//# sourceMappingURL=tag-input.js.map
