/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var config = require('../config.js');
var divider_props = require('./props.js');
var utils_renderTnode = require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isFunction');
require('lodash/isObject');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(config.prefix, "-divider");
var _Divider = vue.defineComponent({
  name: "TDivider",
  props: _objectSpread({}, divider_props["default"]),
  render: function render() {
    var _ref;

    var theme = this.theme,
        dashed = this.dashed,
        align = this.align;
    var children = utils_renderTnode.renderContent(this, "default", "content");
    var dividerClassNames = ["".concat(name), ["".concat(name, "--").concat(theme)], (_ref = {}, _defineProperty__default["default"](_ref, "".concat(name, "--dashed"), !!dashed), _defineProperty__default["default"](_ref, "".concat(name, "--with-text"), !!children), _defineProperty__default["default"](_ref, "".concat(name, "--with-text-").concat(align), !!children), _ref)];
    return vue.createVNode("div", vue.mergeProps({
      "class": dividerClassNames
    }, this.$attrs), [children && vue.createVNode("span", {
      "class": "".concat(name, "__inner-text")
    }, [children])]);
  }
});

exports["default"] = _Divider;
//# sourceMappingURL=divider.js.map
