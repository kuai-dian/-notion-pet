/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var vue = require('vue');
var get = require('lodash/get');
var config = require('../../config.js');
var table_baseTableProps = require('../base-table-props.js');
var table_baseTable_tableCell = require('./table-cell.js');
var utils_helper = require('../../utils/helper.js');
var utils_event = require('../../utils/event.js');
require('../../popup/index.js');
require('../../popup/popup.js');
require('@babel/runtime/helpers/typeof');
require('@popperjs/core');
require('../../_chunks/dep-eb6b0f94.js');
require('../../utils/classnames.js');
require('../../utils/dom.js');
require('lodash/isString');
require('../../utils/easing.js');
require('../../popup/props.js');
require('../../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isFunction');
require('lodash/isObject');
require('../../utils/set-style.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/camelCase');
require('../../utils/map-props.js');
require('lodash/kebabCase');
require('../../utils/withInstall.js');
require('../../popup/style');
require('../util/common.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var get__default = /*#__PURE__*/_interopDefaultLegacy(get);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var eventsName = {
  mouseover: "row-hover",
  mouseleave: "row-mouseleave",
  mouseenter: "row-mouseenter",
  mousedown: "row-mousedown",
  mouseup: "row-mouseup",
  click: "row-click",
  dblclick: "row-db-click",
  dragstart: "row-dragstart",
  dragover: "row-dragover"
};

var observe = function observe(element, root, callback, marginBottom) {
  try {
    var io = new window.IntersectionObserver(function (entries) {
      var entry = entries[0];

      if (entry.isIntersecting) {
        callback();
        io.unobserve(element);
      }
    }, {
      rootMargin: "0px 0px ".concat(marginBottom, "px 0px"),
      root: root
    });
    io.observe(element);
    return io;
  } catch (e) {
    console.error(e);
    callback();
  }
};

var requestAnimationFrame = window.requestAnimationFrame || function (cb) {
  return setTimeout(cb, 1e3 / 60);
};

var TableRowProps = {
  rowClass: table_baseTableProps["default"].rowClassName,
  columns: table_baseTableProps["default"].columns,
  rowKey: table_baseTableProps["default"].rowKey,
  rowspanAndColspanProps: {
    type: Object,
    required: false,
    "default": function _default() {
      return {};
    }
  },
  rowData: {
    type: Object,
    "default": function _default() {
      return {};
    }
  },
  index: {
    type: Number,
    "default": -1
  },
  current: {
    type: Number,
    "default": 1
  },
  scrollType: {
    type: String,
    "default": ""
  },
  rowHeight: {
    type: Number,
    "default": 0
  },
  bufferSize: {
    type: Number,
    "default": 0
  },
  trs: {
    type: Map,
    "default": function _default() {
      return /* @__PURE__ */new Map();
    }
  },
  row: {
    type: Object,
    "default": function _default() {
      return {};
    }
  },
  provider: {
    type: Object,
    "default": function _default() {
      return {
        sortOnRowDraggable: false
      };
    }
  }
};
var TableRow = vue.defineComponent({
  name: "".concat(config.prefix, "-table-row"),
  components: {
    TableCell: table_baseTable_tableCell["default"]
  },
  props: TableRowProps,
  emits: ["rowMounted", "getRowHeight"].concat(_toConsumableArray__default["default"](Object.keys(eventsName).map(function (key) {
    return eventsName[key];
  }))),
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var tr = vue.ref(null);
    var isInit = vue.ref(props.index === 0);

    var init = function init() {
      !isInit.value && requestAnimationFrame(function () {
        isInit.value = true;
      });
    };

    vue.onMounted(function () {
      var trs = props.trs,
          row = props.row,
          scrollType = props.scrollType,
          index = props.index,
          rowHeight = props.rowHeight,
          bufferSize = props.bufferSize;

      if (scrollType === "virtual") {
        var $index = row.$index;
        trs.set($index, tr.value);
        emit("rowMounted");
        vue.onBeforeUnmount(function () {
          trs["delete"]($index);
        });
      } else if (scrollType === "lazy") {
        var scrollBody = vue.inject("scrollBody");

        if (rowHeight === 0) {
          var rowHeightRef = vue.inject("rowHeightRef");

          if (index === 0) {
            var offsetHeight = tr.value.offsetHeight;
            rowHeightRef.value = offsetHeight;
          } else {
            var height = rowHeightRef.value;
            observe(tr.value, scrollBody.value, init, height * bufferSize);
          }
        } else {
          observe(tr.value, scrollBody.value, init, rowHeight * bufferSize);
        }
      }
    });
    return {
      tr: tr,
      isInit: isInit
    };
  },
  methods: {
    renderRow: function renderRow() {
      var _this = this;

      var rowData = this.rowData,
          columns = this.columns,
          rowIndex = this.index,
          rowspanAndColspanProps = this.rowspanAndColspanProps,
          scrollType = this.scrollType,
          isInit = this.isInit;
      var hasHolder = scrollType === "lazy" && !isInit;

      if (hasHolder) {
        var rowHeightRef = vue.inject("rowHeightRef");
        return [vue.createVNode("td", {
          "style": {
            height: "".concat(rowHeightRef.value, "px"),
            border: "none"
          }
        }, null)];
      }

      var rowBody = [];
      var flag = true;
      columns.forEach(function (column, index) {
        var _this$$slots;

        var customData = {
          type: "cell",
          func: "cell"
        };
        var render = column.render,
            cell2 = column.cell;
        var colKey = column.colKey;
        var customRender;

        if (typeof cell2 === "function") {
          customRender = cell2;
        } else if (typeof cell2 === "string" && typeof _this.$slots[cell2] === "function") {
          customRender = function customRender(h2, params) {
            return _this.$slots[cell2](params);
          };
        } else if (typeof ((_this$$slots = _this.$slots) === null || _this$$slots === void 0 ? void 0 : _this$$slots[colKey]) === "function") {
          customRender = function customRender(h2, params) {
            return _this.$slots[colKey](params);
          };
        } else if (typeof render === "function") {
          customRender = render;
          customData.func = "render";
        } else {
          customRender = function customRender() {
            return get__default["default"](rowData, colKey);
          };
        }

        var attrs = column.attrs || {};

        if (colKey !== "expanded-row" && rowspanAndColspanProps !== null && rowspanAndColspanProps !== void 0 && rowspanAndColspanProps[colKey]) {
          var colspan = 1;
          var rowspan = 1;

          if (rowspanAndColspanProps[colKey]) {
            rowspan = rowspanAndColspanProps[colKey].rowspan || rowspan;
            colspan = rowspanAndColspanProps[colKey].colspan || colspan;
          }

          attrs.colspan = colspan;
          attrs.rowspan = rowspan;

          if (colspan === -1 || rowspan === -1) {
            return;
          }
        }

        var withBorder;
        var withoutBorder;

        if (index > rowBody.length && rowIndex > 0) {
          var _columns;

          if ((_columns = columns[index - 1]) !== null && _columns !== void 0 && _columns.fixed && rowBody.length === 0) {
            withoutBorder = true;
          } else if (flag) {
            withBorder = true;
            flag = false;
          }
        }

        var cellData = {
          col: _objectSpread(_objectSpread({}, column), {}, {
            attrs: attrs
          }),
          withBorder: withBorder,
          withoutBorder: withoutBorder,
          colIndex: index,
          row: rowData,
          rowIndex: rowIndex,
          customData: customData,
          customRender: customRender,
          type: "td"
        };
        var listeners = {
          onCellClick: function onCellClick(p) {
            utils_event.emitEvent(_this, "cell-click", p);
          }
        };
        rowBody.push(vue.createVNode(vue.resolveComponent("table-cell"), vue.mergeProps({
          "ref": "".concat(rowIndex, "_").concat(index)
        }, listeners, {
          "cellData": cellData,
          "length": columns.length
        }), null));
      });
      return rowBody;
    }
  },
  render: function render() {
    var _this2 = this;

    var rowClass = this.rowClass,
        $attrs = this.$attrs,
        rowData = this.rowData,
        index = this.index,
        rowKey = this.rowKey,
        current = this.current,
        provider = this.provider;
    var params = {
      row: rowData,
      index: index
    };
    var on = {};
    Object.keys(eventsName).forEach(function (event) {
      var emitEventName = eventsName[event];

      on[utils_helper.getPropsApiByEvent(event)] = function (e) {
        _this2.$emit(emitEventName, _objectSpread(_objectSpread({}, params), {}, {
          e: e
        }));
      };
    });

    var trProps = _objectSpread(_objectSpread({}, $attrs), {}, {
      "class": rowClass,
      key: rowKey ? get__default["default"](rowData, rowKey) : index + current
    }, on);

    return vue.createVNode("tr", vue.mergeProps({
      "ref": "tr"
    }, trProps, {
      "draggable": provider.sortOnRowDraggable
    }), [this.renderRow()]);
  }
});

exports["default"] = TableRow;
//# sourceMappingURL=table-row.js.map
