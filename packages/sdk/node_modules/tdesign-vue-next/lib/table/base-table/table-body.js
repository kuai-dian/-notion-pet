/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var get = require('lodash/get');
var camelCase = require('lodash/camelCase');
var config = require('../../config.js');
var table_baseTable_tableRow = require('./table-row.js');
var table_baseTableProps = require('../base-table-props.js');
var table_primaryTableProps = require('../primary-table-props.js');
var utils_event = require('../../utils/event.js');
var utils_renderTnode = require('../../utils/render-tnode.js');
require('@babel/runtime/helpers/toConsumableArray');
require('./table-cell.js');
require('../../popup/index.js');
require('../../popup/popup.js');
require('@babel/runtime/helpers/typeof');
require('@popperjs/core');
require('../../_chunks/dep-eb6b0f94.js');
require('../../utils/classnames.js');
require('../../utils/dom.js');
require('lodash/isString');
require('../../utils/easing.js');
require('../../popup/props.js');
require('../../utils/set-style.js');
require('lodash/isEmpty');
require('lodash/isFunction');
require('lodash/isObject');
require('../../utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('../../utils/map-props.js');
require('lodash/kebabCase');
require('../../utils/withInstall.js');
require('../../popup/style');
require('../util/common.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var get__default = /*#__PURE__*/_interopDefaultLegacy(get);
var camelCase__default = /*#__PURE__*/_interopDefaultLegacy(camelCase);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
}

var props = {
  data: table_baseTableProps["default"].data,
  columns: table_baseTableProps["default"].columns,
  rowClassName: table_baseTableProps["default"].rowClassName,
  rowKey: table_baseTableProps["default"].rowKey,
  rowspanAndColspan: table_baseTableProps["default"].rowspanAndColspan,
  firstFullRow: table_baseTableProps["default"].firstFullRow,
  lastFullRow: table_baseTableProps["default"].lastFullRow,
  onCellClick: table_baseTableProps["default"].onCellClick,
  rowHeight: {
    type: Number,
    "default": 0
  },
  bufferSize: {
    type: Number,
    "default": 0
  },
  scrollType: {
    type: String,
    "default": ""
  },
  handleRowMounted: {
    type: Function,
    "default": function _default() {}
  },
  trs: {
    type: Map,
    "default": function _default() {
      return /* @__PURE__ */new Map();
    }
  },
  onRowHover: table_baseTableProps["default"].onRowHover,
  onRowMousedown: table_baseTableProps["default"].onRowMousedown,
  onRowMouseenter: table_baseTableProps["default"].onRowMouseenter,
  onRowMouseleave: table_baseTableProps["default"].onRowMouseleave,
  onRowMouseup: table_baseTableProps["default"].onRowMouseup,
  onRowClick: table_baseTableProps["default"].onRowClick,
  onRowDbClick: table_baseTableProps["default"].onRowDbClick,
  selectedRowKeys: table_primaryTableProps["default"].selectedRowKeys,
  provider: {
    type: Object,
    "default": function _default() {
      return {};
    }
  },
  current: {
    type: Number,
    "default": 1
  }
};
var TableBody = vue.defineComponent({
  name: "".concat(config.prefix, "-table-body"),
  components: {
    TransitionGroup: vue.TransitionGroup
  },
  props: props,
  emits: ["row-dragstart", "row-dragover"],
  setup: function setup(props2) {
    vue.provide("rowHeightRef", vue.ref(props2.rowHeight));
  },
  computed: {
    selectColumn: function selectColumn() {
      return this.columns.find(function (_ref) {
        var type = _ref.type;
        return ["multiple", "single"].includes(type);
      }) || {};
    }
  },
  methods: {
    getRowspanAndColspanProps: function getRowspanAndColspanProps() {
      var props2 = [];
      var data = this.data,
          columns = this.columns,
          rowspanAndColspan = this.rowspanAndColspan;
      var cacheFirstColumnLeftedRowspan = [];
      data.forEach(function (rowData, rowIndex) {
        if (props2[rowIndex] === void 0) {
          props2[rowIndex] = {};
        }

        columns.forEach(function (col, colIndex) {
          var colKey = col.colKey;

          var _ref2 = rowspanAndColspan({
            col: col,
            colIndex: colIndex,
            row: rowData,
            rowIndex: rowIndex
          }) || {},
              rowspan = _ref2.rowspan,
              colspan = _ref2.colspan;

          rowspan = rowspan || 1;
          colspan = colspan || 1;

          if (colIndex === 0 && rowspan > 1) {
            cacheFirstColumnLeftedRowspan[rowspan + rowIndex - 1] = 1;
          }

          var leftedRowspan = 0;

          if (rowIndex === 0 || rowspan > 1) {
            leftedRowspan = rowspan - 1;
          } else {
            var _props2$preRowIndex, _props2$preRowIndex$c;

            var preRowIndex = rowIndex - 1;
            leftedRowspan = ((_props2$preRowIndex = props2[preRowIndex]) === null || _props2$preRowIndex === void 0 ? void 0 : (_props2$preRowIndex$c = _props2$preRowIndex[colKey]) === null || _props2$preRowIndex$c === void 0 ? void 0 : _props2$preRowIndex$c.leftedRowspan) || 0;

            if (leftedRowspan > 0) {
              leftedRowspan -= 1;
              rowspan = -1;
            }
          }

          var leftedColspan = 0;

          if (colIndex === 0 || colspan > 1) {
            leftedColspan = colspan - 1;

            if (colIndex === 0 && (leftedRowspan > 0 || cacheFirstColumnLeftedRowspan[rowIndex] > 0)) {
              leftedColspan = 1;
            }
          } else {
            if (rowIndex > 0) {
              var _props, _props$colKey, _props2, _props2$colKey;

              var preLeftedColspan = (_props = props2[rowIndex - 1]) === null || _props === void 0 ? void 0 : (_props$colKey = _props[colKey]) === null || _props$colKey === void 0 ? void 0 : _props$colKey.leftedColspan;
              var preLeftedColRowspan = (_props2 = props2[rowIndex - 1]) === null || _props2 === void 0 ? void 0 : (_props2$colKey = _props2[colKey]) === null || _props2$colKey === void 0 ? void 0 : _props2$colKey.leftedRowspan;

              if (preLeftedColspan > 0 && preLeftedColRowspan > 0) {
                leftedColspan = preLeftedColspan;
                colspan = -1;
              }
            }

            var preColKey = columns[colIndex - 1].colKey;

            if (leftedColspan === 0) {
              var _props2$rowIndex, _props2$rowIndex$preC;

              leftedColspan = ((_props2$rowIndex = props2[rowIndex]) === null || _props2$rowIndex === void 0 ? void 0 : (_props2$rowIndex$preC = _props2$rowIndex[preColKey]) === null || _props2$rowIndex$preC === void 0 ? void 0 : _props2$rowIndex$preC.leftedColspan) || 0;

              if (leftedColspan > 0) {
                leftedColspan -= 1;
                colspan = -1;
              }
            }
          }

          if (rowspan > 1 && colspan === -1) {
            colspan = 1;
          }

          if (colspan > 1 && rowspan === -1) {
            rowspan = 1;
          }

          props2[rowIndex][colKey] = {
            leftedColspan: leftedColspan,
            leftedRowspan: leftedRowspan,
            rowspan: rowspan,
            colspan: colspan
          };
        });
      });
      return props2;
    },
    renderFullRow: function renderFullRow(type) {
      var fullRowNode = utils_renderTnode.renderTNodeJSX(this, camelCase__default["default"](type));

      if (fullRowNode) {
        return vue.createVNode("tr", null, [vue.createVNode("td", {
          "colspan": this.columns.length,
          "class": "".concat(config.prefix, "-table__row--full ").concat(config.prefix, "-table__row-").concat(type)
        }, [fullRowNode])]);
      }

      return null;
    },
    renderBody: function renderBody() {
      var _this = this;

      var data = this.data,
          rowClassName = this.rowClassName,
          rowKey = this.rowKey,
          slots = this.$slots,
          $props = this.$props,
          rowspanAndColspan = this.rowspanAndColspan,
          selectedRowKeys = this.selectedRowKeys,
          selectColumn = this.selectColumn;
      var body = [];
      var allRowspanAndColspanProps;

      if (typeof rowspanAndColspan === "function") {
        allRowspanAndColspanProps = this.getRowspanAndColspanProps();
      }

      var columns = $props.columns,
          current = $props.current,
          scrollType = $props.scrollType,
          rowHeight = $props.rowHeight,
          bufferSize = $props.bufferSize,
          trs = $props.trs,
          provider = $props.provider,
          onRowHover = $props.onRowHover,
          onRowMouseup = $props.onRowMouseup,
          onRowMouseleave = $props.onRowMouseleave,
          onRowMouseenter = $props.onRowMouseenter,
          onRowMousedown = $props.onRowMousedown,
          onRowDbClick = $props.onRowDbClick,
          onRowClick = $props.onRowClick,
          onCellClick = $props.onCellClick;
      data.forEach(function (row, index) {
        var _row$__t_table_inner_, _this$provider$render, _this$provider;

        var defaultRowClass = typeof rowClassName === "function" ? rowClassName({
          row: row,
          rowIndex: index
        }) : rowClassName;
        var rowClass = [];

        if (defaultRowClass) {
          rowClass = rowClass.concat(defaultRowClass);
        }

        var rowspanAndColspanProps = allRowspanAndColspanProps ? allRowspanAndColspanProps[index] : void 0;
        var rowVnode;
        var key = rowKey ? get__default["default"](row, rowKey) : index + _this.current;
        var disabled = typeof selectColumn.disabled === "function" ? selectColumn.disabled({
          row: row,
          rowIndex: index
        }) : selectColumn.disabled;

        if (disabled) {
          rowClass.push("".concat(config.prefix, "-table__row--disabled"));
        }

        if ((selectedRowKeys === null || selectedRowKeys === void 0 ? void 0 : selectedRowKeys.indexOf(key)) > -1) {
          rowClass.push("".concat(config.prefix, "-table__row--selected"));
        }

        if ((_row$__t_table_inner_ = row.__t_table_inner_data__) !== null && _row$__t_table_inner_ !== void 0 && _row$__t_table_inner_.level) {
          var _row$__t_table_inner_2;

          rowClass.push("".concat(config.prefix, "-table__row--level-").concat(((_row$__t_table_inner_2 = row.__t_table_inner_data__) === null || _row$__t_table_inner_2 === void 0 ? void 0 : _row$__t_table_inner_2.level) || 0));
        }

        var props2 = _objectSpread({
          columns: columns,
          current: current,
          scrollType: scrollType,
          rowHeight: rowHeight,
          bufferSize: bufferSize,
          trs: trs,
          provider: provider,
          onRowHover: onRowHover,
          onRowMouseup: onRowMouseup,
          onRowMouseleave: onRowMouseleave,
          onRowMouseenter: onRowMouseenter,
          onRowMousedown: onRowMousedown,
          onRowDbClick: onRowDbClick,
          onRowClick: onRowClick,
          onCellClick: onCellClick,
          key: key,
          rowClass: rowClass.join(" "),
          rowData: row,
          index: index,
          rowspanAndColspanProps: rowspanAndColspanProps
        }, {
          onRowDragstart: function onRowDragstart() {
            utils_event.emitEvent(_this, "row-dragstart", {
              index: index,
              data: row
            });
          },
          onRowDragover: function onRowDragover(_ref3) {
            var e = _ref3.e;
            e.preventDefault();
            utils_event.emitEvent(_this, "row-dragover", {
              index: index,
              data: row,
              targetElm: rowVnode.el
            });
          }
        });

        rowVnode = vue.createVNode(table_baseTable_tableRow["default"], vue.mergeProps({
          "rowKey": _this.rowKey
        }, props2, {
          "onRowMounted": _this.handleRowMounted,
          "row": row
        }), _isSlot(slots) ? slots : {
          "default": function _default() {
            return [slots];
          }
        });
        body.push(rowVnode);
        var expandedRow = (_this$provider$render = (_this$provider = _this.provider).renderExpandedRow) === null || _this$provider$render === void 0 ? void 0 : _this$provider$render.call(_this$provider, {
          row: row,
          index: index
        });
        expandedRow && (body = body.concat(expandedRow));
      });
      var firstRow = this.renderFullRow("first-full-row");

      if (firstRow) {
        body = [firstRow].concat(body);
      }

      var lastRow = this.renderFullRow("last-full-row");

      if (lastRow) {
        body = body.concat(lastRow);
      }

      return body;
    }
  },
  render: function render() {
    if (this.provider.sortOnRowDraggable) {
      var _slot;

      var className = "".concat(config.prefix, "-table__body ").concat(this.provider.dragging ? "".concat(config.prefix, "-table__body--dragging") : "");
      return vue.createVNode(vue.resolveComponent("transition-group"), {
        "class": className,
        "tag": "tbody"
      }, _isSlot(_slot = this.renderBody()) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      });
    }

    return vue.createVNode("tbody", {
      "class": "".concat(config.prefix, "-table__body")
    }, [this.renderBody()]);
  }
});

exports["default"] = TableBody;
//# sourceMappingURL=table-body.js.map
