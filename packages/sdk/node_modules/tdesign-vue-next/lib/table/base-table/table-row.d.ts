import { VNode, PropType, Ref } from 'vue';
import { RowspanColspan } from '../type';
declare const _default: import("vue").DefineComponent<{
    rowClass: {
        type: PropType<import("../../common").ClassName | ((params: {
            row: import("../type").TableRowData;
            rowIndex: number;
        }) => import("../../common").ClassName)>;
    };
    columns: {
        type: PropType<import("../type").BaseTableCol<import("../type").TableRowData>[]>;
        default: () => import("../type").BaseTableCol<import("../type").TableRowData>[];
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspanProps: {
        type: PropType<RowspanColspan>;
        required: boolean;
        default(): {};
    };
    rowData: {
        type: ObjectConstructor;
        default(): any;
    };
    index: {
        type: PropType<number>;
        default: number;
    };
    current: {
        type: PropType<number>;
        default: number;
    };
    scrollType: {
        type: PropType<string>;
        default: string;
    };
    rowHeight: {
        type: PropType<number>;
        default: number;
    };
    bufferSize: {
        type: PropType<number>;
        default: number;
    };
    trs: {
        type: MapConstructor;
        default: () => Map<any, any>;
    };
    row: {
        type: PropType<object>;
        default: () => {};
    };
    provider: {
        type: ObjectConstructor;
        default(): {
            sortOnRowDraggable: boolean;
        };
    };
}, {
    tr: any;
    isInit: Ref<boolean>;
}, unknown, {}, {
    renderRow(): Array<VNode>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, any[], any, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    rowClass: {
        type: PropType<import("../../common").ClassName | ((params: {
            row: import("../type").TableRowData;
            rowIndex: number;
        }) => import("../../common").ClassName)>;
    };
    columns: {
        type: PropType<import("../type").BaseTableCol<import("../type").TableRowData>[]>;
        default: () => import("../type").BaseTableCol<import("../type").TableRowData>[];
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspanProps: {
        type: PropType<RowspanColspan>;
        required: boolean;
        default(): {};
    };
    rowData: {
        type: ObjectConstructor;
        default(): any;
    };
    index: {
        type: PropType<number>;
        default: number;
    };
    current: {
        type: PropType<number>;
        default: number;
    };
    scrollType: {
        type: PropType<string>;
        default: string;
    };
    rowHeight: {
        type: PropType<number>;
        default: number;
    };
    bufferSize: {
        type: PropType<number>;
        default: number;
    };
    trs: {
        type: MapConstructor;
        default: () => Map<any, any>;
    };
    row: {
        type: PropType<object>;
        default: () => {};
    };
    provider: {
        type: ObjectConstructor;
        default(): {
            sortOnRowDraggable: boolean;
        };
    };
}>> & {
    [x: string & `on${any}`]: (...args: any[]) => any;
}, {
    index: number;
    columns: import("../type").BaseTableCol<import("../type").TableRowData>[];
    row: object;
    current: number;
    rowKey: string;
    rowspanAndColspanProps: RowspanColspan;
    rowData: Record<string, any>;
    scrollType: string;
    rowHeight: number;
    bufferSize: number;
    trs: Map<unknown, unknown>;
    provider: Record<string, any>;
}>;
export default _default;
