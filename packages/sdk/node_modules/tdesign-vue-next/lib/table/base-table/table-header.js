/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var table_baseTable_tableCell = require('./table-cell.js');
var table_baseTableProps = require('../base-table-props.js');
var config = require('../../config.js');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/defineProperty');
require('../../popup/index.js');
require('../../popup/popup.js');
require('@babel/runtime/helpers/typeof');
require('@popperjs/core');
require('../../_chunks/dep-eb6b0f94.js');
require('../../utils/classnames.js');
require('../../utils/dom.js');
require('lodash/isString');
require('../../utils/easing.js');
require('../../popup/props.js');
require('../../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isFunction');
require('lodash/isObject');
require('../../utils/set-style.js');
require('../../utils/event.js');
require('../../utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/camelCase');
require('../../utils/map-props.js');
require('lodash/kebabCase');
require('../../utils/withInstall.js');
require('../../popup/style');
require('../util/common.js');

var TableHeader = vue.defineComponent({
  name: "".concat(config.prefix, "-table-header"),
  components: {
    TableCell: table_baseTable_tableCell["default"]
  },
  props: {
    columns: table_baseTableProps["default"].columns,
    bordered: table_baseTableProps["default"].bordered
  },
  data: function data() {
    return {
      cacheRowMaxRowspan: []
    };
  },
  methods: {
    renderHeader: function renderHeader() {
      var _this = this;

      var bordered = this.bordered,
          cacheRowMaxRowspan = this.cacheRowMaxRowspan;
      var trPropsList = [];
      this.renderTr(this.columns, 0, trPropsList, true);
      return trPropsList.map(function (thPropsList, rowindex) {
        var currentRowMaxRowspan = cacheRowMaxRowspan[rowindex] || 1;
        return vue.createVNode("tr", null, [thPropsList.map(function (_ref) {
          var column = _ref.column,
              rowspan = _ref.rowspan,
              colspan = _ref.colspan,
              index = _ref.index,
              hasChildren = _ref.hasChildren,
              isFirstColumn = _ref.isFirstColumn;
          var withBorder = bordered && index === 0 && !isFirstColumn;
          return _this.renderCell(column, hasChildren ? rowspan : currentRowMaxRowspan, colspan, index, withBorder);
        })]);
      });
    },
    renderTr: function renderTr(columns, currentRowIndex, trPropsList, isParentFirstColumn) {
      var _this2 = this,
          _trPropsList$currentR;

      var cacheRowMaxRowspan = this.cacheRowMaxRowspan;
      var currentRowThProps = [];

      if (typeof trPropsList[currentRowIndex] === "undefined") {
        trPropsList[currentRowIndex] = [];
      }

      if (typeof cacheRowMaxRowspan[currentRowIndex] === "undefined") {
        cacheRowMaxRowspan[currentRowIndex] = 1;
      }

      var colspan = 0;
      var rowspan = 1;
      columns.forEach(function (column, index) {
        var children = column.children;

        if (children !== null && children !== void 0 && children.length) {
          var isFirstColumn = isParentFirstColumn && index === 0;

          var _this2$renderTr = _this2.renderTr(children, currentRowIndex + 1, trPropsList, isFirstColumn),
              occupiedCol = _this2$renderTr.colspan,
              occupiedRow = _this2$renderTr.rowspan;

          colspan += occupiedCol;
          rowspan += occupiedRow;
          cacheRowMaxRowspan[currentRowIndex] = Math.max(rowspan, cacheRowMaxRowspan[currentRowIndex]);
          currentRowThProps[index] = {
            rowspan: 1,
            colspan: occupiedCol,
            column: column,
            index: index,
            hasChildren: true,
            isFirstColumn: index === 0 && isParentFirstColumn
          };
        }
      });
      columns.forEach(function (column, index) {
        var children = column.children;

        if (!children || (children === null || children === void 0 ? void 0 : children.length) === 0) {
          currentRowThProps[index] = {
            rowspan: rowspan,
            colspan: 1,
            column: column,
            index: index,
            hasChildren: false,
            isFirstColumn: index === 0 && isParentFirstColumn
          };
          colspan += 1;
        }
      });

      (_trPropsList$currentR = trPropsList[currentRowIndex]).push.apply(_trPropsList$currentR, currentRowThProps);

      return {
        colspan: colspan,
        rowspan: rowspan
      };
    },
    renderCell: function renderCell(column, rowspan, colspan, index, withBorder) {
      var _this3 = this;

      var title = column.title,
          render = column.render;
      var customData = {
        type: "title",
        func: "title"
      };
      var customRender;

      if (typeof title === "string") {
        var _this$$slots;

        if (typeof ((_this$$slots = this.$slots) === null || _this$$slots === void 0 ? void 0 : _this$$slots[title]) === "function") {
          customRender = function customRender(params) {
            return _this3.$slots[title](params);
          };
        } else {
          customRender = function customRender() {
            return title;
          };
        }
      } else if (typeof title === "function") {
        customRender = function customRender(h, params) {
          return title(h, {
            colIndex: params.colIndex,
            col: params.col
          });
        };
      } else if (typeof render === "function") {
        customRender = render;
        customData.func = "render";
      } else {
        customRender = function customRender() {
          return "";
        };
      }

      var cellData = {
        col: column,
        colIndex: index,
        customData: customData,
        customRender: customRender,
        type: "th",
        withBorder: withBorder
      };
      return vue.createVNode(vue.resolveComponent("table-cell"), {
        "cellData": cellData,
        "colspan": colspan,
        "rowspan": rowspan
      }, null);
    }
  },
  render: function render() {
    return vue.createVNode("thead", null, [this.renderHeader()]);
  }
});

exports["default"] = TableHeader;
//# sourceMappingURL=table-header.js.map
