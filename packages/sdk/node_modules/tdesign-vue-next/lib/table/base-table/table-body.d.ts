import { VNode, PropType } from 'vue';
import { BaseTableCol } from '../type';
declare const _default: import("vue").DefineComponent<{
    data: {
        type: PropType<import("../type").TableRowData[]>;
        default: () => import("../type").TableRowData[];
    };
    columns: {
        type: PropType<BaseTableCol<import("../type").TableRowData>[]>;
        default: () => BaseTableCol<import("../type").TableRowData>[];
    };
    rowClassName: {
        type: PropType<import("../../common").ClassName | ((params: {
            row: import("../type").TableRowData;
            rowIndex: number;
        }) => import("../../common").ClassName)>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: PropType<(params: import("../type").RowspanAndColspanParams<import("../type").TableRowData>) => import("../type").RowspanColspan>;
    };
    firstFullRow: {
        type: PropType<string | import("../../common").TNode<any>>;
    };
    lastFullRow: {
        type: PropType<string | import("../../common").TNode<any>>;
    };
    onCellClick: PropType<(context: import("../type").BaseTableCellEventContext<import("../type").TableRowData>) => void>;
    rowHeight: {
        type: PropType<number>;
        default: number;
    };
    bufferSize: {
        type: PropType<number>;
        default: number;
    };
    scrollType: {
        type: StringConstructor;
        default: string;
    };
    handleRowMounted: {
        type: PropType<() => void>;
        default: () => void;
    };
    trs: {
        type: MapConstructor;
        default: () => Map<any, any>;
    };
    onRowHover: PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowMousedown: PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowMouseenter: PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowMouseleave: PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowMouseup: PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowClick: PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowDbClick: PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    selectedRowKeys: {
        type: PropType<(string | number)[]>;
    };
    provider: {
        type: ObjectConstructor;
        default(): {};
    };
    current: {
        type: NumberConstructor;
        default: number;
    };
}, void, unknown, {
    selectColumn(): any;
}, {
    getRowspanAndColspanProps(): any[];
    renderFullRow(type: 'first-full-row' | 'last-full-row'): JSX.Element;
    renderBody(): Array<VNode>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("row-dragstart" | "row-dragover")[], "row-dragstart" | "row-dragover", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    data: {
        type: PropType<import("../type").TableRowData[]>;
        default: () => import("../type").TableRowData[];
    };
    columns: {
        type: PropType<BaseTableCol<import("../type").TableRowData>[]>;
        default: () => BaseTableCol<import("../type").TableRowData>[];
    };
    rowClassName: {
        type: PropType<import("../../common").ClassName | ((params: {
            row: import("../type").TableRowData;
            rowIndex: number;
        }) => import("../../common").ClassName)>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: PropType<(params: import("../type").RowspanAndColspanParams<import("../type").TableRowData>) => import("../type").RowspanColspan>;
    };
    firstFullRow: {
        type: PropType<string | import("../../common").TNode<any>>;
    };
    lastFullRow: {
        type: PropType<string | import("../../common").TNode<any>>;
    };
    onCellClick: PropType<(context: import("../type").BaseTableCellEventContext<import("../type").TableRowData>) => void>;
    rowHeight: {
        type: PropType<number>;
        default: number;
    };
    bufferSize: {
        type: PropType<number>;
        default: number;
    };
    scrollType: {
        type: StringConstructor;
        default: string;
    };
    handleRowMounted: {
        type: PropType<() => void>;
        default: () => void;
    };
    trs: {
        type: MapConstructor;
        default: () => Map<any, any>;
    };
    onRowHover: PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowMousedown: PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowMouseenter: PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowMouseleave: PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowMouseup: PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowClick: PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowDbClick: PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    selectedRowKeys: {
        type: PropType<(string | number)[]>;
    };
    provider: {
        type: ObjectConstructor;
        default(): {};
    };
    current: {
        type: NumberConstructor;
        default: number;
    };
}>> & {
    "onRow-dragstart"?: (...args: any[]) => any;
    "onRow-dragover"?: (...args: any[]) => any;
}, {
    data: import("../type").TableRowData[];
    columns: BaseTableCol<import("../type").TableRowData>[];
    current: number;
    rowKey: string;
    scrollType: string;
    rowHeight: number;
    bufferSize: number;
    trs: Map<unknown, unknown>;
    provider: Record<string, any>;
    handleRowMounted: () => void;
}>;
export default _default;
