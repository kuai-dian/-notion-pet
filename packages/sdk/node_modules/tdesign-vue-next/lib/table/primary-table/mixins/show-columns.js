/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var button_index = require('../../../button/index.js');
var dialog_index = require('../../../dialog/index.js');
var checkbox_index = require('../../../checkbox/index.js');
var checkbox_group = require('../../../checkbox/group.js');
var table_primaryTableProps = require('../../primary-table-props.js');
var config = require('../../../config.js');
require('../../../button/button.js');
require('@babel/runtime/helpers/defineProperty');
require('../../../utils/classnames.js');
require('../../../loading/index.js');
require('../../../loading/loading.js');
require('@babel/runtime/helpers/slicedToArray');
require('../../../loading/icon/gradient.js');
require('../../../_common/js/loading/circle-adapter.js');
require('../../../_common/js/utils/set-style.js');
require('../../../_common/js/utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../../../utils/dom.js');
require('../../../_chunks/dep-eb6b0f94.js');
require('lodash/isString');
require('../../../utils/easing.js');
require('../../../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isFunction');
require('lodash/isObject');
require('../../../utils/transfer-dom.js');
require('../../../loading/props.js');
require('../../../utils/withInstall.js');
require('../../../loading/style');
require('../../../loading/plugin.js');
require('../../../button/props.js');
require('../../../utils/ripple.js');
require('../../../utils/set-style.js');
require('../../../button/style');
require('../../../dialog/dialog.js');
require('../../../dialog/actions.js');
require('@babel/runtime/helpers/typeof');
require('../../../dialog/props.js');
require('../../../utils/event.js');
require('../../../utils/helper.js');
require('lodash/camelCase');
require('../../../utils/mixins.js');
require('../../../config-provider/config-receiver.js');
require('../../../config-provider/zh_CN_config.js');
require('../../../dialog/style');
require('../../../dialog/plugin.js');
require('../../../checkbox/checkbox.js');
require('../../../checkbox/props.js');
require('../../../utils/map-props.js');
require('lodash/kebabCase');
require('../../../checkbox/style');
require('lodash/intersection');
require('../../../checkbox/checkbox-group-props.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
}

var content = "\u81EA\u5B9A\u4E49\u5217";
var showColumns = vue.defineComponent({
  name: "".concat(config.prefix, "-primary-show-columns"),
  components: {
    Button: button_index.Button,
    BulletpointIcon: tdesignIconsVueNext.BulletpointIcon,
    Dialog: dialog_index.Dialog,
    Checkbox: checkbox_index.Checkbox,
    CheckboxGroup: checkbox_group["default"]
  },
  props: {
    columns: table_primaryTableProps["default"].columns,
    showColumns: {
      type: Boolean,
      "default": false
    }
  },
  data: function data() {
    return {
      showColumnKeys: this.columns.map(function (_ref) {
        var colKey = _ref.colKey;
        return colKey;
      }),
      showColumnCheckboxKeys: this.columns.map(function (_ref2) {
        var colKey = _ref2.colKey;
        return colKey;
      }),
      isShowColumnsDlg: false
    };
  },
  computed: {
    showColumnCheckboxOpts: function showColumnCheckboxOpts() {
      return this.columns.filter(function (_ref3) {
        var colKey = _ref3.colKey,
            title = _ref3.title;
        return colKey && title;
      }).map(function (_ref4) {
        var colKey = _ref4.colKey,
            title = _ref4.title;
        return {
          label: title,
          value: colKey
        };
      });
    },
    isAllShowColumns: function isAllShowColumns() {
      var _this = this;

      return this.showColumnCheckboxOpts.every(function (_ref5) {
        var value = _ref5.value;
        return _this.showColumnCheckboxKeys.includes(value);
      });
    },
    isSomeShowColumns: function isSomeShowColumns() {
      var _this2 = this;

      return !this.isAllShowColumns && this.showColumnCheckboxOpts.some(function (_ref6) {
        var value = _ref6.value;
        return _this2.showColumnCheckboxKeys.includes(value);
      });
    }
  },
  watch: {
    columns: {
      deep: true,
      handler: function handler() {
        this.updateColumns();
      }
    }
  },
  methods: {
    getShowColumns: function getShowColumns(columns) {
      var _this3 = this;

      return columns.filter(function (_ref7) {
        var colKey = _ref7.colKey;
        return _this3.showColumnKeys.includes(colKey) || !_this3.showColumnCheckboxOpts.map(function (_ref8) {
          var value = _ref8.value;
          return value;
        }).includes(colKey);
      });
    },
    renderShowColumnsDlgFooter: function renderShowColumnsDlgFooter() {
      return vue.createVNode("div", null, [vue.createVNode(button_index.Button, {
        "variant": "base",
        "theme": "primary",
        "onClick": this.handleConfirmShowColumnsDlg
      }, {
        "default": function _default() {
          return ["\u786E\u5B9A"];
        }
      }), vue.createVNode(button_index.Button, {
        "onClick": this.handleConfirmShowColumnsDlg
      }, {
        "default": function _default() {
          return ["\u53D6\u6D88"];
        }
      })]);
    },
    renderShowColumnsDlg: function renderShowColumnsDlg() {
      var _this4 = this;

      return vue.createVNode(dialog_index.Dialog, {
        "header": content,
        "footer": this.renderShowColumnsDlgFooter,
        "visible": this.isShowColumnsDlg
      }, {
        "default": function _default() {
          return [vue.createVNode("div", {
            "slot": "body"
          }, [vue.createVNode("div", null, [vue.createVNode(checkbox_index.Checkbox, {
            "indeterminate": _this4.isSomeShowColumns,
            "checked": _this4.isAllShowColumns,
            "onChange": _this4.handleClickAllShowColumns
          }, {
            "default": function _default() {
              return ["\u5168\u9009"];
            }
          })]), vue.createVNode(checkbox_group["default"], {
            "options": _this4.showColumnCheckboxOpts,
            "modelValue": _this4.showColumnCheckboxKeys,
            "onUpdate:modelValue": function onUpdateModelValue($event) {
              return _this4.showColumnCheckboxKeys = $event;
            }
          }, null)])];
        }
      });
    },
    renderShowColumns: function renderShowColumns() {
      var _this5 = this;

      return vue.createVNode("div", null, [vue.createVNode("div", null, [vue.createVNode(button_index.Button, {
        "icon": function icon() {
          return vue.createVNode(tdesignIconsVueNext.BulletpointIcon, null, null);
        },
        "onClick": function onClick() {
          return _this5.isShowColumnsDlg = true;
        }
      }, _isSlot(content) ? content : {
        "default": function _default() {
          return [content];
        }
      })]), this.renderShowColumnsDlg()]);
    },
    handleClickAllShowColumns: function handleClickAllShowColumns() {
      this.showColumnCheckboxKeys = this.isAllShowColumns ? [] : this.showColumnCheckboxOpts.map(function (_ref9) {
        var value = _ref9.value;
        return value;
      });
    },
    handleConfirmShowColumnsDlg: function handleConfirmShowColumnsDlg() {
      this.showColumnKeys = _toConsumableArray__default["default"](this.showColumnCheckboxKeys);
      this.handleCancelShowColumnsDlg();
    },
    handleCancelShowColumnsDlg: function handleCancelShowColumnsDlg() {
      this.isShowColumnsDlg = false;
    },
    updateColumns: function updateColumns() {
      this.showColumnKeys = this.columns.map(function (_ref10) {
        var colKey = _ref10.colKey;
        return colKey;
      });
      this.showColumnCheckboxKeys = this.columns.map(function (_ref11) {
        var colKey = _ref11.colKey;
        return colKey;
      });
    }
  }
});

exports["default"] = showColumns;
//# sourceMappingURL=show-columns.js.map
