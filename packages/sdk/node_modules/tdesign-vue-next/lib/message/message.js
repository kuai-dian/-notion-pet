/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var loading_index = require('../loading/index.js');
var config = require('../config.js');
var message_const = require('./const.js');
var utils_renderTnode = require('../utils/render-tnode.js');
var message_props = require('./props.js');
var utils_event = require('../utils/event.js');
require('../loading/loading.js');
require('@babel/runtime/helpers/slicedToArray');
require('../loading/icon/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../utils/classnames.js');
require('../utils/dom.js');
require('../_chunks/dep-eb6b0f94.js');
require('lodash/isString');
require('../utils/easing.js');
require('../utils/transfer-dom.js');
require('../loading/props.js');
require('lodash/isEmpty');
require('lodash/isFunction');
require('lodash/isObject');
require('../utils/withInstall.js');
require('../loading/style');
require('../loading/plugin.js');
require('../utils/helper.js');
require('lodash/camelCase');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(config.prefix, "-message");
var _Message = vue.defineComponent({
  name: "TMessage",
  props: _objectSpread({}, message_props["default"]),
  emits: ["duration-end", "click-close-btn"],
  data: function data() {
    return {
      timer: null
    };
  },
  computed: {
    classes: function classes() {
      var _this = this;

      var status = {};
      message_const.THEME_LIST.forEach(function (t) {
        status["".concat(config.prefix, "-is-").concat(t)] = _this.theme === t;
      });
      return [name, status, _defineProperty__default["default"]({}, "".concat(config.prefix, "-is-closable"), this.closeBtn || this.$slots.closeBtn)];
    }
  },
  created: function created() {
    this.duration && this.setTimer();
  },
  methods: {
    setTimer: function setTimer() {
      var _this2 = this;

      if (!this.duration) {
        return;
      }

      this.timer = Number(setTimeout(function () {
        _this2.clearTimer();

        utils_event.emitEvent(_this2, "duration-end");
      }, this.duration));
    },
    clearTimer: function clearTimer() {
      this.duration && clearTimeout(this.timer);
    },
    close: function close(e) {
      utils_event.emitEvent(this, "click-close-btn", e);
    },
    renderClose: function renderClose() {
      var defaultClose = vue.createVNode(tdesignIconsVueNext.CloseIcon, null, null);

      return vue.createVNode("span", {
        "class": "".concat(name, "__close"),
        "onClick": this.close
      }, [utils_renderTnode.renderTNodeJSX(this, "closeBtn", defaultClose)]);
    },
    renderIcon: function renderIcon() {
      if (this.icon === false) return;
      if (typeof this.icon === "function") return this.icon(vue.h);

      if (this.$slots.icon) {
        return this.$slots.icon(null);
      }

      var Icon = {
        info: tdesignIconsVueNext.InfoCircleFilledIcon,
        success: tdesignIconsVueNext.CheckCircleFilledIcon,
        warning: tdesignIconsVueNext.ErrorCircleFilledIcon,
        error: tdesignIconsVueNext.ErrorCircleFilledIcon,
        question: tdesignIconsVueNext.HelpCircleFilledIcon,
        loading: loading_index.Loading
      }[this.theme];
      return vue.createVNode(Icon, null, null);
    }
  },
  render: function render() {
    return vue.createVNode("div", {
      "class": this.classes,
      "onMouseenter": this.clearTimer,
      "onMouseleave": this.setTimer
    }, [this.renderIcon(), utils_renderTnode.renderContent(this, "default", "content"), this.renderClose()]);
  }
});

exports["default"] = _Message;
//# sourceMappingURL=message.js.map
