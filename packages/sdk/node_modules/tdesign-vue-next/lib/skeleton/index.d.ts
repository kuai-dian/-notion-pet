import { TdSkeletonProps } from './type';
import './style';
export * from './type';
export declare type SkeletonProps = TdSkeletonProps;
export declare const Skeleton: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            loading: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            animation: {
                type: import("vue").PropType<"gradient" | "flashed">;
                validator(val: "gradient" | "flashed"): boolean;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            rowCol: {
                type: import("vue").PropType<import("./type").SkeletonRowCol>;
            };
            theme: {
                type: import("vue").PropType<"article" | "text" | "tab" | "avatar" | "paragraph" | "avatar-text">;
                validator(val: "article" | "text" | "tab" | "avatar" | "paragraph" | "avatar-text"): boolean;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "loading">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            animation: {
                type: import("vue").PropType<"gradient" | "flashed">;
                validator(val: "gradient" | "flashed"): boolean;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            rowCol: {
                type: import("vue").PropType<import("./type").SkeletonRowCol>;
            };
            theme: {
                type: import("vue").PropType<"article" | "text" | "tab" | "avatar" | "paragraph" | "avatar-text">;
                validator(val: "article" | "text" | "tab" | "avatar" | "paragraph" | "avatar-text"): boolean;
            };
        }>>, {
            renderRowCol: (_rowCol?: import("./type").SkeletonRowCol) => JSX.Element[];
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            loading: boolean;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        animation: {
            type: import("vue").PropType<"gradient" | "flashed">;
            validator(val: "gradient" | "flashed"): boolean;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowCol: {
            type: import("vue").PropType<import("./type").SkeletonRowCol>;
        };
        theme: {
            type: import("vue").PropType<"article" | "text" | "tab" | "avatar" | "paragraph" | "avatar-text">;
            validator(val: "article" | "text" | "tab" | "avatar" | "paragraph" | "avatar-text"): boolean;
        };
    }>> & import("vue").ShallowUnwrapRef<{
        renderRowCol: (_rowCol?: import("./type").SkeletonRowCol) => JSX.Element[];
    }> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    animation: {
        type: import("vue").PropType<"gradient" | "flashed">;
        validator(val: "gradient" | "flashed"): boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowCol: {
        type: import("vue").PropType<import("./type").SkeletonRowCol>;
    };
    theme: {
        type: import("vue").PropType<"article" | "text" | "tab" | "avatar" | "paragraph" | "avatar-text">;
        validator(val: "article" | "text" | "tab" | "avatar" | "paragraph" | "avatar-text"): boolean;
    };
}>>, {
    renderRowCol: (_rowCol?: import("./type").SkeletonRowCol) => JSX.Element[];
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    loading: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Skeleton;
