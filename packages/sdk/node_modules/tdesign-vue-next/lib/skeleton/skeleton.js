/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var isNumber = require('lodash/isNumber');
var isFunction = require('lodash/isFunction');
var config = require('../config.js');
var utils_renderTnode = require('../utils/render-tnode.js');
var skeleton_props = require('./props.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isObject');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var isNumber__default = /*#__PURE__*/_interopDefaultLegacy(isNumber);
var isFunction__default = /*#__PURE__*/_interopDefaultLegacy(isFunction);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(config.prefix, "-skeleton");
var ThemeMap = {
  text: [1],
  avatar: [{
    type: "circle",
    size: "56px"
  }],
  paragraph: [1, 1, {
    width: "70%"
  }],
  "avatar-text": [[{
    type: "circle"
  }, {
    type: "text",
    height: "32px"
  }]],
  tab: [{
    height: "30px"
  }, {
    height: "200px"
  }],
  article: [{
    type: "rect",
    height: "30px",
    width: "100%"
  }, {
    type: "rect",
    height: "200px",
    width: "100%"
  }, [{
    type: "text",
    height: "30px"
  }, {
    type: "text",
    height: "30px"
  }, {
    type: "text",
    height: "30px"
  }], [{
    type: "text",
    height: "30px"
  }, {
    type: "text",
    height: "30px"
  }], [{
    type: "text",
    height: "30px"
  }, {
    type: "text",
    height: "30px"
  }], [{
    type: "text",
    height: "30px"
  }, {
    type: "text",
    height: "30px"
  }]]
};

var getColItemStyle = function getColItemStyle(obj) {
  var styleName = ["width", "height", "marginRight", "marginLeft", "margin", "size", "background", "backgroundColor"];
  var style = {};
  styleName.forEach(function (name2) {
    if (name2 in obj) {
      var px = isNumber__default["default"](obj[name2]) ? "".concat(obj[name2], "px") : obj[name2];

      if (name2 === "size") {
        var _ref = [px, px];
        style.width = _ref[0];
        style.height = _ref[1];
      } else {
        style[name2] = px;
      }
    }
  });
  return style;
};

var _Skeleton = vue.defineComponent({
  name: "TSkeleton",
  props: _objectSpread({}, skeleton_props["default"]),
  setup: function setup(props2) {
    var getColItemClass = function getColItemClass(obj) {
      return ["".concat(name, "__col"), "".concat(name, "--type-").concat(obj.type || "text"), _defineProperty__default["default"]({}, "".concat(name, "--animation-").concat(props2.animation), props2.animation)];
    };

    var renderCols = function renderCols(_cols) {
      var cols = [];

      if (Array.isArray(_cols)) {
        cols = _cols;
      } else if (isNumber__default["default"](_cols)) {
        cols = [{
          type: "text"
        }];
      } else {
        cols = [_cols];
      }

      return cols.map(function (obj) {
        return vue.createVNode("div", {
          "class": getColItemClass(obj),
          "style": getColItemStyle(obj)
        }, [isFunction__default["default"](obj.content) ? obj.content(vue.h) : obj.content]);
      });
    };

    var renderRowCol = function renderRowCol(_rowCol) {
      var rowCol = _rowCol || props2.rowCol;

      var getBlockClass = function getBlockClass() {
        return ["".concat(name, "__row")];
      };

      return rowCol.map(function (item) {
        return vue.createVNode("div", {
          "class": getBlockClass()
        }, [renderCols(item)]);
      });
    };

    return {
      renderRowCol: renderRowCol
    };
  },
  render: function render() {
    var content = utils_renderTnode.renderContent(this, "default", "content");

    if (this.$slots["default"] && !this.loading) {
      return vue.createVNode("div", null, [content]);
    }

    if (!this.loading) {
      return;
    }

    var children = [];

    if (this.theme) {
      children.push(this.renderRowCol(ThemeMap[this.theme]));
    }

    if (this.rowCol) {
      children.push(this.renderRowCol(this.rowCol));
    }

    if (!this.theme && !this.rowCol) {
      children.push(this.renderRowCol([1, 1, 1, {
        width: "70%"
      }]));
    }

    return vue.createVNode("div", {
      "class": name
    }, [children]);
  }
});

exports["default"] = _Skeleton;
//# sourceMappingURL=skeleton.js.map
