{"version":3,"file":"tree-node-model.js","sources":["../../../../src/_common/js/tree/tree-node-model.ts"],"sourcesContent":["import pick from 'lodash/pick';\nimport { TreeNode } from './tree-node';\nimport { OptionData } from '../common';\nimport {\n  TreeNodeValue,\n  TypeTreeNodeModel,\n  TypeTreeNodeData,\n  TypeTreeItem,\n  TreeNodeModelProps,\n} from './types';\nimport log from '../log/log';\n\n// 获取节点需要暴露的属性\nfunction getExposedProps(node: TreeNode): TreeNodeModelProps {\n  const props = pick(node, [\n    'value',\n    'label',\n    'data',\n    'actived',\n    'expanded',\n    'checked',\n    'indeterminate',\n    'loading',\n  ]) as TreeNodeModelProps;\n  return props;\n}\n\n// 封装对外暴露的对象\nexport function createNodeModel(node: TreeNode): TypeTreeNodeModel {\n  const props = getExposedProps(node);\n\n  const model: TypeTreeNodeModel = {\n    ...props,\n\n    // 获取节点所处层级\n    getLevel() {\n      return node.getLevel();\n    },\n\n    // 获取节点在 children 中的位置\n    getIndex() {\n      return node.getIndex();\n    },\n\n    // 判断节点是否为 children 中的第一个节点\n    isFirst() {\n      return node.isFirst();\n    },\n\n    // 判断节点是否为 children 中的最后一个节点\n    isLast() {\n      return node.isLast();\n    },\n\n    // 判断节点是否为叶节点\n    isLeaf() {\n      return node.isLeaf();\n    },\n\n    // 插入数据到节点之前\n    insertBefore(newData: TypeTreeItem) {\n      return node.insertBefore(newData);\n    },\n\n    // 插入数据到节点之后\n    insertAfter(newData: TypeTreeItem) {\n      return node.insertAfter(newData);\n    },\n\n    // 给当前节点添加子节点数据\n    appendData(data: TypeTreeNodeData | TypeTreeNodeData[]) {\n      return node.append(data);\n    },\n\n    // 返回路径节点数据集合\n    getPath(): TypeTreeNodeModel[] {\n      const nodes = node.getPath();\n      return nodes.map((item: TreeNode) => item.getModel());\n    },\n\n    // 获取单个父节点数据\n    getParent(): TypeTreeNodeModel {\n      return node.parent?.getModel();\n    },\n\n    // 获取所有父节点数据\n    getParents(): TypeTreeNodeModel[] {\n      const nodes = node.getParents();\n      return nodes.map((item: TreeNode) => item.getModel());\n    },\n\n    // 获取根节点\n    getRoot(): TypeTreeNodeModel {\n      const root = node.getRoot();\n      return root?.getModel();\n    },\n\n    // 获取兄弟节点，包含自己在内\n    getSiblings(): TypeTreeNodeModel[] {\n      const nodes = node.getSiblings();\n      return nodes.map((item: TreeNode) => item.getModel());\n    },\n\n    // 返回当前节点的第一层子节点数据集合\n    getChildren(deep?: boolean): boolean | TypeTreeNodeModel[] {\n      let childrenModel: boolean | TypeTreeNodeModel[] = false;\n      const { children } = node;\n      if (Array.isArray(children)) {\n        if (children.length > 0) {\n          if (deep) {\n            const nodes = node.walk();\n            nodes.shift();\n            childrenModel = nodes.map((item) => item.getModel());\n          } else {\n            childrenModel = children.map((item) => item.getModel());\n          }\n        } else {\n          childrenModel = false;\n        }\n      } else if (typeof children === 'boolean') {\n        childrenModel = children;\n      }\n      return childrenModel;\n    },\n\n    // 删除本节点，或者 value 指定的子节点\n    remove(value?: TreeNodeValue) {\n      if (!value) {\n        node.remove();\n        return;\n      }\n\n      const { tree } = node;\n      const targetNode = tree.getNode(value);\n      if (!targetNode) {\n        log.warnOnce('Tree', `\\`${value}\\` is not exist`);\n        return;\n      }\n\n      const parents = targetNode.getParents();\n      const parentValues = parents.map((pnode) => (pnode.value));\n      if (parentValues.indexOf(node.value) < 0) {\n        log.warnOnce('Tree', `\\`${value}\\` is not a childNode of current node`);\n        return;\n      }\n      targetNode.remove();\n    },\n\n    // 设置本节点携带的元数据\n    setData(data: OptionData) {\n      Object.assign(node.data, data);\n    },\n  };\n\n  return model;\n}\n\n// 更新封装对象\nexport function updateNodeModel(model: TypeTreeNodeModel, node: TreeNode) {\n  // 同步节点属性\n  const props = getExposedProps(node);\n  Object.assign(model, props);\n}\n"],"names":["getExposedProps","node","props","pick","createNodeModel","model","getLevel","getIndex","isFirst","isLast","isLeaf","insertBefore","newData","insertAfter","appendData","data","append","getPath","nodes","map","item","getModel","getParent","parent","getParents","getRoot","root","getSiblings","getChildren","deep","childrenModel","children","Array","isArray","length","walk","shift","remove","value","tree","targetNode","getNode","log","warnOnce","parents","parentValues","pnode","indexOf","setData","Object","assign","updateNodeModel"],"mappings":"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"}