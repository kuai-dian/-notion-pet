/// <reference types="lodash" />
import { PopupProps } from '../popup/index';
import Option from './option';
import { SelectOption, TdOptionProps, SelectValue, SelectOptionGroup } from './type';
import { ClassName } from '../common';
export declare type OptionInstance = InstanceType<typeof Option>;
declare const _default: import("vue").DefineComponent<{
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<import("../common").TNode<{
            value: SelectOption[];
            collapsedSelectedItems: SelectOption[];
            count: number;
        }>>;
    };
    creatable: BooleanConstructor;
    disabled: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
        default: string;
    };
    filter: {
        type: import("vue").PropType<(filterWords: string, option: SelectOption) => boolean | Promise<boolean>>;
    };
    filterable: BooleanConstructor;
    keys: {
        type: import("vue").PropType<import("./type").SelectKeysType>;
    };
    loading: BooleanConstructor;
    loadingText: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
        default: string;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    options: {
        type: import("vue").PropType<SelectOption[]>;
        default: () => SelectOption[];
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    popupProps: {
        type: import("vue").PropType<import("../popup/type").TdPopupProps>;
    };
    prefixIcon: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    reserveKeyword: BooleanConstructor;
    showCheckAlll: BooleanConstructor;
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    value: {
        type: import("vue").PropType<SelectValue<SelectOption>>;
    };
    defaultValue: {
        type: import("vue").PropType<SelectValue<SelectOption>>;
    };
    valueDisplay: {
        type: import("vue").PropType<import("../common").TNode<{
            value: SelectOption[];
            onClose: () => void;
        }>>;
    };
    valueType: {
        type: import("vue").PropType<"object" | "value">;
        default: "object" | "value";
        validator(val: "object" | "value"): boolean;
    };
    onBlur: import("vue").PropType<(context: {
        value: SelectValue<SelectOption>;
        e: FocusEvent | KeyboardEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: SelectValue<SelectOption>) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onCreate: import("vue").PropType<(value: string | number) => void>;
    onEnter: import("vue").PropType<(context: {
        inputValue: string;
        e: KeyboardEvent;
        value: SelectValue<SelectOption>;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        value: SelectValue<SelectOption>;
        e: FocusEvent | KeyboardEvent;
    }) => void>;
    onRemove: import("vue").PropType<(options: import("./type").SelectRemoveContext<SelectOption>) => void>;
    onSearch: import("vue").PropType<(filterWords: string) => void>;
    onVisibleChange: import("vue").PropType<(visible: boolean) => void>;
}, unknown, {
    isHover: boolean;
    visible: boolean;
    searchInput: string;
    showCreateOption: boolean;
    hasOptions: boolean;
    defaultProps: import("../popup/type").TdPopupProps;
    focusing: boolean;
    labelInValue: boolean;
    realValue: string;
    realLabel: string;
    realOptions: TdOptionProps[];
    hoverIndex: number;
    popupOpenTime: number;
    checkScroll: boolean;
}, {
    classes(): ClassName;
    popClass(): string;
    tipsClass(): ClassName;
    emptyClass(): ClassName;
    showPlaceholder(): boolean;
    isGroupOption(): boolean;
    filterPlaceholder(): string;
    showClose(): boolean;
    showArrow(): boolean;
    canFilter(): boolean;
    showLoading(): boolean;
    showFilter(): boolean;
    selectedSingle(): string;
    selectedMultiple(): Array<TdOptionProps>;
    popupObject(): PopupProps;
    filterOptions(): Array<TdOptionProps>;
    displayOptions(): Array<TdOptionProps>;
    displayOptionsMap(): Map<TdOptionProps, boolean>;
    hoverOptions(): Array<TdOptionProps>;
}, {
    getRealOptions(options: SelectOption[]): Array<TdOptionProps>;
    checkVal(): void;
    multiLimitDisabled(value: string | number): boolean;
    visibleChange(val: boolean): void;
    onOptionClick(value: string | number, e: MouseEvent | KeyboardEvent): void;
    removeTag(index: number, context?: {
        e?: MouseEvent | KeyboardEvent;
    }): void;
    hideMenu(): void;
    clearSelect(e: MouseEvent): void;
    getOptions(option: OptionInstance): void;
    destroyOptions(option: OptionInstance): void;
    emitChange(val: SelectValue | Array<SelectValue>): void;
    createOption(value: string): void;
    debounceOnRemote: import("lodash").DebouncedFunc<(this: any) => void>;
    focus(value: string, context: {
        e: FocusEvent;
    }): void;
    blur(value: string, context: {
        e: FocusEvent | KeyboardEvent;
    }): void;
    enter(value: string, context: {
        e: KeyboardEvent;
    }): void;
    keydownEvent(e: KeyboardEvent): void;
    arrowDownOption(): void;
    arrowUpOption(): void;
    hoverEvent(v: boolean): void;
    getOverlayElm(): HTMLElement;
    monitorWidth(): void;
    getEmpty(): any;
    getLoadingText(): any;
    getPlaceholderText(): any;
    getCloseIcon(): JSX.Element;
    doFocus(): void;
    renderGroupOptions(options: SelectOptionGroup[]): JSX.Element;
    renderOptions(options: SelectOption[]): JSX.Element;
    renderDataWithOptions(): JSX.Element;
    initHoverindex(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("remove" | "input" | "blur" | "change" | "focus" | "keydown" | "keypress" | "keyup" | "clear" | "search" | "visible-change" | "create")[], "search" | "input" | "remove" | "clear" | "blur" | "change" | "focus" | "keydown" | "keypress" | "keyup" | "visible-change" | "create", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<import("../common").TNode<{
            value: SelectOption[];
            collapsedSelectedItems: SelectOption[];
            count: number;
        }>>;
    };
    creatable: BooleanConstructor;
    disabled: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
        default: string;
    };
    filter: {
        type: import("vue").PropType<(filterWords: string, option: SelectOption) => boolean | Promise<boolean>>;
    };
    filterable: BooleanConstructor;
    keys: {
        type: import("vue").PropType<import("./type").SelectKeysType>;
    };
    loading: BooleanConstructor;
    loadingText: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
        default: string;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    options: {
        type: import("vue").PropType<SelectOption[]>;
        default: () => SelectOption[];
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    popupProps: {
        type: import("vue").PropType<import("../popup/type").TdPopupProps>;
    };
    prefixIcon: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    reserveKeyword: BooleanConstructor;
    showCheckAlll: BooleanConstructor;
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    value: {
        type: import("vue").PropType<SelectValue<SelectOption>>;
    };
    defaultValue: {
        type: import("vue").PropType<SelectValue<SelectOption>>;
    };
    valueDisplay: {
        type: import("vue").PropType<import("../common").TNode<{
            value: SelectOption[];
            onClose: () => void;
        }>>;
    };
    valueType: {
        type: import("vue").PropType<"object" | "value">;
        default: "object" | "value";
        validator(val: "object" | "value"): boolean;
    };
    onBlur: import("vue").PropType<(context: {
        value: SelectValue<SelectOption>;
        e: FocusEvent | KeyboardEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: SelectValue<SelectOption>) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onCreate: import("vue").PropType<(value: string | number) => void>;
    onEnter: import("vue").PropType<(context: {
        inputValue: string;
        e: KeyboardEvent;
        value: SelectValue<SelectOption>;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        value: SelectValue<SelectOption>;
        e: FocusEvent | KeyboardEvent;
    }) => void>;
    onRemove: import("vue").PropType<(options: import("./type").SelectRemoveContext<SelectOption>) => void>;
    onSearch: import("vue").PropType<(filterWords: string) => void>;
    onVisibleChange: import("vue").PropType<(visible: boolean) => void>;
}>> & {
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    onInput?: (...args: any[]) => any;
    onKeydown?: (...args: any[]) => any;
    onKeypress?: (...args: any[]) => any;
    onKeyup?: (...args: any[]) => any;
    "onVisible-change"?: (...args: any[]) => any;
    onRemove?: (...args: any[]) => any;
    onClear?: (...args: any[]) => any;
    onCreate?: (...args: any[]) => any;
    onSearch?: (...args: any[]) => any;
}, {
    max: number;
    loading: boolean;
    disabled: boolean;
    multiple: boolean;
    options: SelectOption[];
    size: import("../common").SizeEnum;
    placeholder: string;
    clearable: boolean;
    empty: string | import("../common").TNode<any>;
    loadingText: string | import("../common").TNode<any>;
    valueType: "object" | "value";
    bordered: boolean;
    creatable: boolean;
    filterable: boolean;
    minCollapsedNum: number;
    reserveKeyword: boolean;
    showCheckAlll: boolean;
}>;
export default _default;
