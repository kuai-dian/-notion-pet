/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _typeof = require('@babel/runtime/helpers/typeof');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var isFunction = require('lodash/isFunction');
var debounce = require('lodash/debounce');
var get = require('lodash/get');
var set = require('lodash/set');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var loading_index = require('../loading/index.js');
var utils_renderTnode = require('../utils/render-tnode.js');
var utils_mixins = require('../utils/mixins.js');
var configProvider_configReceiver = require('../config-provider/config-receiver.js');
var config = require('../config.js');
var utils_classnames = require('../utils/classnames.js');
var input_index = require('../input/index.js');
var tag_index = require('../tag/index.js');
var commonComponents_fakeArrow = require('../common-components/fake-arrow.js');
var popup_index = require('../popup/index.js');
var select_option = require('./option.js');
var select_props = require('./props.js');
var utils_event = require('../utils/event.js');
require('../loading/loading.js');
require('@babel/runtime/helpers/slicedToArray');
require('../loading/icon/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../utils/dom.js');
require('../_chunks/dep-eb6b0f94.js');
require('lodash/isString');
require('../utils/easing.js');
require('../utils/transfer-dom.js');
require('../loading/props.js');
require('../utils/withInstall.js');
require('../loading/style');
require('../loading/plugin.js');
require('lodash/isEmpty');
require('lodash/isObject');
require('../config-provider/zh_CN_config.js');
require('../input/addon.js');
require('../input/input.js');
require('../utils/helper.js');
require('lodash/camelCase');
require('../input/props.js');
require('../input/input-group.js');
require('../utils/map-props.js');
require('lodash/kebabCase');
require('../input/style');
require('../tag/tag.js');
require('../tag/props.js');
require('../tag/check-tag.js');
require('../tag/check-tag-props.js');
require('../tag/style');
require('../popup/popup.js');
require('@popperjs/core');
require('../popup/props.js');
require('../utils/set-style.js');
require('../popup/style');
require('../utils/ripple.js');
require('./option-props.js');
require('../checkbox/index.js');
require('../checkbox/checkbox.js');
require('../checkbox/props.js');
require('../checkbox/group.js');
require('lodash/intersection');
require('../checkbox/checkbox-group-props.js');
require('../checkbox/style');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var isFunction__default = /*#__PURE__*/_interopDefaultLegacy(isFunction);
var debounce__default = /*#__PURE__*/_interopDefaultLegacy(debounce);
var get__default = /*#__PURE__*/_interopDefaultLegacy(get);
var set__default = /*#__PURE__*/_interopDefaultLegacy(set);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
}

var name = "".concat(config.prefix, "-select");
var DEFAULT_MAX_OVERLAY_WIDTH = 500;
var DEFAULT_SCROLLY_WIDTH = 8;
var _Select = vue.defineComponent(_objectSpread(_objectSpread({}, utils_mixins["default"](configProvider_configReceiver["default"]("select"))), {}, {
  name: "TSelect",
  components: {
    CloseCircleFilledIcon: tdesignIconsVueNext.CloseCircleFilledIcon,
    TInput: input_index.Input,
    Tag: tag_index.Tag,
    Popup: popup_index.Popup,
    TOption: select_option["default"]
  },
  provide: function provide() {
    return {
      tSelect: this
    };
  },
  props: _objectSpread({}, select_props["default"]),
  emits: ["change", "input", "clear", "keydown", "keyup", "keypress", "focus", "blur", "remove", "create", "search", "visible-change"],
  data: function data() {
    return {
      isHover: false,
      visible: false,
      searchInput: "",
      showCreateOption: false,
      hasOptions: false,
      defaultProps: {
        trigger: "click",
        placement: "bottom-left",
        overlayClassName: "",
        overlayStyle: {}
      },
      focusing: false,
      labelInValue: this.valueType === "object",
      realValue: this.keys && this.keys.value ? this.keys.value : "value",
      realLabel: this.keys && this.keys.label ? this.keys.label : "label",
      realOptions: [],
      hoverIndex: -1,
      popupOpenTime: 250,
      checkScroll: true
    };
  },
  computed: {
    classes: function classes() {
      var _ref;

      return ["".concat(name), (_ref = {}, _defineProperty__default["default"](_ref, utils_classnames["default"].STATUS.disabled, this.disabled), _defineProperty__default["default"](_ref, utils_classnames["default"].STATUS.active, this.visible), _defineProperty__default["default"](_ref, utils_classnames["default"].SIZE[this.size], this.size), _defineProperty__default["default"](_ref, "".concat(config.prefix, "-has-prefix"), this.$slots.prefixIcon), _defineProperty__default["default"](_ref, "".concat(config.prefix, "-no-border"), !this.bordered), _ref)];
    },
    popClass: function popClass() {
      var popupObject = this.popupObject;
      return "".concat(popupObject.overlayClassName, " ").concat(name, "__dropdown narrow-scrollbar");
    },
    tipsClass: function tipsClass() {
      return ["".concat(name, "__loading-tips"), _defineProperty__default["default"]({}, utils_classnames["default"].SIZE[this.size], this.size)];
    },
    emptyClass: function emptyClass() {
      return ["".concat(name, "__empty"), _defineProperty__default["default"]({}, utils_classnames["default"].SIZE[this.size], this.size)];
    },
    showPlaceholder: function showPlaceholder() {
      if (!this.showFilter && (!this.multiple && !this.selectedSingle || !this.multiple && _typeof__default["default"](this.value) === "object" && !this.selectedSingle || Array.isArray(this.value) && !this.value.length || this.value === null || this.value === void 0 || this.value === "")) {
        return true;
      }

      return false;
    },
    isGroupOption: function isGroupOption() {
      var _this$options;

      var firstOption = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options[0];
      return !!(firstOption && "group" in firstOption && "children" in firstOption);
    },
    filterPlaceholder: function filterPlaceholder() {
      if (this.multiple && Array.isArray(this.value) && this.value.length) {
        return "";
      }

      if (!this.multiple && this.selectedSingle) {
        return this.selectedSingle;
      }

      return this.placeholder;
    },
    showClose: function showClose() {
      return Boolean(this.clearable && this.isHover && !this.disabled && (!this.multiple && (this.value || this.value === 0) || this.multiple && Array.isArray(this.value) && this.value.length));
    },
    showArrow: function showArrow() {
      return !this.clearable || !this.isHover || this.disabled || !this.multiple && !this.value && this.value !== 0 || this.multiple && (!Array.isArray(this.value) || Array.isArray(this.value) && !this.value.length);
    },
    canFilter: function canFilter() {
      return this.filterable || isFunction__default["default"](this.filter);
    },
    showLoading: function showLoading() {
      return this.loading && !this.disabled;
    },
    showFilter: function showFilter() {
      if (this.disabled) return false;

      if (!this.multiple && this.selectedSingle && this.canFilter) {
        return this.visible;
      }

      return this.canFilter;
    },
    selectedSingle: function selectedSingle() {
      var _this = this;

      if (!this.multiple && (typeof this.value === "string" || typeof this.value === "number")) {
        var target = [];

        if (this.realOptions && this.realOptions.length) {
          target = this.realOptions.filter(function (item) {
            return get__default["default"](item, _this.realValue) === _this.value;
          });
        }

        if (target.length) {
          if (get__default["default"](target[target.length - 1], this.realLabel) === "") {
            return get__default["default"](target[target.length - 1], this.realValue);
          }

          return get__default["default"](target[target.length - 1], this.realLabel);
        }

        return this.value.toString();
      }

      var showText = get__default["default"](this.value, this.realLabel);

      if (!this.multiple && _typeof__default["default"](this.value) === "object" && showText !== void 0) {
        return showText === "" ? get__default["default"](this.value, this.realValue) : showText;
      }

      return "";
    },
    selectedMultiple: function selectedMultiple() {
      var _this2 = this;

      if (this.multiple && Array.isArray(this.value) && this.value.length) {
        return this.value.map(function (item) {
          if (_typeof__default["default"](item) === "object") {
            return item;
          }

          var tmp = _this2.realOptions.filter(function (op) {
            return get__default["default"](op, _this2.realValue) === item;
          });

          var valueLabel = {};
          set__default["default"](valueLabel, _this2.realValue, item);
          set__default["default"](valueLabel, _this2.realLabel, tmp.length ? get__default["default"](tmp[tmp.length - 1], _this2.realLabel) : item);
          return tmp.length && tmp[tmp.length - 1].disabled ? _objectSpread(_objectSpread({}, valueLabel), {}, {
            disabled: true
          }) : valueLabel;
        });
      }

      return [];
    },
    popupObject: function popupObject() {
      var propsObject = this.popupProps ? _objectSpread(_objectSpread({}, this.defaultProps), this.popupProps) : this.defaultProps;
      return propsObject;
    },
    filterOptions: function filterOptions() {
      var _this3 = this;

      if (isFunction__default["default"](this.filter)) {
        return this.realOptions.filter(function (option) {
          return _this3.filter(_this3.searchInput, option);
        });
      }

      if (this.filterable) {
        return this.realOptions.filter(function (option) {
          return option[_this3.realLabel].toString().toLowerCase().indexOf(_this3.searchInput.toString().toLowerCase()) !== -1;
        });
      }

      return [];
    },
    displayOptions: function displayOptions() {
      if (isFunction__default["default"](this.onSearch) || this.$attrs.search) {
        return this.realOptions;
      }

      if (this.canFilter && !this.creatable) {
        if (this.searchInput === "") {
          return this.realOptions;
        }

        return this.filterOptions;
      }

      return this.realOptions;
    },
    displayOptionsMap: function displayOptionsMap() {
      var map = /* @__PURE__ */new Map();
      this.displayOptions.forEach(function (item) {
        map.set(item, true);
      });
      return map;
    },
    hoverOptions: function hoverOptions() {
      if (!this.showCreateOption) {
        if (isFunction__default["default"](this.filter) || this.filterable) {
          return this.filterOptions;
        }

        return this.realOptions;
      }

      var willCreateOption = [{
        value: this.searchInput,
        label: this.searchInput
      }];

      if (isFunction__default["default"](this.filter) || this.filterable) {
        return willCreateOption.concat(this.filterOptions);
      }

      return willCreateOption.concat(this.realOptions);
    }
  },
  watch: {
    showFilter: function showFilter(val) {
      var _this4 = this;

      if (val && this.selectedSingle) {
        vue.nextTick(function () {
          _this4.doFocus();
        });
      }
    },
    searchInput: function searchInput(val) {
      var _this5 = this;

      if (!val && !this.visible) return;

      if (isFunction__default["default"](this.onSearch) || this.$attrs.search) {
        this.debounceOnRemote();
      }

      if (this.canFilter && val && this.creatable) {
        var tmp = this.realOptions.filter(function (item) {
          return get__default["default"](item, _this5.realLabel).toString() === val;
        });
        this.showCreateOption = !tmp.length;
      } else {
        this.showCreateOption = false;
      }
    },
    options: {
      immediate: true,
      deep: true,
      handler: function handler(options) {
        if (Array.isArray(options)) {
          this.realOptions = this.getRealOptions(options);
        } else {
          console.error("TDesign Select: options must be an array.");
        }
      }
    },
    visible: function visible() {
      this.visible && document.addEventListener("keydown", this.keydownEvent);
      !this.visible && document.removeEventListener("keydown", this.keydownEvent);
    }
  },
  mounted: function mounted() {
    this.checkVal();
  },
  methods: {
    getRealOptions: function getRealOptions(options) {
      if (this.isGroupOption) {
        var arr = [];
        options.forEach(function (item) {
          if ("children" in item) {
            arr = arr.concat(item.children);
          }
        });
        return arr;
      }

      return _toConsumableArray__default["default"](options);
    },
    checkVal: function checkVal() {
      var value = this.value,
          multiple = this.multiple;

      if (multiple && !Array.isArray(value) || !multiple && Array.isArray(value)) {
        utils_event.emitEvent(this, "change", this.multiple ? [] : "");
        console.warn("TDesign Warn:", "select props value invalid, v-model automatic calibration");
      }
    },
    multiLimitDisabled: function multiLimitDisabled(value) {
      if (this.multiple && this.max) {
        if (this.value instanceof Array && this.value.indexOf(value) === -1 && this.max <= this.value.length) {
          return true;
        }
      }

      return false;
    },
    visibleChange: function visibleChange(val) {
      utils_event.emitEvent(this, "visible-change", val);
      this.visible = val;

      if (!val) {
        this.searchInput = "";
      }

      val && this.monitorWidth();
      val && this.canFilter && this.doFocus();
    },
    onOptionClick: function onOptionClick(value, e) {
      var _this6 = this;

      if (this.value !== value) {
        if (this.multiple && this.value instanceof Array) {
          if (this.labelInValue) {
            var index = this.value.map(function (item) {
              return get__default["default"](item, _this6.realValue);
            }).indexOf(value);

            if (index > -1) {
              this.removeTag(index, {
                e: e
              });
            } else {
              this.value.push(this.realOptions.filter(function (item) {
                return get__default["default"](item, _this6.realValue) === value;
              })[0]);
              this.emitChange(this.value);
            }
          } else {
            var _index = this.value.indexOf(value);

            if (_index > -1) {
              this.removeTag(_index, {
                e: e
              });
            } else {
              this.value.push(value);
              this.emitChange(this.value);
            }
          }
        } else {
          this.emitChange(value);
        }
      }

      if (!this.multiple) {
        this.searchInput = "";
        this.hideMenu();
      } else {
        if (!this.reserveKeyword) {
          this.searchInput = "";
        }

        this.canFilter && this.doFocus();
      }
    },
    removeTag: function removeTag(index, context) {
      var _this7 = this;

      var _ref4 = context || {},
          e = _ref4.e;

      e && e.stopPropagation();

      if (this.disabled) {
        return;
      }

      var val = this.value[index];
      var removeOption = this.realOptions.filter(function (item) {
        return get__default["default"](item, _this7.realValue) === val;
      });
      var tempValue = this.value instanceof Array ? [].concat(this.value) : [];
      tempValue.splice(index, 1);
      this.emitChange(tempValue);
      utils_event.emitEvent(this, "remove", {
        value: val,
        data: removeOption[0],
        e: e
      });
    },
    hideMenu: function hideMenu() {
      this.visible = false;
    },
    clearSelect: function clearSelect(e) {
      e.stopPropagation();

      if (this.multiple) {
        this.emitChange([]);
      } else {
        this.emitChange("");
      }

      this.focusing = false;
      this.searchInput = "";
      this.visible = false;
      utils_event.emitEvent(this, "clear", {
        e: e
      });
    },
    getOptions: function getOptions(option) {
      var _this8 = this;

      if (option.$el && option.$el.className && option.$el.className.indexOf("".concat(name, "__create-option--special")) !== -1) return;
      var tmp = this.realOptions.filter(function (item) {
        return get__default["default"](item, _this8.realValue) === option.value;
      });

      if (!tmp.length) {
        this.hasOptions = true;
        var valueLabel = {};
        set__default["default"](valueLabel, this.realValue, option.value);
        set__default["default"](valueLabel, this.realLabel, option.label);
        var valueLabelAble = option.disabled ? _objectSpread(_objectSpread({}, valueLabel), {}, {
          disabled: true
        }) : valueLabel;
        this.realOptions.push(valueLabelAble);
      }
    },
    destroyOptions: function destroyOptions(option) {
      var _this9 = this;

      this.realOptions.forEach(function (item, index) {
        if (item[_this9.realValue] === option.value && item[_this9.realLabel] === option.label) {
          _this9.realOptions.splice(index, 1);
        }
      });
    },
    emitChange: function emitChange(val) {
      var _this10 = this;

      var value;

      if (this.labelInValue) {
        if (Array.isArray(val)) {
          if (!val.length) {
            value = [];
          } else {
            value = val;
          }
        } else {
          var target = this.realOptions.filter(function (item) {
            return get__default["default"](item, _this10.realValue) === val;
          });
          value = target.length ? target[0] : "";
        }
      } else {
        value = val;
      }

      utils_event.emitEvent(this, "change", value);
    },
    createOption: function createOption(value) {
      utils_event.emitEvent(this, "create", value);
    },
    debounceOnRemote: debounce__default["default"](function () {
      utils_event.emitEvent(this, "search", this.searchInput);
    }, 300),
    focus: function focus(value, context) {
      this.focusing = true;
      utils_event.emitEvent(this, "focus", {
        value: this.value,
        e: context === null || context === void 0 ? void 0 : context.e
      });
    },
    blur: function blur(value, context) {
      this.focusing = false;
      utils_event.emitEvent(this, "blur", {
        value: this.value,
        e: context === null || context === void 0 ? void 0 : context.e
      });
    },
    enter: function enter(value, context) {
      utils_event.emitEvent(this, "enter", {
        inputValue: this.searchInput,
        value: this.value,
        e: context === null || context === void 0 ? void 0 : context.e
      });
    },
    keydownEvent: function keydownEvent(e) {
      if (!this.hoverOptions.length) return;
      var preventKeys = ["ArrowDown", "ArrowUp", "Enter", "Escape", "Tab"];

      if (preventKeys.includes(e.code)) {
        e.preventDefault();
      }

      switch (e.code) {
        case "ArrowDown":
          if (this.hoverIndex === -1) {
            this.initHoverindex();
            return;
          }

          if (this.hoverIndex < this.hoverOptions.length - 1) {
            this.hoverIndex += 1;
            this.arrowDownOption();
          } else {
            this.hoverIndex = 0;
            this.arrowDownOption();
          }

          break;

        case "ArrowUp":
          if (this.hoverIndex === -1) {
            this.initHoverindex();
            return;
          }

          if (this.hoverIndex > 0) {
            this.hoverIndex -= 1;
            this.arrowUpOption();
          } else {
            this.hoverIndex = this.hoverOptions.length - 1;
            this.arrowUpOption();
          }

          break;

        case "Enter":
          if (this.hoverIndex === -1) return;

          if (this.showCreateOption && this.hoverIndex === 0) {
            this.createOption(this.searchInput);
          }

          this.hoverOptions[this.hoverIndex] && this.onOptionClick(this.hoverOptions[this.hoverIndex][this.realValue], e);
          break;

        case "Escape":
        case "Tab":
          this.visible = false;
          utils_event.emitEvent(this, "visible-change", false);
          this.searchInput = "";

          if (this.focusing) {
            this.blur(this.searchInput, {
              e: e
            });
          }

          break;
      }
    },
    arrowDownOption: function arrowDownOption() {
      var count = 0;

      while (this.hoverIndex < this.hoverOptions.length) {
        if (!this.hoverOptions[this.hoverIndex] || !this.hoverOptions[this.hoverIndex].disabled) {
          break;
        }

        if (this.hoverIndex === this.hoverOptions.length - 1) {
          this.hoverIndex = 0;
        } else {
          this.hoverIndex += 1;
        }

        count += 1;
        if (count >= this.hoverOptions.length) break;
      }
    },
    arrowUpOption: function arrowUpOption() {
      var count = 0;

      while (this.hoverIndex > -1) {
        if (!this.hoverOptions[this.hoverIndex] || !this.hoverOptions[this.hoverIndex].disabled) {
          break;
        }

        if (this.hoverIndex === 0) {
          this.hoverIndex = this.hoverOptions.length - 1;
        } else {
          this.hoverIndex -= 1;
        }

        count += 1;
        if (count >= this.hoverOptions.length) break;
      }
    },
    hoverEvent: function hoverEvent(v) {
      this.isHover = v;
    },
    getOverlayElm: function getOverlayElm() {
      var r;

      try {
        r = this.$refs.popup.$refs.overlay || this.$refs.popup.$refs.component.$refs.overlay;
      } catch (e) {
        console.warn("TDesign Warn:", e);
      }

      return r;
    },
    monitorWidth: function monitorWidth() {
      var _this11 = this;

      this.$nextTick(function () {
        var styles = _this11.popupProps && _this11.popupProps.overlayStyle || {};

        if (_this11.popupProps && isFunction__default["default"](_this11.popupProps.overlayStyle)) {
          styles = _this11.popupProps.overlayStyle(_this11.$refs.select) || {};
        }

        if (_typeof__default["default"](styles) === "object" && !styles.width) {
          var elWidth = _this11.$refs.select.getBoundingClientRect().width;

          var popupWidth = _this11.getOverlayElm().getBoundingClientRect().width;

          var width = elWidth > DEFAULT_MAX_OVERLAY_WIDTH ? elWidth : Math.min(DEFAULT_MAX_OVERLAY_WIDTH, Math.max(elWidth, popupWidth));
          _this11.defaultProps.overlayStyle = {
            width: "".concat(Math.ceil(width), "px")
          };

          if (_this11.checkScroll) {
            var timer = setTimeout(function () {
              var _this11$getOverlayElm = _this11.getOverlayElm(),
                  scrollHeight = _this11$getOverlayElm.scrollHeight,
                  clientHeight = _this11$getOverlayElm.clientHeight;

              if (scrollHeight > clientHeight) {
                _this11.defaultProps.overlayStyle = {
                  width: "".concat(Math.ceil(width) + DEFAULT_SCROLLY_WIDTH, "px")
                };
              }

              _this11.checkScroll = false;
              clearTimeout(timer);
            }, _this11.popupOpenTime);
          }
        }
      });
    },
    getEmpty: function getEmpty() {
      var useLocale = !this.empty && !this.$slots.empty;
      return useLocale ? this.t(this.global.empty) : utils_renderTnode.renderTNodeJSX(this, "empty");
    },
    getLoadingText: function getLoadingText() {
      var useLocale = !this.loadingText && !this.$slots.loadingText;
      return useLocale ? this.t(this.global.loadingText) : utils_renderTnode.renderTNodeJSX(this, "loadingText");
    },
    getPlaceholderText: function getPlaceholderText() {
      return this.placeholder || this.t(this.global.placeholder);
    },
    getCloseIcon: function getCloseIcon() {
      var _this12 = this;

      var closeIconClass = ["".concat(name, "__right-icon"), "".concat(name, "__right-icon-clear")];

      if (isFunction__default["default"](this.global.clearIcon)) {
        return vue.createVNode("span", {
          "class": closeIconClass,
          "onClick": this.clearSelect
        }, [this.global.clearIcon()]);
      }

      return vue.createVNode(vue.resolveComponent("close-circle-filled-icon"), {
        "class": closeIconClass,
        "size": this.size,
        "onClick": function onClick(_ref5) {
          var e = _ref5.e;
          return _this12.clearSelect(e);
        }
      }, null);
    },
    doFocus: function doFocus() {
      var input = this.$refs.input;
      input === null || input === void 0 ? void 0 : input.focus();
      this.focusing = true;
    },
    renderGroupOptions: function renderGroupOptions(options) {
      var _this13 = this;

      return vue.createVNode("ul", null, [options.map(function (groupList) {
        var _slot;

        var children = groupList.children.filter(function (item) {
          return _this13.displayOptionsMap.get(item);
        });
        return vue.createVNode(vue.resolveComponent("t-option-group"), {
          "label": groupList.group,
          "divider": groupList.divider
        }, _isSlot(_slot = _this13.renderOptions(children)) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        });
      })]);
    },
    renderOptions: function renderOptions(options) {
      var _this14 = this;

      return vue.createVNode("ul", null, [options.map(function (item, index) {
        return vue.createVNode(vue.resolveComponent("t-option"), {
          "value": get__default["default"](item, _this14.realValue),
          "label": get__default["default"](item, _this14.realLabel),
          "content": item.content,
          "disabled": item.disabled || _this14.multiLimitDisabled(get__default["default"](item, _this14.realValue)),
          "key": index
        }, null);
      })]);
    },
    renderDataWithOptions: function renderDataWithOptions() {
      return this.isGroupOption ? this.renderGroupOptions(this.options) : this.renderOptions(this.displayOptions);
    },
    initHoverindex: function initHoverindex() {
      var _this15 = this;

      if (!this.multiple && (typeof this.value === "string" || typeof this.value === "number")) {
        var targetIndex = Object.keys(this.hoverOptions).filter(function (i) {
          return get__default["default"](_this15.hoverOptions[i], _this15.realValue) === _this15.value;
        });
        this.hoverIndex = targetIndex.length ? parseInt(targetIndex[targetIndex.length - 1], 10) : -1;
      } else if (this.multiple && Array.isArray(this.value) && this.value.length) {
        this.value.some(function (item) {
          var targetIndex = Object.keys(_this15.hoverOptions).filter(function (i) {
            return _typeof__default["default"](item) === "object" && get__default["default"](_this15.hoverOptions[i], _this15.realValue) === get__default["default"](item, _this15.realValue) || get__default["default"](_this15.hoverOptions[i], _this15.realValue) === item;
          });
          _this15.hoverIndex = targetIndex.length ? parseInt(targetIndex[targetIndex.length - 1], 10) : -1;
          return _this15.hoverIndex !== -1;
        });
      }
    }
  },
  render: function render() {
    var _this16 = this;

    var classes = this.classes,
        popupObject = this.popupObject,
        disabled = this.disabled,
        popClass = this.popClass,
        size = this.size,
        showPlaceholder = this.showPlaceholder,
        selectedMultiple = this.selectedMultiple,
        multiple = this.multiple,
        showFilter = this.showFilter,
        selectedSingle = this.selectedSingle,
        filterPlaceholder = this.filterPlaceholder,
        tipsClass = this.tipsClass,
        loading = this.loading,
        loadingText = this.loadingText,
        emptyClass = this.emptyClass,
        hasOptions = this.hasOptions,
        realLabel = this.realLabel,
        showCreateOption = this.showCreateOption,
        displayOptions = this.displayOptions;
    var children = utils_renderTnode.renderTNodeJSX(this, "default");
    var prefixIconSlot = utils_renderTnode.renderTNodeJSX(this, "prefixIcon");
    var emptySlot = this.getEmpty();
    var loadingTextSlot = this.getLoadingText();
    var placeholderText = this.getPlaceholderText();
    var slots = {
      content: function content() {
        return vue.createVNode("div", {
          "className": "".concat(config.prefix, "-select__dropdown-inner")
        }, [utils_renderTnode.renderTNodeJSX(_this16, "panelTopContent"), vue.withDirectives(vue.createVNode("ul", {
          "class": "".concat(name, "__create-option")
        }, [vue.createVNode(vue.resolveComponent("t-option"), {
          "value": _this16.searchInput,
          "label": _this16.searchInput,
          "class": "".concat(name, "__create-option--special")
        }, null)]), [[vue.vShow, showCreateOption]]), loading && vue.createVNode("div", {
          "class": tipsClass
        }, [loadingTextSlot || loadingText]), !loading && !displayOptions.length && !showCreateOption && vue.createVNode("li", {
          "class": emptyClass
        }, [emptySlot]), !hasOptions && displayOptions.length && !loading ? _this16.renderDataWithOptions() : vue.createVNode("ul", {
          "class": "".concat(config.prefix, "-select__groups")
        }, [children]), utils_renderTnode.renderTNodeJSX(_this16, "panelBottomContent")]);
      }
    };
    return vue.createVNode("div", {
      "ref": "select",
      "class": "".concat(name, "__wrap")
    }, [vue.createVNode(popup_index.Popup, {
      "ref": "popup",
      "class": "".concat(name, "__popup-reference"),
      "visible": this.visible,
      "placement": popupObject.placement,
      "trigger": popupObject.trigger,
      "disabled": disabled,
      "overlayClassName": popClass,
      "overlayStyle": popupObject.overlayStyle,
      "onVisibleChange": this.visibleChange,
      "expandAnimation": true
    }, _objectSpread({
      "default": function _default() {
        return [vue.createVNode("div", {
          "class": classes,
          "onMouseenter": _this16.hoverEvent.bind(null, true),
          "onMouseleave": _this16.hoverEvent.bind(null, false)
        }, [prefixIconSlot && vue.createVNode("span", {
          "class": "t-select__left-icon"
        }, [prefixIconSlot[0]]), showPlaceholder && vue.createVNode("span", {
          "class": "".concat(name, "__placeholder")
        }, [" ", placeholderText]), _this16.valueDisplay || _this16.$slots.valueDisplay ? utils_renderTnode.renderTNodeJSX(_this16, "valueDisplay", {
          params: {
            value: selectedMultiple,
            onClose: function onClose(index) {
              return _this16.removeTag(index);
            }
          }
        }) : selectedMultiple.map(function (item, index) {
          var _slot2;

          return vue.withDirectives(vue.createVNode(vue.resolveComponent("tag"), {
            "key": index,
            "size": size,
            "closable": !item.disabled && !disabled,
            "disabled": disabled,
            "style": "max-width: 100%;",
            "maxWidth": "100%",
            "title": get__default["default"](item, realLabel),
            "onClose": _this16.removeTag.bind(null, index)
          }, _isSlot(_slot2 = get__default["default"](item, realLabel)) ? _slot2 : {
            "default": function _default() {
              return [_slot2];
            }
          }), [[vue.vShow, _this16.minCollapsedNum <= 0 || index < _this16.minCollapsedNum]]);
        }), _this16.collapsedItems || _this16.$slots.collapsedItems ? utils_renderTnode.renderTNodeJSX(_this16, "collapsedItems", {
          params: {
            value: selectedMultiple,
            collapsedSelectedItems: selectedMultiple.slice(_this16.minCollapsedNum),
            count: selectedMultiple.length - _this16.minCollapsedNum
          }
        }) : vue.withDirectives(vue.createVNode(vue.resolveComponent("tag"), {
          "size": size
        }, {
          "default": function _default() {
            return ["+".concat(selectedMultiple.length - _this16.minCollapsedNum)];
          }
        }), [[vue.vShow, _this16.minCollapsedNum > 0 && selectedMultiple.length > _this16.minCollapsedNum]]), !multiple && !showPlaceholder && !showFilter && vue.createVNode("span", {
          "title": selectedSingle,
          "class": "".concat(name, "__single")
        }, [selectedSingle]), showFilter && vue.createVNode(vue.resolveComponent("t-input"), {
          "ref": "input",
          "modelValue": _this16.searchInput,
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return _this16.searchInput = $event;
          },
          "size": size,
          "placeholder": filterPlaceholder,
          "disabled": disabled,
          "class": "".concat(name, "__input"),
          "readonly": !_this16.visible || !_this16.showFilter,
          "onFocus": _this16.focus,
          "onBlur": _this16.blur,
          "onEnter": _this16.enter
        }, null), _this16.showArrow && !_this16.showLoading && vue.createVNode(commonComponents_fakeArrow["default"], {
          "overlayClassName": "".concat(name, "__right-icon"),
          "isActive": _this16.visible && !_this16.disabled
        }, null), _this16.showClose && !_this16.showLoading && _this16.getCloseIcon(), _this16.showLoading && vue.createVNode(loading_index.Loading, {
          "class": "".concat(name, "__right-icon ").concat(name, "__active-icon"),
          "size": "small"
        }, null)])];
      }
    }, slots))]);
  }
}));

exports["default"] = _Select;
//# sourceMappingURL=select.js.map
