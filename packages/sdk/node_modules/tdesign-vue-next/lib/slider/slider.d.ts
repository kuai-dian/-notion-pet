import { VNode } from 'vue';
import { ClassName, TNode } from '../common';
import { SliderValue } from './type';
interface MarkItem {
    point: number;
    position: number;
    mark: string | number | TNode<{
        value: number;
    }>;
}
declare const _default: import("vue").DefineComponent<{
    disabled: BooleanConstructor;
    inputNumberProps: {
        type: import("vue").PropType<import("../input-number/type").TdInputNumberProps>;
        default: boolean;
    };
    label: {
        type: import("vue").PropType<string | boolean | TNode<any>>;
        default: boolean;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    marks: {
        type: import("vue").PropType<number[] | import("./type").SliderMarks>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    range: BooleanConstructor;
    step: {
        type: NumberConstructor;
        default: number;
    };
    tooltipProps: {
        type: import("vue").PropType<import("..").TdTooltipProps>;
    };
    value: {
        type: import("vue").PropType<SliderValue>;
    };
    defaultValue: {
        type: import("vue").PropType<SliderValue>;
    };
    onChange: import("vue").PropType<(value: SliderValue) => void>;
}, unknown, {
    firstValue: number;
    secondValue: number;
    prevValue: SliderValue;
    dragging: boolean;
    sliderSize: number;
    inputDecimalPlaces: number;
    inputFormat: any;
    inputPlaceholder: string;
    inputTheme: string;
    showSteps: boolean;
}, {
    containerClass(): ClassName;
    sliderClass(): ClassName;
    sliderRailClass(): ClassName;
    sliderNumberClass(): ClassName;
    vertical(): boolean;
    rangeDiff(): number;
    steps(): number[];
    markList(): Array<MarkItem>;
    minValue(): number;
    maxValue(): number;
    barSize(): string;
    barStart(): string;
    precision(): number;
    runwayStyle(): object;
    barStyle(): object;
}, {
    init(): void;
    valueChanged(): boolean;
    setValues(value: SliderValue): SliderValue;
    setInputProps(): void;
    setPosition(percent: number): void;
    onSliderClick(event: MouseEvent): void;
    resetSize(): void;
    emitChange(value: SliderValue): void;
    getStopStyle(position: number): {
        top: string;
        left?: undefined;
    } | {
        left: string;
        top?: undefined;
    };
    changeValue(point: number): void;
    renderMask(): VNode;
    renderInputButton(): VNode;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    disabled: BooleanConstructor;
    inputNumberProps: {
        type: import("vue").PropType<import("../input-number/type").TdInputNumberProps>;
        default: boolean;
    };
    label: {
        type: import("vue").PropType<string | boolean | TNode<any>>;
        default: boolean;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    marks: {
        type: import("vue").PropType<number[] | import("./type").SliderMarks>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    range: BooleanConstructor;
    step: {
        type: NumberConstructor;
        default: number;
    };
    tooltipProps: {
        type: import("vue").PropType<import("..").TdTooltipProps>;
    };
    value: {
        type: import("vue").PropType<SliderValue>;
    };
    defaultValue: {
        type: import("vue").PropType<SliderValue>;
    };
    onChange: import("vue").PropType<(value: SliderValue) => void>;
}>>, {
    max: number;
    label: string | boolean | TNode<any>;
    disabled: boolean;
    range: boolean;
    layout: "horizontal" | "vertical";
    step: number;
    min: number;
    inputNumberProps: boolean;
}>;
export default _default;
