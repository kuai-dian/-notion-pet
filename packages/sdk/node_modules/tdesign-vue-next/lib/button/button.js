/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var config = require('../config.js');
var utils_classnames = require('../utils/classnames.js');
var loading_index = require('../loading/index.js');
var button_props = require('./props.js');
var utils_renderTnode = require('../utils/render-tnode.js');
var utils_ripple = require('../utils/ripple.js');
require('../loading/loading.js');
require('@babel/runtime/helpers/slicedToArray');
require('../loading/icon/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../utils/dom.js');
require('../_chunks/dep-eb6b0f94.js');
require('lodash/isString');
require('../utils/easing.js');
require('../utils/transfer-dom.js');
require('../loading/props.js');
require('../utils/withInstall.js');
require('../loading/style');
require('../loading/plugin.js');
require('lodash/isEmpty');
require('lodash/isFunction');
require('lodash/isObject');
require('../utils/set-style.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

var name = "".concat(config.prefix, "-button");
var TButton = vue.defineComponent({
  name: "TButton",
  directives: {
    ripple: utils_ripple["default"]
  },
  inheritAttrs: false,
  props: button_props["default"],
  setup: function setup(props2) {
    var isDisabledRef = vue.computed(function () {
      return props2.disabled || props2.loading;
    });
    var mergeThemeRef = vue.computed(function () {
      var theme = props2.theme,
          variant = props2.variant;
      if (theme) return theme;
      if (variant === "base") return "primary";
      return "default";
    });
    var buttonClassRef = vue.computed(function () {
      var _ref;

      return ["".concat(name), utils_classnames["default"].SIZE[props2.size], "".concat(name, "--variant-").concat(props2.variant), "".concat(name, "--theme-").concat(mergeThemeRef.value), (_ref = {}, _defineProperty__default["default"](_ref, utils_classnames["default"].STATUS.disabled, isDisabledRef.value), _defineProperty__default["default"](_ref, utils_classnames["default"].STATUS.loading, props2.loading), _defineProperty__default["default"](_ref, "".concat(name, "--shape-").concat(props2.shape), props2.shape !== "rectangle"), _defineProperty__default["default"](_ref, "".concat(name, "--ghost"), props2.ghost), _defineProperty__default["default"](_ref, utils_classnames["default"].SIZE.block, props2.block), _ref)];
    });
    return {
      isDisabled: isDisabledRef,
      mergeTheme: mergeThemeRef,
      buttonClass: buttonClassRef
    };
  },
  render: function render() {
    var buttonContent = utils_renderTnode.renderContent(this, "default", "content");
    var icon = this.loading ? vue.createVNode(loading_index.Loading, {
      "inheritColor": true
    }, null) : utils_renderTnode.renderTNodeJSX(this, "icon");
    var iconOnly = icon && !buttonContent;
    buttonContent = buttonContent ? vue.createVNode("span", {
      "class": "".concat(name, "__text")
    }, [buttonContent]) : "";

    if (icon) {
      buttonContent = [icon, buttonContent];
    }

    return vue.withDirectives(vue.createVNode("button", vue.mergeProps({
      "class": [].concat(_toConsumableArray__default["default"](this.buttonClass), [_defineProperty__default["default"]({}, "".concat(name, "--icon-only"), iconOnly)]),
      "type": this.type,
      "disabled": this.disabled
    }, this.$attrs, {
      "onClick": this.onClick
    }), [buttonContent]), [[vue.resolveDirective("ripple")]]);
  }
});

exports["default"] = TButton;
//# sourceMappingURL=button.js.map
