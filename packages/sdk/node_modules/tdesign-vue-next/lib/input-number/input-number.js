/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var _regeneratorRuntime = require('@babel/runtime/regenerator');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var config = require('../config.js');
var button_index = require('../button/index.js');
var utils_classnames = require('../utils/classnames.js');
var inputNumber_props = require('./props.js');
var utils_event = require('../utils/event.js');
require('../button/button.js');
require('@babel/runtime/helpers/toConsumableArray');
require('../loading/index.js');
require('../loading/loading.js');
require('@babel/runtime/helpers/slicedToArray');
require('../loading/icon/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../utils/dom.js');
require('../_chunks/dep-eb6b0f94.js');
require('lodash/isString');
require('../utils/easing.js');
require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isFunction');
require('lodash/isObject');
require('../utils/transfer-dom.js');
require('../loading/props.js');
require('../utils/withInstall.js');
require('../loading/style');
require('../loading/plugin.js');
require('../button/props.js');
require('../utils/ripple.js');
require('../utils/set-style.js');
require('../button/style');
require('../utils/helper.js');
require('lodash/camelCase');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(config.prefix, "-input-number");
var _InputNumber = vue.defineComponent({
  name: "TInputNumber",
  components: {
    AddIcon: tdesignIconsVueNext.AddIcon,
    RemoveIcon: tdesignIconsVueNext.RemoveIcon,
    ChevronDownIcon: tdesignIconsVueNext.ChevronDownIcon,
    ChevronUpIcon: tdesignIconsVueNext.ChevronUpIcon,
    TButton: button_index.Button
  },
  props: _objectSpread({}, inputNumber_props["default"]),
  emits: ["update:value", "change", "blur", "focus", "keydown-enter", "keydown", "keyup", "keypress"],
  data: function data() {
    return {
      userInput: null,
      filterValue: null,
      isError: false,
      inputing: false
    };
  },
  computed: {
    disabledReduce: function disabledReduce() {
      return this.disabled || this.isError || Number(this.value) - this.step < this.min;
    },
    disabledAdd: function disabledAdd() {
      return this.disabled || this.isError || Number(this.value) + this.step > this.max;
    },
    valueDecimalPlaces: function valueDecimalPlaces() {
      var tempVal = this.filterValue !== null && !Number.isNaN(Number(this.filterValue)) && !Number.isNaN(parseFloat(this.filterValue)) ? this.filterValue : String(this.value);
      var tempIndex = tempVal.indexOf(".") + 1;
      return tempIndex > 0 ? tempVal.length - tempIndex : 0;
    },
    stepDecimalPlaces: function stepDecimalPlaces() {
      var tempVal = String(this.step);
      var tempIndex = tempVal.indexOf(".") + 1;
      return tempIndex > 0 ? tempVal.length - tempIndex : 0;
    },
    digitsNum: function digitsNum() {
      if (this.decimalPlaces !== void 0) {
        if (this.decimalPlaces < this.stepDecimalPlaces) {
          console.warn("decimal places of step should be less than decimal-places");
        }

        return this.decimalPlaces;
      }

      return this.valueDecimalPlaces > this.stepDecimalPlaces ? this.valueDecimalPlaces : this.stepDecimalPlaces;
    },
    reduceClasses: function reduceClasses() {
      return ["".concat(name, "__decrease"), _defineProperty__default["default"]({}, utils_classnames["default"].STATUS.disabled, this.disabledReduce)];
    },
    reduceEvents: function reduceEvents() {
      return {
        onClick: this.handleReduce
      };
    },
    addClasses: function addClasses() {
      return ["".concat(name, "__increase"), _defineProperty__default["default"]({}, utils_classnames["default"].STATUS.disabled, this.disabledAdd)];
    },
    addEvents: function addEvents() {
      return {
        onClick: this.handleAdd
      };
    },
    cmptWrapClasses: function cmptWrapClasses() {
      var _ref3;

      return ["t-input-number", utils_classnames["default"].SIZE[this.size], (_ref3 = {}, _defineProperty__default["default"](_ref3, utils_classnames["default"].STATUS.disabled, this.disabled), _defineProperty__default["default"](_ref3, "t-is-controls-right", this.theme === "column"), _defineProperty__default["default"](_ref3, "t-input-number--normal", this.theme === "normal"), _ref3)];
    },
    inputWrapProps: function inputWrapProps() {
      return ["t-input", _defineProperty__default["default"]({
        "t-is-error": this.isError
      }, "".concat(config.prefix, "-align-").concat(this.align), this.align)];
    },
    inputClasses: function inputClasses() {
      var _ref5;

      return ["t-input__inner", (_ref5 = {}, _defineProperty__default["default"](_ref5, utils_classnames["default"].STATUS.disabled, this.disabled), _defineProperty__default["default"](_ref5, "".concat(name, "-text-align"), this.theme === "row"), _ref5)];
    },
    inputEvents: function inputEvents() {
      return {
        onInput: this.handleInput,
        onBlur: this.handleBlur,
        onFocus: this.handleFocus,
        onKeydown: this.handleKeydown,
        onKeyup: this.handleKeyup,
        onKeypress: this.handleKeypress
      };
    },
    inputAttrs: function inputAttrs() {
      return {
        disabled: this.disabled,
        autocomplete: "off",
        ref: "refInputElem",
        placeholder: this.placeholder
      };
    },
    decreaseIcon: function decreaseIcon() {
      return this.theme === "column" ? vue.createVNode(vue.resolveComponent("chevron-down-icon"), {
        "size": this.size
      }, null) : vue.createVNode(vue.resolveComponent("remove-icon"), {
        "size": this.size
      }, null);
    },
    increaseIcon: function increaseIcon() {
      return this.theme === "column" ? vue.createVNode(vue.resolveComponent("chevron-up-icon"), {
        "size": this.size
      }, null) : vue.createVNode(vue.resolveComponent("add-icon"), {
        "size": this.size
      }, null);
    },
    displayValue: function displayValue() {
      if (this.inputing && this.userInput !== null) {
        return this.filterValue;
      }

      if ([void 0, null].includes(this.value)) return "";
      return this.format && !this.inputing ? this.format(this.value) : this.value.toFixed(this.digitsNum);
    }
  },
  watch: {
    value: {
      immediate: true,
      handler: function handler(v) {
        if (v !== void 0) {
          this.isValidNumber(v);
        }
      }
    }
  },
  methods: {
    handleAdd: function handleAdd(e) {
      if (this.disabledAdd) return;
      var value = this.value || 0;
      var factor = Math.pow(10, this.digitsNum);
      this.handleAction(Number(this.toDecimalPlaces((value * factor + this.step * factor) / factor).toFixed(this.digitsNum)), "add", e);
    },
    handleReduce: function handleReduce(e) {
      if (this.disabledReduce) return;
      var value = this.value || 0;
      var factor = Math.pow(10, this.digitsNum);
      this.handleAction(Number(this.toDecimalPlaces((value * factor - this.step * factor) / factor).toFixed(this.digitsNum)), "reduce", e);
    },
    handleInput: function handleInput(e) {
      this.userInput = e.target.value;
      this.filterValue = this.toValidStringNumber(this.userInput);
      this.userInput = "";
      if (!this.isValid(this.filterValue) || Number(this.filterValue) === this.value) return;
      this.updateValue(Number(this.filterValue));
      this.handleAction(Number(this.filterValue), "input", e);
    },
    handleAction: function handleAction(value, actionType, e) {
      if (actionType !== "input") {
        this.clearInput();
      }

      this.handleChange(value, {
        type: actionType,
        e: e
      });
    },
    toValidStringNumber: function toValidStringNumber(s) {
      var filterVal = s.replace(/[^\d.eEã€‚-]/g, "").replace("\u3002", ".");

      if (this.multiE(filterVal) || this.multiDot(filterVal) || this.multiNegative(filterVal)) {
        filterVal = filterVal.substr(0, filterVal.length - 1);
      }

      return filterVal;
    },
    toValidNumber: function toValidNumber(s) {
      var val = Number(s);
      if (Number.isNaN(val) || Number.isNaN(parseFloat(s))) return this.value;
      if (val > this.max) return this.max;
      if (val < this.min) return this.min;
      return parseFloat(s);
    },
    handleChange: function handleChange(value, ctx) {
      this.updateValue(value);
      utils_event.emitEvent(this, "change", value, {
        type: ctx.type,
        e: ctx.e
      });
    },
    handleBlur: function handleBlur(e) {
      var _this = this;

      return _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee() {
        return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _this.handleEndInput(e);

              case 2:
                _this.clearFilterValue();

                utils_event.emitEvent(_this, "blur", _this.value, {
                  e: e
                });

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    handleFocus: function handleFocus(e) {
      this.handleStartInput();
      utils_event.emitEvent(this, "focus", this.value, {
        e: e
      });
    },
    handleKeydownEnter: function handleKeydownEnter(e) {
      if (e.key !== "Enter") return;
      utils_event.emitEvent(this, "keydown-enter", this.value, {
        e: e
      });
    },
    handleKeydown: function handleKeydown(e) {
      utils_event.emitEvent(this, "keydown", this.value, {
        e: e
      });
      this.handleKeydownEnter(e);
    },
    handleKeyup: function handleKeyup(e) {
      utils_event.emitEvent(this, "keyup", this.value, {
        e: e
      });
    },
    handleKeypress: function handleKeypress(e) {
      utils_event.emitEvent(this, "keypress", this.value, {
        e: e
      });
    },
    handleStartInput: function handleStartInput() {
      this.inputing = true;
      if (this.value === void 0) return;
      this.filterValue = this.value.toFixed(this.digitsNum);
    },
    handleEndInput: function handleEndInput(e) {
      this.inputing = false;
      var value = this.toValidNumber(this.filterValue);

      if (value !== this.value) {
        this.updateValue(value);
        this.handleAction(value, "input", e);
      }

      this.isError = false;
    },
    updateValue: function updateValue(v) {
      this.$emit("update:value", v);
    },
    handleInputError: function handleInputError(visible) {
      this.isError = visible;
    },
    isValid: function isValid(v) {
      var numV = Number(v);

      if (this.empty(v) || Number.isNaN(numV)) {
        this.handleInputError(true);
        return false;
      }

      return this.isValidNumber(numV);
    },
    isValidNumber: function isValidNumber(v) {
      if (v > this.max) {
        this.handleInputError(true);
        return false;
      }

      if (v < this.min) {
        this.handleInputError(true);
        return false;
      }

      this.handleInputError(false);
      return true;
    },
    empty: function empty(v) {
      return !v && !v.replace(" ", "");
    },
    clearInput: function clearInput() {
      this.userInput = null;
    },
    clearFilterValue: function clearFilterValue() {
      this.filterValue = "";
    },
    multiE: function multiE(s) {
      var m = s.match(/[e]/gi);
      return m === null ? false : m.length > 1;
    },
    multiDot: function multiDot(s) {
      var m = s.match(/[.]/g);
      return m === null ? false : m.length > 1;
    },
    multiNegative: function multiNegative(s) {
      var m = s.match(/[-]/g);
      return m === null ? false : m.length > 2;
    },
    toDecimalPlaces: function toDecimalPlaces(value) {
      var decimalPlaces = this.decimalPlaces === void 0 ? this.digitsNum : this.decimalPlaces;
      var factor = Math.pow(10, decimalPlaces);
      return Math.round(value * factor) / factor;
    }
  },
  render: function render() {
    var _this2 = this;

    return vue.createVNode("div", {
      "class": this.cmptWrapClasses
    }, [this.theme !== "normal" && vue.createVNode(vue.resolveComponent("t-button"), vue.mergeProps({
      "class": this.reduceClasses
    }, this.reduceEvents, {
      "variant": "outline",
      "shape": "square"
    }), {
      icon: function icon() {
        return _this2.decreaseIcon;
      }
    }), vue.createVNode("div", {
      "class": this.inputWrapProps
    }, [vue.createVNode("input", vue.mergeProps({
      "value": this.displayValue,
      "class": this.inputClasses
    }, this.inputAttrs, this.inputEvents), null)]), this.theme !== "normal" && vue.createVNode(vue.resolveComponent("t-button"), vue.mergeProps({
      "class": this.addClasses
    }, this.addEvents, {
      "variant": "outline",
      "shape": "square"
    }), {
      icon: function icon() {
        return _this2.increaseIcon;
      }
    })]);
  }
});

exports["default"] = _InputNumber;
//# sourceMappingURL=input-number.js.map
