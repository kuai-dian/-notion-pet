/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var dayjs = require('dayjs');
var isFunction = require('lodash/isFunction');
var timePicker_panel_panelCol = require('../_chunks/dep-8baf00f6.js');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var utils_mixins = require('../utils/mixins.js');
var configProvider_configReceiver = require('../config-provider/config-receiver.js');
var popup_index = require('../popup/index.js');
var config = require('../config.js');
var utils_classnames = require('../utils/classnames.js');
var timePicker_panel_index = require('./panel/index.js');
var input_index = require('../input/index.js');
var utils_event = require('../utils/event.js');
var timePicker_inputItems = require('./input-items.js');
var timePicker_props = require('./props.js');
var timePicker_constant = require('./constant.js');
require('lodash/debounce');
require('../_chunks/dep-eb6b0f94.js');
require('./panel/props.js');
require('../config-provider/zh_CN_config.js');
require('../popup/popup.js');
require('@babel/runtime/helpers/typeof');
require('@popperjs/core');
require('../utils/dom.js');
require('lodash/isString');
require('../utils/easing.js');
require('../popup/props.js');
require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isObject');
require('../utils/set-style.js');
require('../utils/map-props.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('lodash/kebabCase');
require('../utils/withInstall.js');
require('../popup/style');
require('../utils/helper.js');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/camelCase');
require('../button/button.js');
require('@babel/runtime/helpers/toConsumableArray');
require('../loading/index.js');
require('../loading/loading.js');
require('../loading/icon/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('../utils/transfer-dom.js');
require('../loading/props.js');
require('../loading/style');
require('../loading/plugin.js');
require('../button/props.js');
require('../utils/ripple.js');
require('../input/addon.js');
require('../input/input.js');
require('../input/props.js');
require('../input/input-group.js');
require('../input/style');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);
var isFunction__default = /*#__PURE__*/_interopDefaultLegacy(isFunction);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(config.prefix, "-time-picker");
dayjs__default["default"].extend(timePicker_panel_panelCol.customParseFormat);
var _TimePicker = vue.defineComponent(_objectSpread(_objectSpread({}, utils_mixins["default"](configProvider_configReceiver["default"]("timePicker"))), {}, {
  name: "TTimePicker",
  components: {
    PickerPanel: timePicker_panel_index["default"],
    TimeIcon: tdesignIconsVueNext.TimeIcon,
    TPopup: popup_index.Popup,
    TInput: input_index.Input,
    InputItems: timePicker_inputItems["default"]
  },
  props: _objectSpread({}, timePicker_props["default"]),
  emits: ["change", "input", "close", "open", "focus", "blur"],
  data: function data() {
    var _this$$props = this.$props,
        defaultValue = _this$$props.defaultValue,
        value = _this$$props.value;
    var time = value || defaultValue;
    return {
      els: [],
      focus: false,
      isShowPanel: false,
      time: time ? dayjs__default["default"](time, this.format) : void 0,
      inputTime: time ? this.setInputValue(dayjs__default["default"](time, this.format)) : void 0,
      needClear: false
    };
  },
  computed: {
    panelValue: function panelValue() {
      var time = this.$data.time;

      if (time) {
        return [dayjs__default["default"](time, this.format)];
      }

      if (this.steps.filter(function (step) {
        return step !== 1;
      }).length < 1) {
        return [dayjs__default["default"]()];
      }

      return [dayjs__default["default"]().hour(0).minute(0).second(0)];
    },
    textClassName: function textClassName() {
      var isDefault = this.inputTime.some(function (item) {
        return !!item.hour && !!item.minute && !!item.second;
      });
      return isDefault ? "" : "".concat(name, "__group-text");
    }
  },
  watch: {
    time: {
      handler: function handler() {
        this.output();
      }
    },
    value: {
      handler: function handler() {
        this.time = this.value ? dayjs__default["default"](this.value, this.format) : void 0;
        this.inputTime = this.value ? this.setInputValue(dayjs__default["default"](this.value, this.format)) : void 0;
      }
    }
  },
  methods: {
    inputChange: function inputChange(event) {
      var type = event.type,
          value = event.value;
      var time = this.$data.time;
      var newTime = time;

      if (value === timePicker_constant.EMPTY_VALUE) {
        this.inputTime[type] = void 0;
        newTime[type](0);
        return;
      }

      if (!newTime) {
        newTime = dayjs__default["default"]();
        newTime.hour(0);
        newTime.minute(0);
        newTime.second(0);
      }

      newTime = newTime.set(type, value);
      this.time = dayjs__default["default"](newTime);
      this.inputTime = this.setInputValue(this.time);
      utils_event.emitEvent(this, "input", {
        input: value,
        value: this.time.format(this.format),
        e: event
      });
      var panelRef = this.$refs.panel;
      panelRef.panelColUpdate();
    },
    onBlurDefault: function onBlurDefault(e, trigger, index, input) {
      utils_event.emitEvent(this, "blur", {
        trigger: trigger,
        input: input,
        value: this.time.format(this.format),
        e: e
      });
    },
    onFocusDefault: function onFocusDefault(e, trigger, index, input) {
      utils_event.emitEvent(this, "focus", {
        trigger: trigger,
        input: input,
        value: this.time.format(this.format),
        e: e
      });
    },
    panelVisibleChange: function panelVisibleChange(val, context) {
      if (context) {
        var isClickDoc = context.trigger === "document";
        this.isShowPanel = !isClickDoc;
        utils_event.emitEvent(this, isClickDoc ? "close" : "open");
      } else {
        this.isShowPanel = val;
        utils_event.emitEvent(this, val ? "open" : "close");
      }
    },
    toggleInputMeridiem: function toggleInputMeridiem() {
      var time = this.$data.time;
      var current = time.format("A");
      var currentHour = time.hour() + (current === timePicker_constant.AM ? 12 : -12);
      this.inputChange({
        type: "hour",
        value: currentHour
      });
    },
    pickTime: function pickTime(col, change, index, value) {
      var time = this.time,
          format = this.format;
      var setTime = time;

      if (timePicker_constant.EPickerCols.hour === col) {
        setTime = value.set(col, value.hour() >= 12 && (timePicker_constant.amFormat.test(format) || timePicker_constant.pmFormat.test(format)) ? Number(change) + 12 : change);
      } else if ([timePicker_constant.EPickerCols.minute, timePicker_constant.EPickerCols.second].includes(col)) {
        setTime = value.set(col, change);
      } else {
        var currentHour = value.hour();

        if (change === this.global.anteMeridiem && currentHour > 12) {
          currentHour -= 12;
        } else if (change === this.global.postMeridiem && currentHour < 12) {
          currentHour += 12;
        }

        setTime = value.hour(currentHour);
      }

      this.time = setTime;
      this.inputTime = this.setInputValue(setTime);
      var formatValue = dayjs__default["default"](setTime).format(this.format);
      utils_event.emitEvent(this, "change", formatValue);
    },
    makeSure: function makeSure() {
      this.panelVisibleChange(false);
      this.output();
    },
    nowAction: function nowAction() {
      var currentTime = dayjs__default["default"]();

      if (isFunction__default["default"](this.disableTime) && this.disableTime(currentTime.get("hour"), currentTime.get("minute"), currentTime.get("second"))) {
        return;
      }

      this.time = currentTime;
      this.inputTime = this.setInputValue(this.time);
      utils_event.emitEvent(this, "change", currentTime.format(this.format));
    },
    output: function output() {
      if (this.needClear) {
        this.inputTime = this.setInputValue(void 0);
        this.needClear = false;
      } else {
        var _this$time;

        this.time = (_this$time = this.time) !== null && _this$time !== void 0 ? _this$time : dayjs__default["default"]();
        this.inputTime = this.setInputValue(this.time);
      }
    },
    setInputValue: function setInputValue(val) {
      var ans = {
        hour: void 0,
        minute: void 0,
        second: void 0,
        meridiem: timePicker_constant.AM
      };
      if (!val) return ans;
      return this.dayjs2InputTime(val);
    },
    dayjs2InputTime: function dayjs2InputTime(val) {
      var format = this.$props.format;

      if (!val) {
        return {
          hour: void 0,
          minute: void 0,
          second: void 0,
          meridiem: timePicker_constant.AM
        };
      }

      var hour = val.hour();
      var minute = val.minute();
      var second = val.second();

      if (/[h]{1}/.test(format)) {
        hour %= 12;
      }

      if (/[h|H]{2}/.test(format)) {
        hour = hour < 10 ? "0".concat(hour) : hour;
      }

      if (/[m|M]{2}/.test(format)) {
        minute = minute < 10 ? "0".concat(minute) : minute;
      }

      if (/[s|S]{2}/.test(format)) {
        second = second < 10 ? "0".concat(second) : second;
      }

      return {
        hour: hour,
        minute: minute,
        second: second,
        meridiem: val.format("a")
      };
    },
    clear: function clear(context) {
      var e = context.e;
      this.time = void 0;
      this.needClear = true;
      this.inputTime = this.setInputValue(void 0);
      utils_event.emitEvent(this, "change", void 0);
      e.stopPropagation();
    },
    renderInput: function renderInput() {
      var _this = this;

      var classes = ["".concat(name, "__group"), _defineProperty__default["default"]({}, "".concat(config.prefix, "-is-focused"), this.isShowPanel)];
      var slots = {
        "suffix-icon": function suffixIcon() {
          return vue.createVNode(vue.resolveComponent("time-icon"), null, null);
        }
      };
      return vue.createVNode("div", {
        "class": classes,
        "onClick": function onClick() {
          return _this.isShowPanel = true;
        }
      }, [vue.createVNode(vue.resolveComponent("t-input"), {
        "disabled": this.disabled,
        "size": this.size,
        "onClear": this.clear,
        "clearable": this.clearable,
        "readonly": true,
        "placeholder": " ",
        "value": this.time ? " " : void 0,
        "class": this.isShowPanel ? "".concat(config.prefix, "-is-focused") : ""
      }, slots), vue.createVNode(vue.resolveComponent("input-items"), {
        "size": this.size,
        "dayjs": this.inputTime,
        "disabled": this.disabled,
        "format": this.format,
        "steps": this.steps,
        "allowInput": this.allowInput,
        "placeholder": this.placeholder || this.global.placeholder,
        "onToggleMeridiem": function onToggleMeridiem() {
          return _this.toggleInputMeridiem();
        },
        "onBlurDefault": this.onBlurDefault,
        "onFocusDefault": this.onFocusDefault,
        "onChange": function onChange(e) {
          return _this.inputChange(e);
        }
      }, null)]);
    }
  },
  render: function render() {
    var _this2 = this;

    var size = this.size,
        disabled = this.disabled;
    var classes = [name, utils_classnames["default"].SIZE[size] || ""];
    var slots = {
      content: function content() {
        return vue.createVNode(vue.resolveComponent("picker-panel"), {
          "ref": "panel",
          "format": _this2.format,
          "value": _this2.panelValue,
          "disabled": _this2.disabled,
          "isShowPanel": _this2.isShowPanel,
          "onTimePick": _this2.pickTime,
          "onSure": _this2.makeSure,
          "onNowAction": _this2.nowAction,
          "steps": _this2.steps,
          "hideDisabledTime": _this2.hideDisabledTime,
          "disableTime": _this2.disableTime,
          "isFocus": _this2.focus
        }, null);
      }
    };
    return vue.createVNode(vue.resolveComponent("t-popup"), {
      "ref": "popup",
      "placement": "bottom-left",
      "class": classes,
      "trigger": "click",
      "disabled": disabled,
      "visible": this.isShowPanel,
      "overlayClassName": "".concat(timePicker_constant.COMPONENT_NAME, "__panel-container"),
      "onVisibleChange": this.panelVisibleChange,
      "expandAnimation": true
    }, _objectSpread({
      "default": function _default() {
        return [_this2.renderInput()];
      }
    }, slots));
  }
}));

exports["default"] = _TimePicker;
//# sourceMappingURL=time-picker.js.map
