/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var dayjs = require('dayjs');
var timePicker_panel_panelCol = require('../../_chunks/dep-8baf00f6.js');
var utils_mixins = require('../../utils/mixins.js');
var configProvider_configReceiver = require('../../config-provider/config-receiver.js');
var timePicker_constant = require('../constant.js');
var timePicker_panel_props = require('./props.js');
var button_button = require('../../button/button.js');
require('lodash/debounce');
require('../../_chunks/dep-eb6b0f94.js');
require('../../config.js');
require('../../config-provider/zh_CN_config.js');
require('../props.js');
require('@babel/runtime/helpers/toConsumableArray');
require('../../utils/classnames.js');
require('../../loading/index.js');
require('../../loading/loading.js');
require('../../loading/icon/gradient.js');
require('../../_common/js/loading/circle-adapter.js');
require('../../_common/js/utils/set-style.js');
require('../../_common/js/utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../../utils/dom.js');
require('lodash/isString');
require('../../utils/easing.js');
require('../../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isFunction');
require('lodash/isObject');
require('../../utils/transfer-dom.js');
require('../../loading/props.js');
require('../../utils/withInstall.js');
require('../../loading/style');
require('../../loading/plugin.js');
require('../../button/props.js');
require('../../utils/ripple.js');
require('../../utils/set-style.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
}

var name = "".concat(timePicker_constant.COMPONENT_NAME, "__panel");
dayjs__default["default"].extend(timePicker_panel_panelCol.customParseFormat);
var PickerPanel = vue.defineComponent(_objectSpread(_objectSpread({}, utils_mixins["default"](configProvider_configReceiver["default"]("timePicker"))), {}, {
  name: name,
  components: {
    PanelCol: timePicker_panel_panelCol.PanelCol,
    TButton: button_button["default"]
  },
  props: timePicker_panel_props.panelProps(),
  emits: ["sure", "now-action", "time-pick"],
  data: function data() {
    return {
      panel: null,
      isSetup: false
    };
  },
  computed: {
    sectionComponentName: function sectionComponentName() {
      return "".concat(name, "-section");
    },
    classNames: function classNames() {
      return this.rangePicker ? [name, this.sectionComponentName] : [name];
    },
    colValues: function colValues() {
      return this.value.map(function (el) {
        return el || dayjs__default["default"]();
      });
    },
    rangePicker: function rangePicker() {
      return this.colValues.length > 1;
    },
    formatField: function formatField() {
      var match = this.format.match(/(a\s+|A\s+)?(h+|H+)?:?(m+)?:?(s+)?(\s+a|\s+A)?/);

      var _match = _slicedToArray__default["default"](match, 6),
          startAChart = _match[1],
          hour = _match[2],
          minute = _match[3],
          second = _match[4],
          endAChart = _match[5];

      return {
        startAChart: startAChart,
        hour: hour,
        minute: minute,
        second: second,
        endAChart: endAChart
      };
    },
    cols: function cols() {
      if (!this.formatField) {
        return [timePicker_constant.EPickerCols.hour, timePicker_constant.EPickerCols.minute, timePicker_constant.EPickerCols.second];
      }

      var _this$formatField = this.formatField,
          startAChart = _this$formatField.startAChart,
          hour = _this$formatField.hour,
          minute = _this$formatField.minute,
          second = _this$formatField.second,
          endAChart = _this$formatField.endAChart;
      var res = [];
      startAChart && res.push(timePicker_constant.EPickerCols.meridiem);
      hour && res.push(timePicker_constant.EPickerCols.hour);
      minute && res.push(timePicker_constant.EPickerCols.minute);
      second && res.push(timePicker_constant.EPickerCols.second);
      endAChart && res.push(timePicker_constant.EPickerCols.meridiem);
      return res;
    },
    localeMeridiems: function localeMeridiems() {
      return [this.global.anteMeridiem, this.global.postMeridiem];
    }
  },
  watch: {
    isShowPanel: {
      handler: function handler(val) {
        if (val) {
          this.panelColUpdate();
        }
      },
      immediate: true
    }
  },
  methods: {
    panelColUpdate: function panelColUpdate() {
      var _this = this;

      vue.nextTick(function () {
        var panelCol0 = _this.$refs.panelCol_0;
        var panelCol1 = _this.$refs.panelCol_1;
        panelCol0 && panelCol0.updateTimeScrollPos();
        panelCol1 && panelCol1.updateTimeScrollPos();
      });
    },
    scrollToTime: function scrollToTime(colIndex, col, time, behavior) {
      var scroller = this.$refs["panelCol_".concat(colIndex)];
      scroller && scroller.scrollToTime(col, time, behavior);
    },
    renderFooter: function renderFooter() {
      var _slot, _slot2;

      var confirmAction = this.confirmBtnClick.bind(this);
      return vue.createVNode("div", {
        "class": "".concat(this.sectionComponentName, "-footer")
      }, [vue.createVNode(vue.resolveComponent("t-button"), {
        "theme": "primary",
        "variant": "base",
        "onClick": confirmAction
      }, _isSlot(_slot = this.t(this.global.confirm)) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      }), this.rangePicker || vue.createVNode(vue.resolveComponent("t-button"), {
        "theme": "primary",
        "variant": "text",
        "onClick": this.nowAction
      }, _isSlot(_slot2 = this.t(this.global.nowtime)) ? _slot2 : {
        "default": function _default() {
          return [_slot2];
        }
      })]);
    },
    renderBody: function renderBody() {
      return vue.createVNode("div", {
        "class": "".concat(this.sectionComponentName, "-body")
      }, [this.renderSinglePicker(0), this.rangePicker && this.renderSinglePicker(1)]);
    },
    renderSinglePicker: function renderSinglePicker(index) {
      var _this2 = this;

      var val = this.colValues[index];
      var ref = "panelCol_".concat(index);
      return vue.createVNode(vue.resolveComponent("panel-col"), {
        "ref": ref,
        "value": val,
        "cols": this.cols,
        "steps": this.steps,
        "hideDisabledTime": this.hideDisabledTime,
        "disableTime": this.disableTime,
        "format": this.format,
        "onTimePick": function onTimePick(col, time) {
          return _this2.handleTimePick(col, time, index);
        },
        "localeMeridiems": this.localeMeridiems
      }, null);
    },
    confirmBtnClick: function confirmBtnClick() {
      this.$emit("sure");
    },
    nowAction: function nowAction() {
      this.$emit("now-action");
      this.panelColUpdate();
    },
    handleTimePick: function handleTimePick(col, time, index) {
      this.$emit("time-pick", col, time, index, this.colValues[index]);
    }
  },
  render: function render() {
    var isFooterDisplay = this.isFooterDisplay,
        classNames = this.classNames;
    return vue.createVNode("div", {
      "class": classNames
    }, [this.renderBody(), isFooterDisplay ? this.renderFooter() : null]);
  }
}));

exports["default"] = PickerPanel;
//# sourceMappingURL=index.js.map
