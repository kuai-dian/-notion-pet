import dayjs from 'dayjs';
import { EPickerCols } from '../constant';
declare const _default: import("vue").DefineComponent<{
    disabled: {
        default: boolean;
        type: BooleanConstructor;
        validator(v: boolean): boolean;
    };
    isFocus: {
        default: boolean;
        type: BooleanConstructor;
        validator(v: boolean): boolean;
    };
    value: {
        type: import("vue").PropType<dayjs.Dayjs[]>;
        default: () => dayjs.Dayjs[];
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    steps: {
        default: number[];
        type: import("vue").PropType<(string | number)[]>;
    };
    isShowPanel: {
        default: boolean;
        type: BooleanConstructor;
        validator(v: boolean): boolean;
    };
    hideDisabledTime: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableTime: {
        type: import("vue").PropType<(h: number, m: number, s: number) => boolean>;
    };
    isFooterDisplay: {
        type: BooleanConstructor;
        default: boolean;
        validator(v: boolean): boolean;
    };
}, unknown, {
    panel: any;
    isSetup: boolean;
}, {
    sectionComponentName(): string;
    classNames(): string[];
    colValues(): dayjs.Dayjs[];
    rangePicker(): boolean;
    formatField(): {
        startAChart: string;
        hour: string;
        minute: string;
        second: string;
        endAChart: string;
    };
    cols(): EPickerCols[];
    localeMeridiems(): any[];
}, {
    panelColUpdate(): void;
    scrollToTime(colIndex: number, col: EPickerCols, time: number | string, behavior: ScrollBehavior): void;
    renderFooter(): JSX.Element;
    renderBody(): JSX.Element;
    renderSinglePicker(index: number): JSX.Element;
    confirmBtnClick(): void;
    nowAction(): void;
    handleTimePick(col: EPickerCols, time: string | number, index: number): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("time-pick" | "sure" | "now-action")[], "time-pick" | "sure" | "now-action", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    disabled: {
        default: boolean;
        type: BooleanConstructor;
        validator(v: boolean): boolean;
    };
    isFocus: {
        default: boolean;
        type: BooleanConstructor;
        validator(v: boolean): boolean;
    };
    value: {
        type: import("vue").PropType<dayjs.Dayjs[]>;
        default: () => dayjs.Dayjs[];
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    steps: {
        default: number[];
        type: import("vue").PropType<(string | number)[]>;
    };
    isShowPanel: {
        default: boolean;
        type: BooleanConstructor;
        validator(v: boolean): boolean;
    };
    hideDisabledTime: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableTime: {
        type: import("vue").PropType<(h: number, m: number, s: number) => boolean>;
    };
    isFooterDisplay: {
        type: BooleanConstructor;
        default: boolean;
        validator(v: boolean): boolean;
    };
}>> & {
    "onTime-pick"?: (...args: any[]) => any;
    onSure?: (...args: any[]) => any;
    "onNow-action"?: (...args: any[]) => any;
}, {
    value: dayjs.Dayjs[];
    disabled: boolean;
    format: string;
    steps: (string | number)[];
    hideDisabledTime: boolean;
    isShowPanel: boolean;
    isFocus: boolean;
    isFooterDisplay: boolean;
}>;
export default _default;
