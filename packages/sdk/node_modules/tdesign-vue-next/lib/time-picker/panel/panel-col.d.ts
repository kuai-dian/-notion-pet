import dayjs from 'dayjs';
import { EPickerCols } from '../constant';
declare const _default: import("vue").DefineComponent<{
    format: {
        type: StringConstructor;
        default: string;
    };
    cols: {
        type: import("vue").PropType<EPickerCols[]>;
        default: () => EPickerCols[];
    };
    value: {
        default: () => dayjs.Dayjs;
        type: import("vue").PropType<dayjs.Dayjs>;
    };
    range: {
        type: import("vue").PropType<dayjs.Dayjs[]>;
        default: () => dayjs.Dayjs[];
    };
    steps: {
        default: number[];
        type: import("vue").PropType<(string | number)[]>;
    };
    hideDisabledTime: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableTime: {
        type: import("vue").PropType<(h: number, m: number, s: number) => boolean>;
    };
    localeMeridiems: {
        type: import("vue").PropType<string[]>;
    };
}, unknown, {
    splitValue: any;
    timeArr: EPickerCols[];
}, {
    valStr(): string;
    isPm(): boolean;
    currentTimes(): number[];
    timeItemMargin(): number;
}, {
    getTimeItemHeight(col: EPickerCols): number;
    generateColTime(col: EPickerCols): Array<number | string>;
    generateTimeList(num: number, step: number): (string | number)[];
    disableFilter(preIdx: number, col: EPickerCols): number;
    calculateTimeIdx(time: number | string, step: number | string, type: EPickerCols): number;
    getScrollDistance(col: EPickerCols, time: number | string): number;
    scrollToTime(col: EPickerCols, time: number | string, behavior?: ScrollBehavior): void;
    updateTimeScrollPos(): void;
    generateColRows(col: EPickerCols): JSX.Element[];
    handleTimeItemClick(_e: MouseEvent, col: EPickerCols, time: number | string): void;
    isCurrent(col: EPickerCols, colItem: string | number): boolean;
    timeItemCanUsed(col: EPickerCols, time: string | number): boolean;
    renderScrollers(): JSX.Element[];
    renderScroller(col: EPickerCols): JSX.Element;
    closestLookup(availableArr: Array<any>, calcVal: number, step: number): any;
    handleScroll(col: EPickerCols): void;
    renderActiveMask(): JSX.Element;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "time-pick"[], "time-pick", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    format: {
        type: StringConstructor;
        default: string;
    };
    cols: {
        type: import("vue").PropType<EPickerCols[]>;
        default: () => EPickerCols[];
    };
    value: {
        default: () => dayjs.Dayjs;
        type: import("vue").PropType<dayjs.Dayjs>;
    };
    range: {
        type: import("vue").PropType<dayjs.Dayjs[]>;
        default: () => dayjs.Dayjs[];
    };
    steps: {
        default: number[];
        type: import("vue").PropType<(string | number)[]>;
    };
    hideDisabledTime: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableTime: {
        type: import("vue").PropType<(h: number, m: number, s: number) => boolean>;
    };
    localeMeridiems: {
        type: import("vue").PropType<string[]>;
    };
}>> & {
    "onTime-pick"?: (...args: any[]) => any;
}, {
    value: dayjs.Dayjs;
    range: dayjs.Dayjs[];
    cols: EPickerCols[];
    format: string;
    steps: (string | number)[];
    hideDisabledTime: boolean;
}>;
export default _default;
