import { TNodeReturnValue } from '../common';
declare const _default: import("vue").DefineComponent<{
    path: {
        type: StringConstructor;
        default: string;
    };
    hasChildren: {
        type: BooleanConstructor;
        default: boolean;
    };
    active: BooleanConstructor;
    content: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
        default: string;
    };
    disabled: BooleanConstructor;
    divider: BooleanConstructor;
    value: {
        type: import("vue").PropType<string | number | {
            [key: string]: any;
        }>;
    };
    onClick: import("vue").PropType<(dropdownItem: import("./type").DropdownOption, context: {
        e: MouseEvent;
    }) => void>;
}, unknown, unknown, {}, {
    renderSuffix(): TNodeReturnValue;
    handleItemClick(e: MouseEvent): void;
    handleMouseover(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "hover" | "item-hover")[], "click" | "hover" | "item-hover", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    path: {
        type: StringConstructor;
        default: string;
    };
    hasChildren: {
        type: BooleanConstructor;
        default: boolean;
    };
    active: BooleanConstructor;
    content: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
        default: string;
    };
    disabled: BooleanConstructor;
    divider: BooleanConstructor;
    value: {
        type: import("vue").PropType<string | number | {
            [key: string]: any;
        }>;
    };
    onClick: import("vue").PropType<(dropdownItem: import("./type").DropdownOption, context: {
        e: MouseEvent;
    }) => void>;
}>> & {
    onClick?: (...args: any[]) => any;
    onHover?: (...args: any[]) => any;
    "onItem-hover"?: (...args: any[]) => any;
}, {
    active: boolean;
    content: string | import("../common").TNode<any>;
    path: string;
    disabled: boolean;
    hasChildren: boolean;
    divider: boolean;
}>;
export default _default;
