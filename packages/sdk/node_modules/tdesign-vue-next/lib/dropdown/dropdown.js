/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var config = require('../config.js');
var popup_index = require('../popup/index.js');
var dropdown_dropdownMenu = require('./dropdown-menu.js');
var dropdown_props = require('./props.js');
var utils_renderTnode = require('../utils/render-tnode.js');
var utils_event = require('../utils/event.js');
require('../popup/popup.js');
require('@babel/runtime/helpers/typeof');
require('@popperjs/core');
require('../_chunks/dep-eb6b0f94.js');
require('../utils/classnames.js');
require('../utils/dom.js');
require('lodash/isString');
require('../utils/easing.js');
require('../popup/props.js');
require('../utils/set-style.js');
require('../utils/map-props.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('lodash/kebabCase');
require('../utils/withInstall.js');
require('../popup/style');
require('lodash/isEmpty');
require('lodash/isFunction');
require('lodash/isObject');
require('../utils/helper.js');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/camelCase');
require('./dropdown-item.js');
require('tdesign-icons-vue-next');
require('../divider/index.js');
require('../divider/divider.js');
require('../divider/props.js');
require('../divider/style');
require('../utils/ripple.js');
require('./dropdown-item-props.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(config.prefix, "-dropdown");
var _Dropdown = vue.defineComponent({
  name: "TDropdown",
  components: {
    DropdownMenu: dropdown_dropdownMenu["default"]
  },
  provide: function provide() {
    return {
      dropdown: this
    };
  },
  props: _objectSpread({}, dropdown_props["default"]),
  emits: ["click", "visibleChange"],
  methods: {
    handleMenuClick: function handleMenuClick(data, context) {
      if (this.hideAfterItemClick) {
        var popupElem = this.$refs.popupElem;
        popupElem.handleClose();
      }

      utils_event.emitEvent(this, "click", data, context);
    }
  },
  render: function render() {
    var _this$popupProps,
        _this = this;

    var trigger = this.$slots["default"] ? this.$slots["default"](null) : "";
    var contentSlot = utils_renderTnode.renderTNodeJSX(this, "dropdown");

    var popupProps = _objectSpread(_objectSpread({}, this.$attrs), {}, {
      disabled: this.disabled,
      placement: this.placement,
      trigger: this.trigger,
      overlayClassName: [name, (_this$popupProps = this.popupProps) === null || _this$popupProps === void 0 ? void 0 : _this$popupProps.overlayClassName]
    });

    return vue.createVNode(popup_index.Popup, vue.mergeProps(this.popupProps, popupProps, {
      "destroyOnClose": true,
      "ref": "popupElem",
      "expandAnimation": true
    }), {
      "default": function _default() {
        return [trigger];
      },
      content: function content() {
        return contentSlot || vue.createVNode(vue.resolveComponent("dropdown-menu"), {
          "options": _this.options,
          "maxHeight": _this.maxHeight,
          "maxColumnWidth": _this.maxColumnWidth,
          "minColumnWidth": _this.minColumnWidth
        }, null);
      }
    });
  }
});

exports["default"] = _Dropdown;
//# sourceMappingURL=dropdown.js.map
