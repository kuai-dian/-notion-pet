/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var config = require('../config.js');
var utils_classnames = require('../utils/classnames.js');
var utils_helper = require('../utils/helper.js');
var radio_props = require('./props.js');
var utils_event = require('../utils/event.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/camelCase');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(config.prefix, "-radio");
var radioBtnName = "".concat(config.prefix, "-radio-button");

function getValidAttrs(obj) {
  var newObj = {};
  Object.keys(obj).forEach(function (key) {
    if (typeof obj[key] !== "undefined") {
      newObj[key] = obj[key];
    }
  });
  return newObj;
}

var _Radio = vue.defineComponent({
  name: "TRadio",
  inject: {
    radioGroup: {
      "default": void 0
    },
    radioButton: {
      "default": void 0
    }
  },
  inheritAttrs: false,
  props: _objectSpread({}, radio_props["default"]),
  emits: ["change", "click"],
  methods: {
    handleChange: function handleChange(e) {
      if (this.radioGroup && this.radioGroup.handleRadioChange) {
        this.radioGroup.handleRadioChange(this.value, {
          e: e
        });
      } else {
        var target = e.target;
        utils_event.emitEvent(this, "change", target.checked, {
          e: e
        });
      }
    },
    handleClick: function handleClick(e) {
      this.$emit("click");
      if (!this.checked || !this.allowUncheck) return;

      if (this.radioGroup) {
        this.radioGroup.$emit("checked-change", void 0, {
          e: e
        });
      } else {
        utils_event.emitEvent(this, "change", false, {
          e: e
        });
      }
    }
  },
  render: function render() {
    var _ref;

    var $attrs = this.$attrs,
        $slots = this.$slots,
        radioGroup = this.radioGroup,
        radioButton = this.radioButton;
    var children = $slots["default"] && $slots["default"](null);
    var inputProps = {
      checked: this.checked,
      disabled: this.disabled,
      value: this.value,
      name: this.name
    };
    var inputEvents = getValidAttrs({
      focus: $attrs.onFocus,
      blur: $attrs.onBlur,
      keydown: $attrs.onKeydown,
      keyup: $attrs.onKeyup,
      keypresss: $attrs.onKeypresss
    });
    var events = [].concat(_toConsumableArray__default["default"](Object.keys(inputEvents)), ["input", "change"]).map(function (str) {
      return "on".concat(str[0].toUpperCase()).concat(str.slice(1));
    });
    var wrapperAttrs = utils_helper.omit($attrs, events);

    if (radioGroup) {
      inputProps.checked = this.value === radioGroup.value;
      inputProps.disabled = this.disabled === void 0 ? radioGroup.disabled : this.disabled;
      inputProps.name = radioGroup.name;
    }

    var prefixCls = radioButton ? radioBtnName : name;
    var inputClass = ["".concat(prefixCls), (_ref = {}, _defineProperty__default["default"](_ref, utils_classnames["default"].STATUS.checked, inputProps.checked), _defineProperty__default["default"](_ref, utils_classnames["default"].STATUS.disabled, inputProps.disabled), _ref)];
    return vue.createVNode("label", vue.mergeProps({
      "class": inputClass
    }, wrapperAttrs), [vue.createVNode("input", vue.mergeProps({
      "type": "radio",
      "class": "".concat(prefixCls, "__former")
    }, inputEvents, inputProps, {
      "onChange": this.handleChange,
      "onClick": this.handleClick
    }), null), vue.createVNode("span", {
      "class": "".concat(prefixCls, "__input")
    }, null), vue.createVNode("span", {
      "class": "".concat(prefixCls, "__label")
    }, [children])]);
  }
});

exports["default"] = _Radio;
exports.radioBtnName = radioBtnName;
//# sourceMappingURL=radio.js.map
