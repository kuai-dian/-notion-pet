import { ComponentPublicInstance } from 'vue';
import { TNodeReturnValue } from '../common';
declare const _default: import("vue").DefineComponent<{
    cascading: {
        type: import("vue").PropType<import("./type").CascadingValue>;
        default: import("./type").CascadingValue;
        validator(val: import("./type").CascadingValue): boolean;
    };
    collapseAvatar: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    max: {
        type: NumberConstructor;
    };
    placement: {
        type: import("vue").PropType<import("./type").MaxOverPlacement>;
        validator(val: import("./type").MaxOverPlacement): boolean;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    size: {
        type: StringConstructor;
        default: string;
    };
}, {
    renderEllipsisAvatar: (context: ComponentPublicInstance, children: Array<TNodeReturnValue>) => Array<TNodeReturnValue>;
    isIcon: (context: ComponentPublicInstance) => any;
    setEllipsisContent: (context: ComponentPublicInstance, children: Array<TNodeReturnValue>) => string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    cascading: {
        type: import("vue").PropType<import("./type").CascadingValue>;
        default: import("./type").CascadingValue;
        validator(val: import("./type").CascadingValue): boolean;
    };
    collapseAvatar: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    max: {
        type: NumberConstructor;
    };
    placement: {
        type: import("vue").PropType<import("./type").MaxOverPlacement>;
        validator(val: import("./type").MaxOverPlacement): boolean;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    size: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    size: string;
    cascading: import("./type").CascadingValue;
}>;
export default _default;
