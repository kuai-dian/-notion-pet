/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var config = require('../config.js');
var avatar_avatarGroupProps = require('./avatar-group-props.js');
var avatar_avatar = require('./avatar.js');
var utils_renderTnode = require('../utils/render-tnode.js');
require('../hooks/event.js');
require('../utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/camelCase');
require('../utils/classnames.js');
require('./props.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isFunction');
require('lodash/isObject');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
}

var name = "".concat(config.prefix, "-avatar-group");
var _AvatarGroup = vue.defineComponent({
  name: "TAvatarGroup",
  components: {
    Avatar: avatar_avatar["default"]
  },
  props: avatar_avatarGroupProps["default"],
  setup: function setup(props2) {
    vue.provide("avatarGroup", _objectSpread({}, props2));

    var renderIcon = function renderIcon(context) {
      return isIcon(context) && typeof props2.collapseAvatar !== "string" ? props2.collapseAvatar : null;
    };

    var renderEllipsisAvatar = function renderEllipsisAvatar(context, children) {
      if ((children === null || children === void 0 ? void 0 : children.length) > props2.max) {
        var content = setEllipsisContent(context, children);
        var outAvatar = children.slice(0, props2.max);
        outAvatar.push(vue.createVNode(avatar_avatar["default"], {
          "size": props2.size,
          "icon": renderIcon(context)
        }, _isSlot(content) ? content : {
          "default": function _default() {
            return [content];
          }
        }));
        return [outAvatar];
      }

      return [children];
    };

    var setEllipsisContent = function setEllipsisContent(context, children) {
      var content = "";

      if (props2.collapseAvatar) {
        if (!isIcon(context)) {
          content = utils_renderTnode.renderContent(context, "collapseAvatar", "content");
        }
      } else {
        content = "+".concat(children.length - props2.max);
      }

      return content;
    };

    var isIcon = function isIcon(context) {
      var content = utils_renderTnode.renderTNodeJSX(context, "collapseAvatar");
      return content;
    };

    return {
      renderEllipsisAvatar: renderEllipsisAvatar,
      isIcon: isIcon,
      setEllipsisContent: setEllipsisContent
    };
  },
  render: function render() {
    var _ref;

    var children = utils_renderTnode.renderTNodeJSX(this, "default");
    var _this$$props = this.$props,
        cascading = _this$$props.cascading,
        max = _this$$props.max;
    var groupClass = ["".concat(name), (_ref = {}, _defineProperty__default["default"](_ref, "".concat(config.prefix, "-avatar--offset-right"), cascading === "right-up"), _defineProperty__default["default"](_ref, "".concat(config.prefix, "-avatar--offset-left"), cascading === "left-up"), _ref)];
    var content = [children];

    if (max && max >= 0) {
      content = [this.renderEllipsisAvatar(this, children)];
    }

    return vue.createVNode("div", {
      "class": groupClass
    }, [content]);
  }
});

exports["default"] = _AvatarGroup;
//# sourceMappingURL=group.js.map
