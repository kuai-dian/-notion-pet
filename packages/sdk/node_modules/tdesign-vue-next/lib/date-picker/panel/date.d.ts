import { PropType } from 'vue';
import { TdDatePickerProps } from '../type';
import { DatePickerConfig } from '../../config-provider/config-receiver';
declare const _default: import("vue").DefineComponent<{
    global: {
        type: PropType<DatePickerConfig>;
        default: () => DatePickerConfig;
    };
    value: {
        type: DateConstructor;
        default: () => Date;
    };
    mode: {
        type: PropType<"month" | "year" | "date">;
        default: "month" | "year" | "date";
        validator(val: "month" | "year" | "date"): boolean;
    };
    minDate: DateConstructor;
    maxDate: DateConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: number): boolean;
    };
    disableDate: {
        type: PropType<import("../type").DisableDate>;
    };
    onChange: PropType<(value: import("../type").DateValue) => void>;
}, unknown, {
    year: number;
    month: number;
    type: "month" | "year" | "date";
}, {
    tableData(): import("../../_common/js/date-picker/utils").DateTime[][];
}, {
    getClickHandler(): Function;
    clickDate(date: Date): void;
    clickMonth(date: Date): void;
    clickYear(date: Date): void;
    clickHeader(flag: number): void;
    onTypeChange(type: TdDatePickerProps['mode']): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "change"[], "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    global: {
        type: PropType<DatePickerConfig>;
        default: () => DatePickerConfig;
    };
    value: {
        type: DateConstructor;
        default: () => Date;
    };
    mode: {
        type: PropType<"month" | "year" | "date">;
        default: "month" | "year" | "date";
        validator(val: "month" | "year" | "date"): boolean;
    };
    minDate: DateConstructor;
    maxDate: DateConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: number): boolean;
    };
    disableDate: {
        type: PropType<import("../type").DisableDate>;
    };
    onChange: PropType<(value: import("../type").DateValue) => void>;
}>> & {
    onChange?: (...args: any[]) => any;
}, {
    value: Date;
    global: DatePickerConfig;
    mode: "month" | "year" | "date";
}>;
export default _default;
