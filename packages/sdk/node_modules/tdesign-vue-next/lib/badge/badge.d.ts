declare const _default: import("vue").DefineComponent<{
    color: {
        type: StringConstructor;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    count: {
        type: import("vue").PropType<string | number | import("../common").TNode<any>>;
        default: number;
    };
    default: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    dot: BooleanConstructor;
    maxCount: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: import("vue").PropType<(string | number)[]>;
    };
    shape: {
        type: import("vue").PropType<"round" | "circle">;
        default: "round" | "circle";
        validator(val: "round" | "circle"): boolean;
    };
    showZero: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium">;
        default: "small" | "medium";
        validator(val: "small" | "medium"): boolean;
    };
}, unknown, unknown, {}, {
    getContent(): any;
    isSmall(): boolean;
    isZero(): boolean;
    isHidden(): boolean;
    getOffset(): {
        xOffset?: undefined;
        yOffset?: undefined;
    } | {
        xOffset: string | number;
        yOffset: string | number;
    };
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    color: {
        type: StringConstructor;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    count: {
        type: import("vue").PropType<string | number | import("../common").TNode<any>>;
        default: number;
    };
    default: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    dot: BooleanConstructor;
    maxCount: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: import("vue").PropType<(string | number)[]>;
    };
    shape: {
        type: import("vue").PropType<"round" | "circle">;
        default: "round" | "circle";
        validator(val: "round" | "circle"): boolean;
    };
    showZero: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium">;
        default: "small" | "medium";
        validator(val: "small" | "medium"): boolean;
    };
}>>, {
    color: string;
    size: "small" | "medium";
    dot: boolean;
    shape: "round" | "circle";
    count: string | number | import("../common").TNode<any>;
    maxCount: number;
    showZero: boolean;
}>;
export default _default;
