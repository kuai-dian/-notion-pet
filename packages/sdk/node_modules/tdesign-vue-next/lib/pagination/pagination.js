/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _typeof = require('@babel/runtime/helpers/typeof');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var config = require('../config.js');
var utils_mixins = require('../utils/mixins.js');
var configProvider_configReceiver = require('../config-provider/config-receiver.js');
var inputNumber_index = require('../input-number/index.js');
var select_index = require('../select/index.js');
var utils_classnames = require('../utils/classnames.js');
var pagination_props = require('./props.js');
var utils_renderTnode = require('../utils/render-tnode.js');
var utils_event = require('../utils/event.js');
require('../config-provider/zh_CN_config.js');
require('../input-number/input-number.js');
require('@babel/runtime/helpers/asyncToGenerator');
require('@babel/runtime/regenerator');
require('../button/index.js');
require('../button/button.js');
require('@babel/runtime/helpers/toConsumableArray');
require('../loading/index.js');
require('../loading/loading.js');
require('@babel/runtime/helpers/slicedToArray');
require('../loading/icon/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../utils/dom.js');
require('../_chunks/dep-eb6b0f94.js');
require('lodash/isString');
require('../utils/easing.js');
require('../utils/transfer-dom.js');
require('../loading/props.js');
require('../utils/withInstall.js');
require('../loading/style');
require('../loading/plugin.js');
require('lodash/isEmpty');
require('lodash/isFunction');
require('lodash/isObject');
require('../button/props.js');
require('../utils/ripple.js');
require('../utils/set-style.js');
require('../button/style');
require('../input-number/props.js');
require('../utils/map-props.js');
require('lodash/kebabCase');
require('../input-number/style');
require('../utils/helper.js');
require('lodash/camelCase');
require('../select/select.js');
require('lodash/debounce');
require('lodash/get');
require('lodash/set');
require('../input/index.js');
require('../input/addon.js');
require('../input/input.js');
require('../input/props.js');
require('../input/input-group.js');
require('../input/style');
require('../tag/index.js');
require('../tag/tag.js');
require('../tag/props.js');
require('../tag/check-tag.js');
require('../tag/check-tag-props.js');
require('../tag/style');
require('../common-components/fake-arrow.js');
require('../popup/index.js');
require('../popup/popup.js');
require('@popperjs/core');
require('../popup/props.js');
require('../popup/style');
require('../select/option.js');
require('../select/option-props.js');
require('../checkbox/index.js');
require('../checkbox/checkbox.js');
require('../checkbox/props.js');
require('../checkbox/group.js');
require('lodash/intersection');
require('../checkbox/checkbox-group-props.js');
require('../checkbox/style');
require('../select/props.js');
require('../select/optionGroup.js');
require('../select/option-group-props.js');
require('../select/style');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
}

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-pagination");
var min = 1;
var PaginationLocalReceiver = configProvider_configReceiver["default"]("pagination");
var _Pagination = vue.defineComponent(_objectSpread(_objectSpread({
  name: "TPagination",
  components: {
    ChevronLeftIcon: tdesignIconsVueNext.ChevronLeftIcon,
    ChevronRightIcon: tdesignIconsVueNext.ChevronRightIcon,
    ChevronLeftDoubleIcon: tdesignIconsVueNext.ChevronLeftDoubleIcon,
    ChevronRightDoubleIcon: tdesignIconsVueNext.ChevronRightDoubleIcon,
    EllipsisIcon: tdesignIconsVueNext.EllipsisIcon,
    TInputNumber: inputNumber_index.InputNumber,
    TSelect: select_index.Select,
    TOption: select_index.Option
  }
}, utils_mixins["default"](PaginationLocalReceiver)), {}, {
  props: _objectSpread(_objectSpread({}, pagination_props["default"]), {}, {
    current: {
      type: Number,
      "default": 1,
      validator: function validator(v) {
        return v > 0;
      }
    },
    pageSize: {
      type: Number,
      "default": 10,
      validator: function validator(v) {
        return v > 0;
      }
    }
  }),
  emits: ["change", "update:current", "update:pageSize", "page-size-change", "current-change"],
  data: function data() {
    return {
      prevMore: false,
      nextMore: false,
      jumpIndex: this.current
    };
  },
  computed: {
    paginationClass: function paginationClass() {
      return ["".concat(name), utils_classnames["default"].SIZE[this.size], _defineProperty__default["default"]({}, utils_classnames["default"].STATUS.disabled, this.disabled)];
    },
    totalClass: function totalClass() {
      return ["".concat(name, "__total")];
    },
    sizerClass: function sizerClass() {
      return ["".concat(name, "__select")];
    },
    preBtnClass: function preBtnClass() {
      return ["".concat(name, "__btn"), "".concat(name, "__btn-prev"), _defineProperty__default["default"]({}, utils_classnames["default"].STATUS.disabled, this.disabled || this.current === 1)];
    },
    nextBtnClass: function nextBtnClass() {
      return ["".concat(name, "__btn"), "".concat(name, "__btn-next"), _defineProperty__default["default"]({}, utils_classnames["default"].STATUS.disabled, this.disabled || this.current === this.pageCount)];
    },
    btnWrapClass: function btnWrapClass() {
      return ["".concat(name, "__pager")];
    },
    btnMoreClass: function btnMoreClass() {
      return ["".concat(name, "__number"), "".concat(name, "__number--more"), _defineProperty__default["default"]({}, utils_classnames["default"].STATUS.disabled, this.disabled)];
    },
    jumperClass: function jumperClass() {
      return ["".concat(name, "__jump")];
    },
    jumperInputClass: function jumperInputClass() {
      return ["".concat(name, "__input")];
    },
    simpleClass: function simpleClass() {
      return ["".concat(name, "__select")];
    },
    isSimple: function isSimple() {
      return this.theme === "simple";
    },
    pageCount: function pageCount() {
      var c = Math.ceil(this.total / this.pageSize);
      return c > 0 ? c : 1;
    },
    pageCountOption: function pageCountOption() {
      var ans = [];

      for (var i = 1; i <= this.pageCount; i++) {
        ans.push({
          value: i,
          label: "".concat(i, "/").concat(this.pageCount)
        });
      }

      return ans;
    },
    sizeOptions: function sizeOptions() {
      var _this = this;

      var pageSizeOptions = this.pageSizeOptions;
      var options = pageSizeOptions.map(function (option) {
        return _typeof__default["default"](option) === "object" ? option : {
          label: _this.t(_this.global.itemsPerPage, {
            size: option
          }),
          value: Number(option)
        };
      });
      return options.sort(function (a, b) {
        return a.value - b.value;
      });
    },
    curPageLeftCount: function curPageLeftCount() {
      return Math.ceil((this.foldedMaxPageBtn - 1) / 2);
    },
    curPageRightCount: function curPageRightCount() {
      return Math.ceil((this.foldedMaxPageBtn - 1) / 2);
    },
    isPrevMoreShow: function isPrevMoreShow() {
      return 2 + this.curPageLeftCount < this.current;
    },
    isNextMoreShow: function isNextMoreShow() {
      return this.pageCount - 1 - this.curPageRightCount > this.current;
    },
    pages: function pages() {
      var array = [];
      var start;
      var end;

      if (this.isFolded) {
        if (this.isPrevMoreShow && this.isNextMoreShow) {
          start = this.current - this.curPageLeftCount;
          end = this.current + this.curPageRightCount;
        } else {
          start = this.isPrevMoreShow ? this.pageCount - this.foldedMaxPageBtn + 1 : 2;
          end = this.isPrevMoreShow ? this.pageCount - 1 : this.foldedMaxPageBtn;
        }
      } else {
        start = 1;
        end = this.pageCount;
      }

      for (var i = start; i <= end; i++) {
        array.push(i);
      }

      return array;
    },
    isFolded: function isFolded() {
      return this.pageCount > this.maxPageBtn;
    }
  },
  watch: {
    current: function current(val) {
      this.jumpIndex = val;
    }
  },
  methods: {
    toPage: function toPage(pageIndex, isTriggerChange) {
      if (this.disabled) {
        return;
      }

      var current = pageIndex;

      if (pageIndex < min) {
        current = min;
      } else if (pageIndex > this.pageCount) {
        current = this.pageCount;
      }

      if (this.current !== current) {
        var prev = this.current;
        var pageInfo = {
          current: current,
          previous: prev,
          pageSize: this.pageSize
        };

        if (isTriggerChange !== false) {
          utils_event.emitEvent(this, "change", pageInfo);
        }

        this.$emit("update:current", current);
        utils_event.emitEvent(this, "current-change", current, pageInfo);
      }
    },
    prevPage: function prevPage() {
      this.toPage(this.current - 1);
    },
    nextPage: function nextPage() {
      this.toPage(this.current + 1);
    },
    prevMorePage: function prevMorePage() {
      this.toPage(this.current - this.foldedMaxPageBtn);
    },
    nextMorePage: function nextMorePage() {
      this.toPage(this.current + this.foldedMaxPageBtn);
    },
    getButtonClass: function getButtonClass(index) {
      var _ref5;

      return ["".concat(name, "__number"), (_ref5 = {}, _defineProperty__default["default"](_ref5, utils_classnames["default"].STATUS.disabled, this.disabled), _defineProperty__default["default"](_ref5, utils_classnames["default"].STATUS.current, this.current === index), _ref5)];
    },
    onSelectorChange: function onSelectorChange(e) {
      if (this.disabled) {
        return;
      }

      var pageSize = parseInt(e, 10);
      var pageCount = 1;

      if (pageSize > 0) {
        pageCount = Math.ceil(this.total / pageSize);
      }

      var isIndexChange = false;

      if (this.current > pageCount) {
        isIndexChange = true;
      }

      var pageInfo = {
        current: isIndexChange ? pageCount : this.current,
        previous: this.current,
        pageSize: pageSize
      };
      utils_event.emitEvent(this, "page-size-change", pageSize, pageInfo);
      utils_event.emitEvent(this, "change", pageInfo);

      if (isIndexChange) {
        this.toPage(pageCount, false);
      }
    },
    renderTotalContent: function renderTotalContent() {
      var locale = this.locale,
          total = this.total,
          t = this.t;

      if (this.$slots.totalContent) {
        return this.$slots.totalContent(null);
      }

      if (typeof this.totalContent === "function") {
        return this.totalContent();
      }

      return t(locale.total, {
        total: total
      });
    },
    onJumperChange: function onJumperChange(val) {
      var currentIndex = Number(val);
      if (isNaN(currentIndex)) return;
      this.toPage(currentIndex);
    },
    renderPagination: function renderPagination() {
      var _this2 = this;

      var _slot;

      return vue.createVNode("div", {
        "class": this.paginationClass
      }, [utils_renderTnode.renderTNodeJSX(this, "totalContent", vue.createVNode("div", {
        "class": this.totalClass
      }, [this.t(this.global.total, {
        total: this.total
      })])), this.pageSizeOptions.length > 0 && vue.createVNode(vue.resolveComponent("t-select"), {
        "size": this.size,
        "value": this.pageSize,
        "disabled": this.disabled,
        "class": this.sizerClass,
        "onChange": this.onSelectorChange
      }, _isSlot(_slot = this.sizeOptions.map(function (item, index) {
        return vue.createVNode(vue.resolveComponent("t-option"), {
          "value": item.value,
          "label": item.label,
          "key": index
        }, null);
      })) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      }), vue.createVNode("div", {
        "class": this.preBtnClass,
        "onClick": this.prevPage,
        "disabled": this.disabled || this.current === min
      }, [vue.createVNode(vue.resolveComponent("chevron-left-icon"), null, null)]), !this.isSimple ? vue.createVNode("ul", {
        "class": this.btnWrapClass
      }, [this.isFolded && vue.createVNode("li", {
        "class": this.getButtonClass(1),
        "onClick": function onClick() {
          return _this2.toPage(min);
        }
      }, [min]), this.isFolded && this.isPrevMoreShow ? vue.createVNode("li", {
        "class": this.btnMoreClass,
        "onClick": this.prevMorePage,
        "onMouseover": function onMouseover() {
          return _this2.prevMore = true;
        },
        "onMouseout": function onMouseout() {
          return _this2.prevMore = false;
        }
      }, [this.prevMore ? vue.createVNode(vue.resolveComponent("chevron-left-double-icon"), null, null) : vue.createVNode(vue.resolveComponent("ellipsis-icon"), null, null)]) : null, this.pages.map(function (i) {
        return vue.createVNode("li", {
          "class": _this2.getButtonClass(i),
          "key": i,
          "onClick": function onClick() {
            return _this2.toPage(i);
          }
        }, [i]);
      }), this.isFolded && this.isNextMoreShow ? vue.createVNode("li", {
        "class": this.btnMoreClass,
        "onClick": this.nextMorePage,
        "onMouseover": function onMouseover() {
          return _this2.nextMore = true;
        },
        "onMouseout": function onMouseout() {
          return _this2.nextMore = false;
        }
      }, [this.nextMore ? vue.createVNode(vue.resolveComponent("chevron-right-double-icon"), null, null) : vue.createVNode(vue.resolveComponent("ellipsis-icon"), null, null)]) : null, this.isFolded ? vue.createVNode("li", {
        "class": this.getButtonClass(this.pageCount),
        "onClick": function onClick() {
          return _this2.toPage(_this2.pageCount);
        }
      }, [this.pageCount]) : null]) : vue.createVNode(vue.resolveComponent("t-select"), {
        "size": this.size,
        "value": this.current,
        "disabled": this.disabled,
        "class": this.simpleClass,
        "onChange": this.toPage,
        "options": this.pageCountOption
      }, null), vue.createVNode("div", {
        "class": this.nextBtnClass,
        "onClick": this.nextPage,
        "disabled": this.disabled || this.current === this.pageCount
      }, [vue.createVNode(vue.resolveComponent("chevron-right-icon"), null, null)]), this.showJumper ? vue.createVNode("div", {
        "class": this.jumperClass
      }, [this.t(this.global.jumpTo), vue.createVNode(vue.resolveComponent("t-input-number"), {
        "class": this.jumperInputClass,
        "modelValue": _this2.jumpIndex,
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return _this2.jumpIndex = $event;
        },
        "onBlur": this.onJumperChange,
        "onEnter": this.onJumperChange,
        "max": this.pageCount,
        "min": min,
        "theme": "normal"
      }, null), this.t(this.global.page)]) : null]);
    }
  },
  render: function render() {
    var pageCount = this.pageCount;
    return pageCount >= 1 && this.renderPagination();
  }
}));

exports["default"] = _Pagination;
//# sourceMappingURL=pagination.js.map
