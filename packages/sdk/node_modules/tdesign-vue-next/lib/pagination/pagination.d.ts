import { ClassName } from '../common';
declare const _default: import("vue").DefineComponent<Readonly<import("vue").ComponentPropsOptions<{
    [x: string]: unknown;
}>>, unknown, {
    prevMore: boolean;
    nextMore: boolean;
    jumpIndex: any;
}, {
    paginationClass(): ClassName;
    totalClass(): ClassName;
    sizerClass(): ClassName;
    preBtnClass(): ClassName;
    nextBtnClass(): ClassName;
    btnWrapClass(): ClassName;
    btnMoreClass(): ClassName;
    jumperClass(): ClassName;
    jumperInputClass(): ClassName;
    simpleClass(): ClassName;
    isSimple(): boolean;
    pageCount(): number;
    pageCountOption(): Array<{
        label: string;
        value: number;
    }>;
    sizeOptions(): Array<{
        label: string;
        value: number;
    }>;
    curPageLeftCount(): number;
    curPageRightCount(): number;
    isPrevMoreShow(): boolean;
    isNextMoreShow(): boolean;
    pages(): Array<number>;
    isFolded(): boolean;
}, {
    toPage(pageIndex: number, isTriggerChange?: boolean): void;
    prevPage(): void;
    nextPage(): void;
    prevMorePage(): void;
    nextMorePage(): void;
    getButtonClass(index: number): ClassName;
    onSelectorChange(e: string): void;
    renderTotalContent(): any;
    onJumperChange(val: String): void;
    renderPagination(): JSX.Element;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:current" | "update:pageSize" | "page-size-change" | "current-change")[], "change" | "update:current" | "update:pageSize" | "page-size-change" | "current-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<readonly string[] | import("vue").ExtractPropTypes<Readonly<import("vue").ComponentObjectPropsOptions<{
    [x: string]: unknown;
}>>>> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:current"?: (...args: any[]) => any;
    "onUpdate:pageSize"?: (...args: any[]) => any;
    "onPage-size-change"?: (...args: any[]) => any;
    "onCurrent-change"?: (...args: any[]) => any;
}, {
    [x: number]: string;
} | {}>;
export default _default;
