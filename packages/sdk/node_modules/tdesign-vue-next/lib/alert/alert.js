/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var config = require('../config.js');
var utils_dom = require('../utils/dom.js');
var alert_props = require('./props.js');
var utils_renderTnode = require('../utils/render-tnode.js');
var hooks_event = require('../hooks/event.js');
var hooks_icon = require('../hooks/icon.js');
require('../_chunks/dep-eb6b0f94.js');
require('lodash/isString');
require('../utils/easing.js');
require('lodash/isEmpty');
require('lodash/isFunction');
require('lodash/isObject');
require('../utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/camelCase');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

var name = "".concat(config.prefix, "-alert");
var _Alert = vue.defineComponent({
  name: "TAlert",
  props: alert_props["default"],
  emits: ["close", "closed"],
  setup: function setup(props2, _ref) {
    var slots = _ref.slots,
        emit = _ref.emit;
    var emitEvent = hooks_event.useEmitEvent(props2, emit);
    var ele = vue.ref(null);
    var description = vue.ref(null);
    var descHeight = vue.ref(0);
    var visible = vue.ref(true);
    var collapsed = vue.ref(true);

    var renderIcon = function renderIcon() {
      var Component = {
        info: tdesignIconsVueNext.InfoCircleFilledIcon,
        success: tdesignIconsVueNext.CheckCircleFilledIcon,
        warning: tdesignIconsVueNext.ErrorCircleFilledIcon,
        error: tdesignIconsVueNext.ErrorCircleFilledIcon,
        question: tdesignIconsVueNext.HelpCircleFilledIcon
      };
      var iconContent = hooks_icon.useIcon(props2, slots, "icon", Component);
      return iconContent ? vue.createVNode("div", {
        "class": "".concat(name, "__icon")
      }, [iconContent]) : null;
    };

    var renderClose = function renderClose() {
      var close = props2.close;
      var closeContent = null;

      if (close === true || close === "") {
        closeContent = vue.createVNode(tdesignIconsVueNext.CloseIcon, null, null);
      } else if (typeof close === "string") {
        closeContent = close;
      } else {
        closeContent = hooks_icon.useIcon(props2, slots, "close");
      }

      return closeContent ? vue.createVNode("div", {
        "class": "".concat(name, "__close"),
        "onClick": handleClose
      }, [closeContent]) : null;
    };

    var renderTitle = function renderTitle(context) {
      var titleContent = utils_renderTnode.renderTNodeJSX(context, "title");
      return titleContent ? vue.createVNode("div", {
        "class": "".concat(name, "__title")
      }, [" ", titleContent]) : null;
    };

    var renderMessage = function renderMessage(context) {
      var operationContent = utils_renderTnode.renderTNodeJSX(context, "operation");
      return vue.createVNode("div", {
        "class": "".concat(name, "__message")
      }, [renderDescription(context), operationContent ? vue.createVNode("div", {
        "class": "".concat(name, "__operation")
      }, [operationContent]) : null]);
    };

    var renderDescription = function renderDescription(context) {
      var _description$value, _description$value$ch;

      var messageContent;
      messageContent = utils_renderTnode.renderTNodeJSX(context, "default");

      if (!messageContent) {
        messageContent = utils_renderTnode.renderTNodeJSX(context, "message");
      }

      var contentLength = Array.isArray(messageContent) ? messageContent.length : 1;
      var hasCollapse = props2.maxLine > 0 && props2.maxLine < contentLength;
      var height = (_description$value = description.value) === null || _description$value === void 0 ? void 0 : (_description$value$ch = _description$value.children[0]) === null || _description$value$ch === void 0 ? void 0 : _description$value$ch.offsetHeight;

      if (hasCollapse && collapsed.value) {
        messageContent = messageContent.slice(0, props2.maxLine);
        height && (description.value.style.height = "".concat(descHeight.value, "px"));
      } else if (hasCollapse) {
        height && (description.value.style.height = "".concat(height * (contentLength - props2.maxLine) + descHeight.value, "px"));
      }

      return vue.createVNode("div", {
        "class": "".concat(name, "__description"),
        "ref": "description"
      }, [hasCollapse ? messageContent.map(function (content) {
        return vue.createVNode("div", null, [content]);
      }) : messageContent, hasCollapse ? vue.createVNode("div", {
        "class": "t-alert__collapse",
        "onClick": function onClick() {
          collapsed.value = !collapsed.value;
        }
      }, [collapsed.value ? "\u5C55\u5F00\u5168\u90E8" : "\u6536\u8D77"]) : null]);
    };

    var renderContent = function renderContent(context) {
      return vue.createVNode("div", {
        "class": "".concat(name, "__content")
      }, [renderTitle(context), renderMessage(context)]);
    };

    var handleClose = function handleClose(e) {
      emitEvent("close", {
        e: e
      });
      utils_dom.addClass(ele.value, "".concat(name, "--closing"));
    };

    var handleCloseEnd = function handleCloseEnd(e) {
      if (e.propertyName === "opacity") {
        visible.value = false;
        emitEvent("closed", {
          e: e
        });
      }
    };

    vue.onMounted(function () {
      utils_dom.on(ele.value, "transitionend", handleCloseEnd);
      descHeight.value = description.value.offsetHeight;
    });
    vue.onBeforeUnmount(function () {
      utils_dom.off(ele.value, "transitionend", handleCloseEnd);
    });
    return {
      ele: ele,
      description: description,
      visible: visible,
      collapsed: collapsed,
      renderIcon: renderIcon,
      renderTitle: renderTitle,
      renderMessage: renderMessage,
      renderDescription: renderDescription,
      renderContent: renderContent,
      renderClose: renderClose,
      handleClose: handleClose,
      handleCloseEnd: handleCloseEnd
    };
  },
  render: function render() {
    var theme = this.theme,
        visible = this.visible,
        $attrs = this.$attrs,
        renderIcon = this.renderIcon,
        renderContent = this.renderContent,
        renderClose = this.renderClose;
    var CLASS = ["".concat(name), "".concat(name, "--").concat(theme), _defineProperty__default["default"]({}, "".concat(config.prefix, "-is-hidden"), !visible)];
    return vue.createVNode("div", vue.mergeProps({
      "class": CLASS
    }, $attrs, {
      "ref": "ele"
    }), [renderIcon(), renderContent(this), renderClose()]);
  }
});

exports["default"] = _Alert;
//# sourceMappingURL=alert.js.map
