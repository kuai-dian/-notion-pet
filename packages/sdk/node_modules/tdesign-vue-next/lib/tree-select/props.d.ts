import { TdTreeSelectProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    clearable: BooleanConstructor;
    collapsedItems: {
        type: PropType<import("../common").TNode<{
            value: import("../common").TreeOptionData[];
            collapsedSelectedItems: import("../common").TreeOptionData[];
            count: number;
        }>>;
    };
    data: {
        type: PropType<import("../common").TreeOptionData[]>;
        default: () => TdTreeSelectProps['data'];
    };
    disabled: BooleanConstructor;
    empty: {
        type: PropType<string | import("../common").TNode<any>>;
        default: string;
    };
    filter: {
        type: PropType<(filterWords: string, option: import("../common").TreeOptionData) => boolean>;
    };
    filterable: BooleanConstructor;
    loading: BooleanConstructor;
    loadingText: {
        type: PropType<string | import("../common").TNode<any>>;
        default: string;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    popupProps: {
        type: PropType<import("..").TdPopupProps>;
    };
    prefixIcon: {
        type: PropType<import("../common").TNode<any>>;
    };
    showCheckAlll: BooleanConstructor;
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: TdTreeSelectProps['size']): boolean;
    };
    treeProps: {
        type: PropType<import("..").TreeProps>;
    };
    value: {
        type: PropType<import("./type").TreeSelectValue>;
    };
    defaultValue: {
        type: PropType<import("./type").TreeSelectValue>;
    };
    valueDisplay: {
        type: PropType<import("../common").TNode<{
            value: import("../common").TreeOptionData[];
            onClose: () => void;
        }>>;
    };
    valueType: {
        type: PropType<"object" | "value">;
        default: "object" | "value";
        validator(val: TdTreeSelectProps['valueType']): boolean;
    };
    onBlur: PropType<(context: {
        value: import("./type").TreeSelectValue;
        e: FocusEvent;
    }) => void>;
    onChange: PropType<(value: import("./type").TreeSelectValue, context: {
        node: import("..").TreeNodeModel<import("../common").TreeOptionData>;
    }) => void>;
    onClear: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onFocus: PropType<(context: {
        value: import("./type").TreeSelectValue;
        e: FocusEvent;
    }) => void>;
    onRemove: PropType<(options: import("./type").RemoveOptions<import("../common").TreeOptionData>) => void>;
    onSearch: PropType<(filterWords: string) => void>;
};
export default _default;
