{"version":3,"file":"tree-select.js","sources":["../../src/tree-select/tree-select.tsx"],"sourcesContent":["import { defineComponent, VNode } from 'vue';\nimport isArray from 'lodash/isArray';\nimport isEmpty from 'lodash/isEmpty';\nimport isNumber from 'lodash/isNumber';\nimport isString from 'lodash/isString';\nimport isBoolean from 'lodash/isBoolean';\nimport isObject from 'lodash/isObject';\nimport isFunction from 'lodash/isFunction';\nimport isNil from 'lodash/isNil';\nimport { CloseCircleFilledIcon } from 'tdesign-icons-vue-next';\nimport Loading from '../loading';\nimport mixins from '../utils/mixins';\nimport getConfigReceiverMixins, { TreeSelectConfig } from '../config-provider/config-receiver';\nimport { renderTNodeJSX } from '../utils/render-tnode';\n\nimport Popup, { PopupProps } from '../popup';\nimport Tag from '../tag';\nimport Tree, { TreeNodeModel, TreeNodeValue } from '../tree';\nimport Input, { InputValue } from '../input';\nimport FakeArrow from '../common-components/fake-arrow';\nimport { emitEvent } from '../utils/event';\n\nimport CLASSNAMES from '../utils/classnames';\nimport props from './props';\n\nimport { TreeSelectValue } from './type';\nimport { ClassName, TreeOptionData } from '../common';\nimport { prefix } from '../config';\n\nimport { RemoveOptions, NodeOptions } from './interface';\n\nconst name = `${prefix}-tree-select`;\n\nexport default defineComponent({\n  ...mixins(getConfigReceiverMixins<TreeSelectConfig>('treeSelect')),\n  name: 'TTreeSelect',\n  components: {\n    Tree,\n  },\n  props: {\n    ...props,\n  },\n  emits: ['change', 'clear', 'focus', 'blur', 'remove', 'search'],\n  data() {\n    return {\n      visible: false,\n      isHover: false,\n      focusing: false,\n      defaultProps: {\n        trigger: 'click',\n        placement: 'bottom-left',\n        overlayClassName: '',\n        overlayStyle: (trigger) => ({\n          width: `${trigger.offsetWidth}px`,\n          border: '1px solid #dcdcdc',\n        }),\n      } as PopupProps,\n      filterText: '',\n      filterByText: null,\n      actived: [],\n      expanded: [],\n      nodeInfo: null,\n      treeKey: 0,\n    };\n  },\n  computed: {\n    classes(): ClassName {\n      return [\n        `${prefix}-select`,\n        {\n          [CLASSNAMES.STATUS.disabled]: this.disabled,\n          [CLASSNAMES.STATUS.active]: this.visible,\n          [CLASSNAMES.SIZE[this.size]]: this.size,\n          [`${prefix}-has-prefix`]: this.prefixIconSlot,\n          [`${prefix}-select-selected`]: this.selectedSingle || !isEmpty(this.selectedMultiple),\n        },\n      ];\n    },\n    popupClass(): ClassName {\n      const { popupObject } = this;\n      return `${popupObject.overlayClassName} ${prefix}-select__dropdown narrow-scrollbar`;\n    },\n    isObjectValue(): boolean {\n      return this.valueType === 'object';\n    },\n    checked(): Array<TreeSelectValue> {\n      if (this.multiple) {\n        if (this.isObjectValue) {\n          return isArray(this.value) ? this.value.map((item) => (item as NodeOptions).value) : [];\n        }\n        return isArray(this.value) ? this.value : [];\n      }\n      return [];\n    },\n    showArrow(): boolean {\n      return (\n        !this.clearable ||\n        !this.isHover ||\n        this.disabled ||\n        (!this.multiple && !this.value && this.value !== 0) ||\n        (this.multiple && isArray(this.value) && isEmpty(this.value))\n      );\n    },\n    showLoading(): boolean {\n      return this.loading && !this.disabled;\n    },\n    showClose(): boolean {\n      return (\n        this.clearable &&\n        this.isHover &&\n        !this.disabled &&\n        ((!this.multiple && (!!this.value || this.value === 0)) ||\n          (this.multiple && !isEmpty(this.value as Array<TreeSelectValue>)))\n      );\n    },\n    showPlaceholder(): boolean {\n      if (\n        !this.showFilter &&\n        ((isString(this.value) && this.value === '' && !this.selectedSingle) ||\n          (isArray(this.value) && isEmpty(this.value)) ||\n          isNil(this.value))\n      ) {\n        return true;\n      }\n      return false;\n    },\n    showFilter(): boolean {\n      if (this.disabled) {\n        return false;\n      }\n      if (!this.multiple && this.selectedSingle && (this.filterable || isFunction(this.filter))) {\n        return this.visible;\n      }\n      return this.filterable || isFunction(this.filter);\n    },\n    showTree(): boolean {\n      return !this.loading;\n    },\n    popupObject(): PopupProps {\n      const propsObject = this.popupProps ? { ...this.defaultProps, ...(this.popupProps as any) } : this.defaultProps;\n      return propsObject;\n    },\n    selectedSingle(): string {\n      if (!this.multiple && (isString(this.value) || isNumber(this.value) || isObject(this.value))) {\n        if (this.nodeInfo) {\n          return this.nodeInfo.label;\n        }\n        return `${this.value}`;\n      }\n      return '';\n    },\n    selectedMultiple(): Array<TreeSelectValue> {\n      if (this.multiple && isArray(this.value) && !isEmpty(this.value)) {\n        return this.value;\n      }\n      return [];\n    },\n    multiLimitDisabled() {\n      if (this.multiple && this.max && isArray(this.value) && this.max <= this.value.length) {\n        return true;\n      }\n      return false;\n    },\n    filterPlaceholder(): string {\n      if (this.multiple && isArray(this.value) && !isEmpty(this.value)) {\n        return '';\n      }\n      if (!this.multiple && this.selectedSingle) {\n        return this.selectedSingle;\n      }\n      return this.placeholder;\n    },\n    loadingTextSlot(): VNode {\n      const useLocale = !this.loadingText && !this.$slots.loadingText;\n      return useLocale ? (\n        <div class={`${prefix}-select__empty`}>{this.t(this.global.loadingText)}</div>\n      ) : (\n        renderTNodeJSX(this, 'loadingText')\n      );\n    },\n    emptySlot(): VNode {\n      const useLocale = !this.empty && !this.$slots.empty;\n      return useLocale ? (\n        <div class={`${prefix}-select__empty`}>{this.t(this.global.empty)}</div>\n      ) : (\n        renderTNodeJSX(this, 'empty')\n      );\n    },\n    prefixIconSlot(): VNode {\n      return renderTNodeJSX(this, 'prefixIcon');\n    },\n    realLabel(): string {\n      const { treeProps } = this;\n      if (!isEmpty(treeProps) && !isEmpty((treeProps as any).keys)) {\n        return (treeProps as any).keys.label || 'label';\n      }\n      return 'label';\n    },\n    realValue(): string {\n      const { treeProps } = this;\n      if (!isEmpty(treeProps) && !isEmpty((treeProps as any).keys)) {\n        return (treeProps as any).keys.value || 'value';\n      }\n      return 'value';\n    },\n    tagList(): Array<TreeSelectValue> {\n      if (this.nodeInfo && isArray(this.nodeInfo)) {\n        return this.nodeInfo.map((node) => node.label);\n      }\n      return this.isObjectValue ? [] : this.selectedMultiple;\n    },\n  },\n  watch: {\n    async value() {\n      await this.changeNodeInfo();\n      if (!this.multiple) {\n        this.actived = this.nodeInfo ? [this.nodeInfo.value] : [];\n      }\n    },\n    async data() {\n      await this.changeNodeInfo();\n      this.treeRerender();\n    },\n  },\n  async mounted() {\n    if (!this.value && this.defaultValue) {\n      await this.change(this.defaultValue, null);\n    }\n    if (this.isObjectValue) {\n      this.actived = isArray(this.value)\n        ? this.value.map((item) => (item as NodeOptions).value)\n        : [(this.value as NodeOptions).value];\n    } else {\n      this.actived = isArray(this.value) ? this.value : [this.value];\n    }\n    this.changeNodeInfo();\n  },\n  methods: {\n    async popupVisibleChange(visible: boolean) {\n      await (this.visible = visible);\n      if (this.showFilter && this.visible) {\n        const searchInput = this.$refs.input as HTMLElement;\n        searchInput?.focus();\n        this.focusing = true;\n      }\n    },\n    removeTag(index: number, data: TreeOptionData, e: MouseEvent) {\n      if (this.disabled) {\n        return;\n      }\n      this.remove({ value: this.value[index], data, e });\n      isArray(this.value) && this.value.splice(index, 1);\n      this.change(this.value, null);\n    },\n    change(value: TreeSelectValue, node: TreeNodeModel<TreeOptionData>) {\n      emitEvent(this, 'change', value, { node });\n      this.changeNodeInfo();\n    },\n    clear(e: MouseEvent) {\n      e.stopPropagation();\n      const defaultValue: TreeSelectValue = this.multiple ? [] : '';\n      this.change(defaultValue, null);\n      this.actived = [];\n      this.filterText = '';\n      emitEvent(this, 'clear', { e });\n    },\n    focus(e: FocusEvent) {\n      this.focusing = true;\n      emitEvent(this, 'focus', { value: this.value, e });\n    },\n    blur(e: FocusEvent) {\n      this.focusing = false;\n      this.filterText = '';\n      emitEvent(this, 'blur', { value: this.value, e });\n    },\n    remove(options: RemoveOptions<TreeOptionData>) {\n      emitEvent(this, 'remove', options);\n    },\n    search(filterWords: string) {\n      emitEvent(this, 'search', filterWords);\n    },\n    treeNodeChange(value: Array<TreeNodeValue>, context: { node: TreeNodeModel<TreeOptionData>; e: MouseEvent }) {\n      let current: TreeSelectValue = value;\n      if (this.isObjectValue) {\n        const { tree } = this.$refs;\n        current = value.map((nodeValue) => {\n          const node = (tree as any).getItem(nodeValue);\n          return { label: node.data[this.realLabel], value: node.data[this.realValue] };\n        });\n      }\n      this.change(current, context.node);\n      this.actived = value;\n    },\n    treeNodeActive(value: Array<TreeNodeValue>, context: { node: TreeNodeModel<TreeOptionData>; e: MouseEvent }) {\n      // 多选模式屏蔽 Active 事件\n      if (this.multiple) {\n        return;\n      }\n      let current: TreeSelectValue = value;\n      if (this.isObjectValue) {\n        const { tree } = this.$refs;\n        const nodeValue = isEmpty(value) ? '' : value[0];\n        const node = (tree as any).getItem(nodeValue);\n        current = { label: node.data[this.realLabel], value: node.data[this.realValue] };\n      } else {\n        current = isEmpty(value) ? '' : value[0];\n      }\n      this.change(current, context.node);\n      this.actived = value;\n      this.visible = false;\n    },\n    treeNodeExpand(value: Array<TreeNodeValue>) {\n      this.expanded = value;\n    },\n    onInput() {\n      this.filterByText = (node: TreeNodeModel<TreeOptionData>) => {\n        if (isFunction(this.filter)) {\n          const filter: boolean | Promise<boolean> = this.filter(this.filterText, node);\n          if (isBoolean(filter)) {\n            return filter;\n          }\n        }\n        return node.data[this.realLabel].indexOf(this.filterText) >= 0;\n      };\n      this.search(this.filterText);\n    },\n    async changeNodeInfo() {\n      const { tree } = this.$refs;\n      await this.value;\n\n      if (tree && !this.multiple && this.value) {\n        const nodeValue = this.isObjectValue ? (this.value as NodeOptions).value : this.value;\n        // 数据源非空\n        if (!isEmpty(this.data)) {\n          const node = (tree as any).getItem(nodeValue);\n          this.nodeInfo = { label: node.data[this.realLabel], value: node.data[this.realValue] };\n        } else {\n          this.nodeInfo = { label: nodeValue, value: nodeValue };\n        }\n      } else if (tree && this.multiple && isArray(this.value)) {\n        this.nodeInfo = this.value.map((value) => {\n          const nodeValue = this.isObjectValue ? (value as NodeOptions).value : value;\n          // 数据源非空\n          if (!isEmpty(this.data)) {\n            const node = (tree as any).getItem(nodeValue);\n            return { label: node.data[this.realLabel], value: node.data[this.realValue] };\n          }\n          return { label: nodeValue, value: nodeValue };\n        });\n      } else {\n        this.nodeInfo = null;\n      }\n    },\n    treeRerender() {\n      this.treeKey += 1;\n    },\n  },\n  render(): VNode {\n    const { treeProps, popupObject, classes, popupClass, treeKey } = this;\n    const iconStyle = { 'font-size': this.size };\n    const treeSlots = {\n      empty: () => <>{this.emptySlot}</>,\n    };\n    const treeItem = (\n      <tree\n        ref=\"tree\"\n        v-show={this.showTree}\n        key={treeKey}\n        value={this.checked}\n        hover\n        expandAll\n        expandOnClickNode\n        data={this.data}\n        activable={!this.multiple}\n        checkable={this.multiple}\n        disabled={this.disabled || this.multiLimitDisabled}\n        empty={this.empty}\n        size={this.size}\n        filter={this.filterByText}\n        actived={this.actived}\n        expanded={this.expanded}\n        activeMultiple={this.multiple}\n        onChange={this.treeNodeChange}\n        onActive={this.treeNodeActive}\n        onExpand={this.treeNodeExpand}\n        v-slots={treeSlots}\n        {...treeProps}\n      />\n    );\n    const searchInput = (\n      <Input\n        ref=\"input\"\n        v-show={this.showFilter}\n        v-model={this.filterText}\n        class={`${prefix}-select__input`}\n        size={this.size}\n        disabled={this.disabled}\n        placeholder={this.filterPlaceholder}\n        onInput={this.onInput}\n        onBlur={(value: InputValue, context: { e: FocusEvent }) => this.blur(context.e)}\n        onFocus={(value: InputValue, context: { e: FocusEvent }) => this.focus(context.e)}\n      />\n    );\n    const tagItem = this.tagList.map((label, index) => (\n      <Tag\n        v-show={this.minCollapsedNum <= 0 || index < this.minCollapsedNum}\n        key={index}\n        size={this.size}\n        closable={!this.disabled}\n        disabled={this.disabled}\n        onClose={(context: { e: MouseEvent }) => this.removeTag(index, null, context.e)}\n      >\n        {label}\n      </Tag>\n    ));\n    const selectedSingle =\n      this.valueDisplay || this.$slots.valueDisplay ? (\n        renderTNodeJSX(this, 'valueDisplay', {\n          params: { value: this.nodeInfo || { [this.realLabel]: '', [this.realValue]: '' } },\n        })\n      ) : (\n        <span title={this.selectedSingle} class={`${prefix}-select__single`}>\n          {this.selectedSingle}\n        </span>\n      );\n    const collapsedItem =\n      (this.collapsedItems || this.$slots.collapsedItems) &&\n      this.minCollapsedNum > 0 &&\n      this.tagList.length > this.minCollapsedNum ? (\n        renderTNodeJSX(this, 'collapsedItems', {\n          params: {\n            count: this.tagList.length - this.minCollapsedNum,\n            value: this.selectedMultiple,\n            collapsedSelectedItems: this.selectedMultiple.slice(this.minCollapsedNum),\n          },\n        })\n      ) : (\n        <Tag v-show={this.minCollapsedNum > 0 && this.tagList.length > this.minCollapsedNum} size={this.size}>\n          {`+${this.tagList.length - this.minCollapsedNum}`}\n        </Tag>\n      );\n    const slots = {\n      content: () => (\n        <div>\n          <p v-show={this.showLoading} class={`${prefix}-select-loading-tips`}>\n            {this.loadingTextSlot}\n          </p>\n          {treeItem}\n        </div>\n      ),\n    };\n    return (\n      <div ref=\"treeSelect\">\n        <Popup\n          ref=\"popup\"\n          class={`${prefix}-select__popup-reference`}\n          visible={this.visible}\n          disabled={this.disabled}\n          placement={popupObject.placement}\n          trigger={popupObject.trigger}\n          overlayStyle={popupObject.overlayStyle}\n          overlayClassName={popupClass}\n          onVisibleChange={this.popupVisibleChange}\n          expandAnimation={true}\n          v-slots={slots}\n        >\n          <div class={classes} onmouseenter={() => (this.isHover = true)} onmouseleave={() => (this.isHover = false)}>\n            {this.prefixIconSlot && <span class={`${prefix}-select__left-icon`}>{this.prefixIconSlot[0]}</span>}\n            <span v-show={this.showPlaceholder} class={`${prefix}-select__placeholder`}>\n              {this.placeholder}\n            </span>\n            {tagItem}\n            {collapsedItem}\n            {!this.multiple && !this.showPlaceholder && !this.showFilter && selectedSingle}\n            {searchInput}\n            {this.showArrow && !this.showLoading && (\n              <FakeArrow\n                overlayClassName={`${prefix}-select__right-icon`}\n                overlayStyle={iconStyle}\n                isActive={this.visible && !this.disabled}\n              />\n            )}\n            <CloseCircleFilledIcon\n              v-show={this.showClose && !this.showLoading}\n              name=\"close\"\n              class={`${prefix}-select__right-icon ${prefix}-select__right-icon-clear`}\n              size={this.size}\n              onClick={({ e }) => this.clear(e)}\n            />\n            <Loading\n              v-show={this.showLoading}\n              name=\"loading\"\n              class={`${prefix}-select__right-icon ${prefix}-select__active-icon`}\n              size=\"small\"\n            />\n          </div>\n        </Popup>\n      </div>\n    );\n  },\n});\n"],"names":["defineComponent","mixins","getConfigReceiverMixins","name","components","Tree","props","emits","data","visible","isHover","focusing","defaultProps","trigger","placement","overlayClassName","overlayStyle","width","offsetWidth","border","filterText","filterByText","actived","expanded","nodeInfo","treeKey","computed","classes","prefix","CLASSNAMES","STATUS","disabled","active","SIZE","size","prefixIconSlot","selectedSingle","isEmpty","selectedMultiple","popupClass","popupObject","isObjectValue","valueType","checked","multiple","isArray","value","map","item","showArrow","clearable","showLoading","loading","showClose","showPlaceholder","showFilter","isString","isNil","filterable","isFunction","filter","showTree","propsObject","popupProps","isNumber","isObject","label","multiLimitDisabled","max","length","filterPlaceholder","placeholder","loadingTextSlot","useLocale","loadingText","$slots","t","global","renderTNodeJSX","emptySlot","empty","realLabel","treeProps","keys","realValue","tagList","node","watch","changeNodeInfo","treeRerender","mounted","defaultValue","change","methods","popupVisibleChange","searchInput","$refs","input","focus","removeTag","index","e","remove","splice","emitEvent","clear","stopPropagation","blur","options","search","filterWords","treeNodeChange","context","current","tree","nodeValue","getItem","treeNodeActive","treeNodeExpand","onInput","isBoolean","indexOf","render","iconStyle","treeSlots","treeItem","tagItem","minCollapsedNum","valueDisplay","params","collapsedItem","collapsedItems","count","collapsedSelectedItems","slice","slots","content"],"mappings":"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"}