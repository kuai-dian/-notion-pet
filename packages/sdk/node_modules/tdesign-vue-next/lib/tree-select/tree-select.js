/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var _regeneratorRuntime = require('@babel/runtime/regenerator');
var isArray = require('lodash/isArray');
var isEmpty = require('lodash/isEmpty');
var isNumber = require('lodash/isNumber');
var isString = require('lodash/isString');
var isBoolean = require('lodash/isBoolean');
var _isObject = require('lodash/isObject');
var isFunction = require('lodash/isFunction');
var isNil = require('lodash/isNil');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var loading_index = require('../loading/index.js');
var utils_mixins = require('../utils/mixins.js');
var configProvider_configReceiver = require('../config-provider/config-receiver.js');
var utils_renderTnode = require('../utils/render-tnode.js');
var popup_index = require('../popup/index.js');
var tag_index = require('../tag/index.js');
var tree_index = require('../tree/index.js');
var input_index = require('../input/index.js');
var commonComponents_fakeArrow = require('../common-components/fake-arrow.js');
var utils_event = require('../utils/event.js');
var utils_classnames = require('../utils/classnames.js');
var treeSelect_props = require('./props.js');
var config = require('../config.js');
require('../loading/loading.js');
require('@babel/runtime/helpers/slicedToArray');
require('../loading/icon/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../utils/dom.js');
require('../_chunks/dep-eb6b0f94.js');
require('../utils/easing.js');
require('../utils/transfer-dom.js');
require('../loading/props.js');
require('../utils/withInstall.js');
require('../loading/style');
require('../loading/plugin.js');
require('../config-provider/zh_CN_config.js');
require('../popup/popup.js');
require('@babel/runtime/helpers/typeof');
require('@popperjs/core');
require('../popup/props.js');
require('../utils/set-style.js');
require('../utils/map-props.js');
require('lodash/kebabCase');
require('../popup/style');
require('../utils/helper.js');
require('lodash/camelCase');
require('../tag/tag.js');
require('../tag/props.js');
require('../tag/check-tag.js');
require('../tag/check-tag-props.js');
require('../tag/style');
require('../tree/td-tree.js');
require('lodash/upperFirst');
require('lodash/pick');
require('../_common/js/tree/tree-store.js');
require('@babel/runtime/helpers/classCallCheck');
require('@babel/runtime/helpers/createClass');
require('lodash/difference');
require('lodash/isPlainObject');
require('../_common/js/tree/tree-node.js');
require('@babel/runtime/helpers/toConsumableArray');
require('lodash/uniqueId');
require('lodash/get');
require('../_common/js/tree/tree-node-model.js');
require('../_common/js/log/log.js');
require('../tree/tree-item.js');
require('../checkbox/index.js');
require('../checkbox/checkbox.js');
require('../checkbox/props.js');
require('../checkbox/group.js');
require('lodash/intersection');
require('../checkbox/checkbox-group-props.js');
require('../checkbox/style');
require('../tree/util.js');
require('../tree/constants.js');
require('../utils/ripple.js');
require('../tree/props.js');
require('../tree/style');
require('../input/addon.js');
require('../input/input.js');
require('../input/props.js');
require('../input/input-group.js');
require('../input/style');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);
var isArray__default = /*#__PURE__*/_interopDefaultLegacy(isArray);
var isEmpty__default = /*#__PURE__*/_interopDefaultLegacy(isEmpty);
var isNumber__default = /*#__PURE__*/_interopDefaultLegacy(isNumber);
var isString__default = /*#__PURE__*/_interopDefaultLegacy(isString);
var isBoolean__default = /*#__PURE__*/_interopDefaultLegacy(isBoolean);
var _isObject__default = /*#__PURE__*/_interopDefaultLegacy(_isObject);
var isFunction__default = /*#__PURE__*/_interopDefaultLegacy(isFunction);
var isNil__default = /*#__PURE__*/_interopDefaultLegacy(isNil);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
}
var _TreeSelect = vue.defineComponent(_objectSpread(_objectSpread({}, utils_mixins["default"](configProvider_configReceiver["default"]("treeSelect"))), {}, {
  name: "TTreeSelect",
  components: {
    Tree: tree_index.Tree
  },
  props: _objectSpread({}, treeSelect_props["default"]),
  emits: ["change", "clear", "focus", "blur", "remove", "search"],
  data: function data() {
    return {
      visible: false,
      isHover: false,
      focusing: false,
      defaultProps: {
        trigger: "click",
        placement: "bottom-left",
        overlayClassName: "",
        overlayStyle: function overlayStyle(trigger) {
          return {
            width: "".concat(trigger.offsetWidth, "px"),
            border: "1px solid #dcdcdc"
          };
        }
      },
      filterText: "",
      filterByText: null,
      actived: [],
      expanded: [],
      nodeInfo: null,
      treeKey: 0
    };
  },
  computed: {
    classes: function classes() {
      var _ref;

      return ["".concat(config.prefix, "-select"), (_ref = {}, _defineProperty__default["default"](_ref, utils_classnames["default"].STATUS.disabled, this.disabled), _defineProperty__default["default"](_ref, utils_classnames["default"].STATUS.active, this.visible), _defineProperty__default["default"](_ref, utils_classnames["default"].SIZE[this.size], this.size), _defineProperty__default["default"](_ref, "".concat(config.prefix, "-has-prefix"), this.prefixIconSlot), _defineProperty__default["default"](_ref, "".concat(config.prefix, "-select-selected"), this.selectedSingle || !isEmpty__default["default"](this.selectedMultiple)), _ref)];
    },
    popupClass: function popupClass() {
      var popupObject = this.popupObject;
      return "".concat(popupObject.overlayClassName, " ").concat(config.prefix, "-select__dropdown narrow-scrollbar");
    },
    isObjectValue: function isObjectValue() {
      return this.valueType === "object";
    },
    checked: function checked() {
      if (this.multiple) {
        if (this.isObjectValue) {
          return isArray__default["default"](this.value) ? this.value.map(function (item) {
            return item.value;
          }) : [];
        }

        return isArray__default["default"](this.value) ? this.value : [];
      }

      return [];
    },
    showArrow: function showArrow() {
      return !this.clearable || !this.isHover || this.disabled || !this.multiple && !this.value && this.value !== 0 || this.multiple && isArray__default["default"](this.value) && isEmpty__default["default"](this.value);
    },
    showLoading: function showLoading() {
      return this.loading && !this.disabled;
    },
    showClose: function showClose() {
      return this.clearable && this.isHover && !this.disabled && (!this.multiple && (!!this.value || this.value === 0) || this.multiple && !isEmpty__default["default"](this.value));
    },
    showPlaceholder: function showPlaceholder() {
      if (!this.showFilter && (isString__default["default"](this.value) && this.value === "" && !this.selectedSingle || isArray__default["default"](this.value) && isEmpty__default["default"](this.value) || isNil__default["default"](this.value))) {
        return true;
      }

      return false;
    },
    showFilter: function showFilter() {
      if (this.disabled) {
        return false;
      }

      if (!this.multiple && this.selectedSingle && (this.filterable || isFunction__default["default"](this.filter))) {
        return this.visible;
      }

      return this.filterable || isFunction__default["default"](this.filter);
    },
    showTree: function showTree() {
      return !this.loading;
    },
    popupObject: function popupObject() {
      var propsObject = this.popupProps ? _objectSpread(_objectSpread({}, this.defaultProps), this.popupProps) : this.defaultProps;
      return propsObject;
    },
    selectedSingle: function selectedSingle() {
      if (!this.multiple && (isString__default["default"](this.value) || isNumber__default["default"](this.value) || _isObject__default["default"](this.value))) {
        if (this.nodeInfo) {
          return this.nodeInfo.label;
        }

        return "".concat(this.value);
      }

      return "";
    },
    selectedMultiple: function selectedMultiple() {
      if (this.multiple && isArray__default["default"](this.value) && !isEmpty__default["default"](this.value)) {
        return this.value;
      }

      return [];
    },
    multiLimitDisabled: function multiLimitDisabled() {
      if (this.multiple && this.max && isArray__default["default"](this.value) && this.max <= this.value.length) {
        return true;
      }

      return false;
    },
    filterPlaceholder: function filterPlaceholder() {
      if (this.multiple && isArray__default["default"](this.value) && !isEmpty__default["default"](this.value)) {
        return "";
      }

      if (!this.multiple && this.selectedSingle) {
        return this.selectedSingle;
      }

      return this.placeholder;
    },
    loadingTextSlot: function loadingTextSlot() {
      var useLocale = !this.loadingText && !this.$slots.loadingText;
      return useLocale ? vue.createVNode("div", {
        "class": "".concat(config.prefix, "-select__empty")
      }, [this.t(this.global.loadingText)]) : utils_renderTnode.renderTNodeJSX(this, "loadingText");
    },
    emptySlot: function emptySlot() {
      var useLocale = !this.empty && !this.$slots.empty;
      return useLocale ? vue.createVNode("div", {
        "class": "".concat(config.prefix, "-select__empty")
      }, [this.t(this.global.empty)]) : utils_renderTnode.renderTNodeJSX(this, "empty");
    },
    prefixIconSlot: function prefixIconSlot() {
      return utils_renderTnode.renderTNodeJSX(this, "prefixIcon");
    },
    realLabel: function realLabel() {
      var treeProps = this.treeProps;

      if (!isEmpty__default["default"](treeProps) && !isEmpty__default["default"](treeProps.keys)) {
        return treeProps.keys.label || "label";
      }

      return "label";
    },
    realValue: function realValue() {
      var treeProps = this.treeProps;

      if (!isEmpty__default["default"](treeProps) && !isEmpty__default["default"](treeProps.keys)) {
        return treeProps.keys.value || "value";
      }

      return "value";
    },
    tagList: function tagList() {
      if (this.nodeInfo && isArray__default["default"](this.nodeInfo)) {
        return this.nodeInfo.map(function (node) {
          return node.label;
        });
      }

      return this.isObjectValue ? [] : this.selectedMultiple;
    }
  },
  watch: {
    value: function value() {
      var _this = this;

      return _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee() {
        return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _this.changeNodeInfo();

              case 2:
                if (!_this.multiple) {
                  _this.actived = _this.nodeInfo ? [_this.nodeInfo.value] : [];
                }

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    data: function data() {
      var _this2 = this;

      return _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2() {
        return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _this2.changeNodeInfo();

              case 2:
                _this2.treeRerender();

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))();
    }
  },
  mounted: function mounted() {
    var _this3 = this;

    return _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee3() {
      return _regeneratorRuntime__default["default"].wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!(!_this3.value && _this3.defaultValue)) {
                _context3.next = 3;
                break;
              }

              _context3.next = 3;
              return _this3.change(_this3.defaultValue, null);

            case 3:
              if (_this3.isObjectValue) {
                _this3.actived = isArray__default["default"](_this3.value) ? _this3.value.map(function (item) {
                  return item.value;
                }) : [_this3.value.value];
              } else {
                _this3.actived = isArray__default["default"](_this3.value) ? _this3.value : [_this3.value];
              }

              _this3.changeNodeInfo();

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }))();
  },
  methods: {
    popupVisibleChange: function popupVisibleChange(visible) {
      var _this4 = this;

      return _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee4() {
        var searchInput;
        return _regeneratorRuntime__default["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return _this4.visible = visible;

              case 2:
                if (_this4.showFilter && _this4.visible) {
                  searchInput = _this4.$refs.input;
                  searchInput === null || searchInput === void 0 ? void 0 : searchInput.focus();
                  _this4.focusing = true;
                }

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }))();
    },
    removeTag: function removeTag(index, data, e) {
      if (this.disabled) {
        return;
      }

      this.remove({
        value: this.value[index],
        data: data,
        e: e
      });
      isArray__default["default"](this.value) && this.value.splice(index, 1);
      this.change(this.value, null);
    },
    change: function change(value, node) {
      utils_event.emitEvent(this, "change", value, {
        node: node
      });
      this.changeNodeInfo();
    },
    clear: function clear(e) {
      e.stopPropagation();
      var defaultValue = this.multiple ? [] : "";
      this.change(defaultValue, null);
      this.actived = [];
      this.filterText = "";
      utils_event.emitEvent(this, "clear", {
        e: e
      });
    },
    focus: function focus(e) {
      this.focusing = true;
      utils_event.emitEvent(this, "focus", {
        value: this.value,
        e: e
      });
    },
    blur: function blur(e) {
      this.focusing = false;
      this.filterText = "";
      utils_event.emitEvent(this, "blur", {
        value: this.value,
        e: e
      });
    },
    remove: function remove(options) {
      utils_event.emitEvent(this, "remove", options);
    },
    search: function search(filterWords) {
      utils_event.emitEvent(this, "search", filterWords);
    },
    treeNodeChange: function treeNodeChange(value, context) {
      var _this5 = this;

      var current = value;

      if (this.isObjectValue) {
        var tree = this.$refs.tree;
        current = value.map(function (nodeValue) {
          var node = tree.getItem(nodeValue);
          return {
            label: node.data[_this5.realLabel],
            value: node.data[_this5.realValue]
          };
        });
      }

      this.change(current, context.node);
      this.actived = value;
    },
    treeNodeActive: function treeNodeActive(value, context) {
      if (this.multiple) {
        return;
      }

      var current = value;

      if (this.isObjectValue) {
        var tree = this.$refs.tree;
        var nodeValue = isEmpty__default["default"](value) ? "" : value[0];
        var node = tree.getItem(nodeValue);
        current = {
          label: node.data[this.realLabel],
          value: node.data[this.realValue]
        };
      } else {
        current = isEmpty__default["default"](value) ? "" : value[0];
      }

      this.change(current, context.node);
      this.actived = value;
      this.visible = false;
    },
    treeNodeExpand: function treeNodeExpand(value) {
      this.expanded = value;
    },
    onInput: function onInput() {
      var _this6 = this;

      this.filterByText = function (node) {
        if (isFunction__default["default"](_this6.filter)) {
          var filter = _this6.filter(_this6.filterText, node);

          if (isBoolean__default["default"](filter)) {
            return filter;
          }
        }

        return node.data[_this6.realLabel].indexOf(_this6.filterText) >= 0;
      };

      this.search(this.filterText);
    },
    changeNodeInfo: function changeNodeInfo() {
      var _this7 = this;

      return _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee5() {
        var tree, nodeValue, node;
        return _regeneratorRuntime__default["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                tree = _this7.$refs.tree;
                _context5.next = 3;
                return _this7.value;

              case 3:
                if (tree && !_this7.multiple && _this7.value) {
                  nodeValue = _this7.isObjectValue ? _this7.value.value : _this7.value;

                  if (!isEmpty__default["default"](_this7.data)) {
                    node = tree.getItem(nodeValue);
                    _this7.nodeInfo = {
                      label: node.data[_this7.realLabel],
                      value: node.data[_this7.realValue]
                    };
                  } else {
                    _this7.nodeInfo = {
                      label: nodeValue,
                      value: nodeValue
                    };
                  }
                } else if (tree && _this7.multiple && isArray__default["default"](_this7.value)) {
                  _this7.nodeInfo = _this7.value.map(function (value) {
                    var nodeValue = _this7.isObjectValue ? value.value : value;

                    if (!isEmpty__default["default"](_this7.data)) {
                      var _node = tree.getItem(nodeValue);

                      return {
                        label: _node.data[_this7.realLabel],
                        value: _node.data[_this7.realValue]
                      };
                    }

                    return {
                      label: nodeValue,
                      value: nodeValue
                    };
                  });
                } else {
                  _this7.nodeInfo = null;
                }

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }))();
    },
    treeRerender: function treeRerender() {
      this.treeKey += 1;
    }
  },
  render: function render() {
    var _this8 = this,
        _ref2;

    var treeProps = this.treeProps,
        popupObject = this.popupObject,
        classes = this.classes,
        popupClass = this.popupClass,
        treeKey = this.treeKey;
    var iconStyle = {
      "font-size": this.size
    };
    var treeSlots = {
      empty: function empty() {
        return vue.createVNode(vue.Fragment, null, [_this8.emptySlot]);
      }
    };

    var treeItem = vue.withDirectives(vue.createVNode(vue.resolveComponent("tree"), vue.mergeProps({
      "ref": "tree",
      "key": treeKey,
      "value": this.checked,
      "hover": true,
      "expandAll": true,
      "expandOnClickNode": true,
      "data": this.data,
      "activable": !this.multiple,
      "checkable": this.multiple,
      "disabled": this.disabled || this.multiLimitDisabled,
      "empty": this.empty,
      "size": this.size,
      "filter": this.filterByText,
      "actived": this.actived,
      "expanded": this.expanded,
      "activeMultiple": this.multiple,
      "onChange": this.treeNodeChange,
      "onActive": this.treeNodeActive,
      "onExpand": this.treeNodeExpand
    }, treeProps), treeSlots), [[vue.vShow, this.showTree]]);

    var searchInput = vue.withDirectives(vue.createVNode(input_index.Input, {
      "ref": "input",
      "modelValue": _this8.filterText,
      "onUpdate:modelValue": function onUpdateModelValue($event) {
        return _this8.filterText = $event;
      },
      "class": "".concat(config.prefix, "-select__input"),
      "size": this.size,
      "disabled": this.disabled,
      "placeholder": this.filterPlaceholder,
      "onInput": this.onInput,
      "onBlur": function onBlur(value, context) {
        return _this8.blur(context.e);
      },
      "onFocus": function onFocus(value, context) {
        return _this8.focus(context.e);
      }
    }, null), [[vue.vShow, this.showFilter]]);

    var tagItem = this.tagList.map(function (label, index) {
      return vue.withDirectives(vue.createVNode(tag_index.Tag, {
        "key": index,
        "size": _this8.size,
        "closable": !_this8.disabled,
        "disabled": _this8.disabled,
        "onClose": function onClose(context) {
          return _this8.removeTag(index, null, context.e);
        }
      }, _isSlot(label) ? label : {
        "default": function _default() {
          return [label];
        }
      }), [[vue.vShow, _this8.minCollapsedNum <= 0 || index < _this8.minCollapsedNum]]);
    });
    var selectedSingle = this.valueDisplay || this.$slots.valueDisplay ? utils_renderTnode.renderTNodeJSX(this, "valueDisplay", {
      params: {
        value: this.nodeInfo || (_ref2 = {}, _defineProperty__default["default"](_ref2, this.realLabel, ""), _defineProperty__default["default"](_ref2, this.realValue, ""), _ref2)
      }
    }) : vue.createVNode("span", {
      "title": this.selectedSingle,
      "class": "".concat(config.prefix, "-select__single")
    }, [this.selectedSingle]);
    var collapsedItem = (this.collapsedItems || this.$slots.collapsedItems) && this.minCollapsedNum > 0 && this.tagList.length > this.minCollapsedNum ? utils_renderTnode.renderTNodeJSX(this, "collapsedItems", {
      params: {
        count: this.tagList.length - this.minCollapsedNum,
        value: this.selectedMultiple,
        collapsedSelectedItems: this.selectedMultiple.slice(this.minCollapsedNum)
      }
    }) : vue.withDirectives(vue.createVNode(tag_index.Tag, {
      "size": this.size
    }, {
      "default": function _default() {
        return ["+".concat(_this8.tagList.length - _this8.minCollapsedNum)];
      }
    }), [[vue.vShow, this.minCollapsedNum > 0 && this.tagList.length > this.minCollapsedNum]]);
    var slots = {
      content: function content() {
        return vue.createVNode("div", null, [vue.withDirectives(vue.createVNode("p", {
          "class": "".concat(config.prefix, "-select-loading-tips")
        }, [_this8.loadingTextSlot]), [[vue.vShow, _this8.showLoading]]), treeItem]);
      }
    };
    return vue.createVNode("div", {
      "ref": "treeSelect"
    }, [vue.createVNode(popup_index.Popup, {
      "ref": "popup",
      "class": "".concat(config.prefix, "-select__popup-reference"),
      "visible": this.visible,
      "disabled": this.disabled,
      "placement": popupObject.placement,
      "trigger": popupObject.trigger,
      "overlayStyle": popupObject.overlayStyle,
      "overlayClassName": popupClass,
      "onVisibleChange": this.popupVisibleChange,
      "expandAnimation": true
    }, _objectSpread({
      "default": function _default() {
        return [vue.createVNode("div", {
          "class": classes,
          "onmouseenter": function onmouseenter() {
            return _this8.isHover = true;
          },
          "onmouseleave": function onmouseleave() {
            return _this8.isHover = false;
          }
        }, [_this8.prefixIconSlot && vue.createVNode("span", {
          "class": "".concat(config.prefix, "-select__left-icon")
        }, [_this8.prefixIconSlot[0]]), vue.withDirectives(vue.createVNode("span", {
          "class": "".concat(config.prefix, "-select__placeholder")
        }, [_this8.placeholder]), [[vue.vShow, _this8.showPlaceholder]]), tagItem, collapsedItem, !_this8.multiple && !_this8.showPlaceholder && !_this8.showFilter && selectedSingle, searchInput, _this8.showArrow && !_this8.showLoading && vue.createVNode(commonComponents_fakeArrow["default"], {
          "overlayClassName": "".concat(config.prefix, "-select__right-icon"),
          "overlayStyle": iconStyle,
          "isActive": _this8.visible && !_this8.disabled
        }, null), vue.withDirectives(vue.createVNode(tdesignIconsVueNext.CloseCircleFilledIcon, {
          "name": "close",
          "class": "".concat(config.prefix, "-select__right-icon ").concat(config.prefix, "-select__right-icon-clear"),
          "size": _this8.size,
          "onClick": function onClick(_ref3) {
            var e = _ref3.e;
            return _this8.clear(e);
          }
        }, null), [[vue.vShow, _this8.showClose && !_this8.showLoading]]), vue.withDirectives(vue.createVNode(loading_index.Loading, {
          "name": "loading",
          "class": "".concat(config.prefix, "-select__right-icon ").concat(config.prefix, "-select__active-icon"),
          "size": "small"
        }, null), [[vue.vShow, _this8.showLoading]])])];
      }
    }, slots))]);
  }
}));

exports["default"] = _TreeSelect;
//# sourceMappingURL=tree-select.js.map
