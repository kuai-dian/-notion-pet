import { PropType } from 'vue';
import { ClassName } from '../../common';
import { TreeNode } from '../interface';
declare const _default: import("vue").DefineComponent<{
    cascaderContext: {
        type: PropType<import("../interface").CascaderContextType>;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    listeners: {
        type: PropType<import("../interface").ListenersType>;
    };
    collapsedItems: {
        type: PropType<import("../../common").TNode<{
            value: import("../../common").TreeOptionData[];
            collapsedSelectedItems: import("../../common").TreeOptionData[];
            count: number;
        }>>;
    };
}, unknown, {
    isHover: boolean;
}, {
    closeIconClass(): ClassName;
    fakeArrowIconClass(): ClassName;
    cascaderInnerClasses(): ClassName;
    closeShow(): boolean;
    singleContent(): string;
    multipleContent(): TreeNode[];
    showPlaceholder(): boolean;
}, {
    getInputWidth(): void;
    outerClickListenerFn(event: MouseEvent | TouchEvent): void;
    renderContent(): JSX.Element;
    InnerContent(): JSX.Element;
    renderSuffixIcon(): JSX.Element;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "change"[], "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    cascaderContext: {
        type: PropType<import("../interface").CascaderContextType>;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    listeners: {
        type: PropType<import("../interface").ListenersType>;
    };
    collapsedItems: {
        type: PropType<import("../../common").TNode<{
            value: import("../../common").TreeOptionData[];
            collapsedSelectedItems: import("../../common").TreeOptionData[];
            count: number;
        }>>;
    };
}>> & {
    onChange?: (...args: any[]) => any;
}, {
    placeholder: string;
}>;
export default _default;
