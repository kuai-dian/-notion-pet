/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var config = require('../../config.js');
var utils_renderTnode = require('../../utils/render-tnode.js');
var configProvider_configReceiver = require('../../config-provider/config-receiver.js');
var utils_mixins = require('../../utils/mixins.js');
var cascader_utils_panel = require('../utils/panel.js');
var cascader_components_Item = require('./Item.js');
var cascader_props = require('../props.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isFunction');
require('lodash/isObject');
require('../../config-provider/zh_CN_config.js');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/isNumber');
require('tdesign-icons-vue-next');
require('../../utils/classnames.js');
require('../../utils/ripple.js');
require('../../utils/set-style.js');
require('../utils/helper.js');
require('@babel/runtime/helpers/typeof');
require('../utils/item.js');
require('@babel/runtime/helpers/toConsumableArray');
require('../../checkbox/index.js');
require('../../checkbox/checkbox.js');
require('../../checkbox/props.js');
require('../../utils/event.js');
require('../../utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('lodash/camelCase');
require('../../checkbox/group.js');
require('lodash/intersection');
require('../../checkbox/checkbox-group-props.js');
require('../../utils/map-props.js');
require('lodash/kebabCase');
require('../../utils/withInstall.js');
require('../../checkbox/style');
require('../../tooltip/index.js');
require('../../tooltip/tooltip.js');
require('../../tooltip/props.js');
require('../../popup/props.js');
require('../../popup/index.js');
require('../../popup/popup.js');
require('@popperjs/core');
require('../../_chunks/dep-eb6b0f94.js');
require('../../utils/dom.js');
require('../../utils/easing.js');
require('../../popup/style');
require('../../tooltip/style');
require('../../loading/index.js');
require('../../loading/loading.js');
require('../../loading/icon/gradient.js');
require('../../_common/js/loading/circle-adapter.js');
require('../../_common/js/utils/set-style.js');
require('../../_common/js/utils/helper.js');
require('../../utils/transfer-dom.js');
require('../../loading/props.js');
require('../../loading/style');
require('../../loading/plugin.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(config.prefix, "-cascader");
var Panel = vue.defineComponent(_objectSpread(_objectSpread({}, utils_mixins["default"](configProvider_configReceiver["default"]("cascader"))), {}, {
  name: "".concat(name, "-panel"),
  props: {
    empty: cascader_props["default"].empty,
    trigger: cascader_props["default"].trigger,
    onChange: cascader_props["default"].onChange,
    cascaderContext: {
      type: Object
    }
  },
  emits: ["change"],
  computed: {
    panels: function panels() {
      return cascader_utils_panel.getPanels(this.cascaderContext.treeNodes);
    }
  },
  render: function render() {
    var _this = this;

    var _this$cascaderContext = this.cascaderContext,
        filterActive = _this$cascaderContext.filterActive,
        treeNodes = _this$cascaderContext.treeNodes,
        inputWidth = _this$cascaderContext.inputWidth,
        cascaderContext = this.cascaderContext,
        panels = this.panels;

    var handleExpand = function handleExpand(ctx, trigger) {
      var node = ctx.node;
      var propsTrigger = _this.trigger,
          cascaderContext2 = _this.cascaderContext;
      cascader_utils_panel.expendClickEffect(propsTrigger, trigger, node, cascaderContext2);
    };

    var handleChange = function handleChange(ctx) {
      var node = ctx.node;
      var cascaderContext2 = _this.cascaderContext;
      cascader_utils_panel.valueChangeEffect(node, cascaderContext2);
    };

    var renderEmpty = utils_renderTnode.renderTNodeJSXDefault(this, "empty", vue.createVNode("div", {
      "class": "".concat(name, "__panel--empty")
    }, [this.t(this.global.empty)]));

    var renderItem = function renderItem(node) {
      return vue.createVNode(cascader_components_Item["default"], {
        "key": node.value,
        "node": node,
        "cascaderContext": cascaderContext,
        "onClick": function onClick(ctx) {
          handleExpand(ctx, "click");
        },
        "onMouseenter": function onMouseenter(ctx) {
          handleExpand(ctx, "hover");
        },
        "onChange": handleChange
      }, null);
    };

    var panelsContainer = panels.map(function (panel, index) {
      return vue.createVNode("ul", {
        "class": ["".concat(name, "__menu"), "narrow-scrollbar", _defineProperty__default["default"]({}, "".concat(name, "__menu--segment"), index !== panels.length - 1)],
        "key": index
      }, [panel.map(function (node) {
        return renderItem(node);
      })]);
    });

    var filterPanelsContainer = vue.createVNode("ul", {
      "class": ["".concat(name, "__menu"), "narrow-scrollbar", "".concat(name, "__menu--segment"), "".concat(name, "__menu--filter")]
    }, [treeNodes.map(function (node) {
      return renderItem(node);
    })]);

    var renderPanels = filterActive ? filterPanelsContainer : panelsContainer;
    return vue.createVNode("div", {
      "class": ["".concat(name, "__panel"), _defineProperty__default["default"]({}, "".concat(name, "--normal"), panels.length)],
      "style": {
        width: panels.length === 0 ? "".concat(inputWidth, "px") : null
      }
    }, [panels && panels.length ? renderPanels : renderEmpty]);
  }
}));

exports["default"] = Panel;
//# sourceMappingURL=Panel.js.map
