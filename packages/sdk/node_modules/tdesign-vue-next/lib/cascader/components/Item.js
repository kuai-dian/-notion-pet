/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var config = require('../../config.js');
var utils_classnames = require('../../utils/classnames.js');
var utils_ripple = require('../../utils/ripple.js');
var cascader_utils_helper = require('../utils/helper.js');
var cascader_utils_item = require('../utils/item.js');
var checkbox_index = require('../../checkbox/index.js');
var tooltip_index = require('../../tooltip/index.js');
var loading_index = require('../../loading/index.js');
require('../../utils/set-style.js');
require('@babel/runtime/helpers/typeof');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/defineProperty');
require('../../checkbox/checkbox.js');
require('../../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isFunction');
require('lodash/isObject');
require('../../checkbox/props.js');
require('../../utils/event.js');
require('../../utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/camelCase');
require('../../checkbox/group.js');
require('lodash/intersection');
require('../../checkbox/checkbox-group-props.js');
require('../../utils/map-props.js');
require('lodash/kebabCase');
require('../../utils/withInstall.js');
require('../../checkbox/style');
require('../../tooltip/tooltip.js');
require('../../tooltip/props.js');
require('../../popup/props.js');
require('../../popup/index.js');
require('../../popup/popup.js');
require('@popperjs/core');
require('../../_chunks/dep-eb6b0f94.js');
require('../../utils/dom.js');
require('../../utils/easing.js');
require('../../popup/style');
require('../../tooltip/style');
require('../../loading/loading.js');
require('../../loading/icon/gradient.js');
require('../../_common/js/loading/circle-adapter.js');
require('../../_common/js/utils/set-style.js');
require('../../_common/js/utils/helper.js');
require('../../utils/transfer-dom.js');
require('../../loading/props.js');
require('../../loading/style');
require('../../loading/plugin.js');

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
}

var name = "".concat(config.prefix, "-cascader-item");
var ComponentClassName = "".concat(config.prefix, "-cascader__item");
var Item = vue.defineComponent({
  name: name,
  directives: {
    ripple: utils_ripple["default"]
  },
  props: {
    node: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    cascaderContext: {
      type: Object
    }
  },
  emits: ["change", "click", "mouseenter"],
  computed: {
    itemClass: function itemClass() {
      return cascader_utils_item.getCascaderItemClass(config.prefix, this.node, utils_classnames["default"], this.cascaderContext);
    },
    iconClass: function iconClass() {
      return cascader_utils_item.getCascaderItemIconClass(config.prefix, this.node, utils_classnames["default"], this.cascaderContext);
    }
  },
  render: function render() {
    var _this = this;

    var node = this.node,
        itemClass = this.itemClass,
        iconClass = this.iconClass,
        cascaderContext = this.cascaderContext;

    var handleClick = function handleClick(e) {
      e.stopPropagation();
      var ctx = {
        e: e,
        node: node
      };

      _this.$emit("click", ctx);
    };

    var handleChange = function handleChange(e) {
      var ctx = {
        e: e,
        node: node
      };

      _this.$emit("change", ctx);
    };

    var handleMouseenter = function handleMouseenter(e) {
      e.stopPropagation();
      var ctx = {
        e: e,
        node: node
      };

      _this.$emit("mouseenter", ctx);
    };

    function RenderLabelInner(node2, cascaderContext2) {
      var filterActive = cascaderContext2.filterActive,
          inputVal = cascaderContext2.inputVal;
      var labelText = filterActive ? cascader_utils_helper.getFullPathLabel(node2) : node2.label;

      if (filterActive) {
        var texts = labelText.split(inputVal);
        var doms = [];

        for (var index = 0; index < texts.length; index++) {
          doms.push(vue.createVNode("span", {
            "key": index
          }, [texts[index]]));
          if (index === texts.length - 1) break;
          doms.push(vue.createVNode("span", {
            "key": "".concat(index, "filter"),
            "className": "".concat(name, "-label--filter")
          }, [inputVal]));
        }

        return doms;
      }

      return labelText;
    }

    function RenderLabelContent(node2, cascaderContext2) {
      var label = RenderLabelInner(node2, cascaderContext2);
      var isEllipsis = cascader_utils_item.getLabelIsEllipsis(node2, cascaderContext2.size);

      if (isEllipsis) {
        return vue.createVNode("span", {
          "class": "".concat(ComponentClassName, "-label"),
          "role": "label"
        }, [label, vue.createVNode("div", {
          "class": "".concat(ComponentClassName, "-label--ellipsis")
        }, [vue.createVNode(tooltip_index.Tooltip, {
          "content": node2.label,
          "placement": "top-left"
        }, null)])]);
      }

      return vue.createVNode("span", {
        "class": ["".concat(ComponentClassName, "-label")],
        "role": "label"
      }, [label]);
    }

    function RenderCheckBox(node2, cascaderContext2, handleChange2) {
      var checkProps = cascaderContext2.checkProps,
          value = cascaderContext2.value,
          max = cascaderContext2.max,
          size = cascaderContext2.size;
      var label = RenderLabelInner(node2, cascaderContext2);
      return vue.createVNode(checkbox_index.Checkbox, vue.mergeProps({
        "checked": node2.checked,
        "indeterminate": node2.indeterminate,
        "disabled": node2.isDisabled() || value.length >= max && max !== 0,
        "name": node2.value,
        "size": size,
        "onChange": handleChange2
      }, checkProps), _isSlot(label) ? label : {
        "default": function _default() {
          return [label];
        }
      });
    }

    return vue.withDirectives(vue.createVNode("li", {
      "class": itemClass,
      "onClick": handleClick,
      "onMouseenter": handleMouseenter
    }, [cascaderContext.multiple ? RenderCheckBox(node, cascaderContext, handleChange) : RenderLabelContent(node, cascaderContext), node.children && (node.loading ? vue.createVNode(loading_index.Loading, {
      "class": iconClass,
      "size": "small"
    }, null) : vue.createVNode(tdesignIconsVueNext.ChevronRightIcon, {
      "class": iconClass
    }, null))]), [[vue.resolveDirective("ripple")]]);
  }
});

exports["default"] = Item;
//# sourceMappingURL=Item.js.map
