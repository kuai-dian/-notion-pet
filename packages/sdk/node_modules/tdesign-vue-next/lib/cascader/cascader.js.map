{"version":3,"file":"cascader.js","sources":["../../src/cascader/cascader.tsx"],"sourcesContent":["import { defineComponent, VNode, Transition } from 'vue';\n\n// utils\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nimport { prefix } from '../config';\nimport TreeStore from '../_common/js/tree/tree-store';\nimport { emitEvent } from '../utils/event';\nimport { getPropsApiByEvent } from '../utils/helper';\nimport { getTreeValue, getValue } from './utils/helper';\n\n// common logic\nimport { treeNodesEffect, treeStoreExpendEffect } from './utils/cascader';\n\n// component\nimport Panel from './components/Panel';\nimport Popup, { PopupProps } from '../popup/index';\nimport InputContent from './components/InputContent';\n\n// types\nimport {\n  TreeNode,\n  ListenersType,\n  TreeNodeValue,\n  EVENT_NAME_WITH_KEBAB,\n  CascaderContextType,\n  TdCascaderProps,\n  TreeOptionData,\n  TreeNodeModel,\n} from './interface';\nimport props from './props';\nimport { CascaderChangeSource, CascaderValue, CascaderChangeContext } from './type';\n\nconst name = `${prefix}-cascader`;\n\nexport default defineComponent({\n  name: 'TCascader',\n\n  components: {\n    Popup,\n    Panel,\n    Transition,\n    InputContent,\n  },\n\n  props: {\n    ...props,\n  },\n\n  emits: ['change', 'remove', 'blur', 'focus'],\n\n  data() {\n    return {\n      inputWidth: 0,\n      visible: false,\n      treeStore: null,\n      inputVal: '',\n      scopeVal: this.defaultValue as any,\n      treeNodes: [],\n      filterActive: false,\n      expend: [] as TreeNodeValue[],\n    };\n  },\n\n  computed: {\n    stateFns() {\n      return {\n        setTreeNodes: (nodes: TreeNode[]) => {\n          this.treeNodes = nodes;\n        },\n        setValue: (val: CascaderValue, source: CascaderChangeSource, node?: TreeNodeModel) => {\n          if (isEqual(val, this.scopeVal)) return;\n          emitEvent<Parameters<TdCascaderProps['onChange']>>(this, 'change', val, {\n            source,\n            node,\n          } as CascaderChangeContext<TreeOptionData>);\n        },\n        setVisible: (val: boolean) => {\n          this.visible = val;\n        },\n        setFilterActive: (val: boolean) => {\n          this.filterActive = val;\n        },\n        setInputVal: (val: string) => {\n          this.inputVal = val;\n        },\n        setExpend: (val: TreeNodeValue[]) => {\n          this.expend = val;\n        },\n        setInputWidth: (val: number) => {\n          this.inputWidth = val;\n        },\n      };\n    },\n    cascaderContext(): CascaderContextType {\n      const value = this.scopeVal as TdCascaderProps['value'];\n      const {\n        size = 'medium',\n        checkStrictly = false,\n        lazy = true,\n        multiple = false,\n        filterable = false,\n        clearable = false,\n        checkProps = {},\n        max = 0,\n        disabled,\n        showAllLevels = true,\n        minCollapsedNum = 0,\n        loading,\n        valueType = 'single',\n      } = this;\n\n      const { visible, treeStore, treeNodes, filterActive, inputVal, inputWidth } = this;\n\n      return {\n        valueType,\n        loading,\n        size,\n        disabled,\n        checkStrictly,\n        lazy,\n        multiple,\n        filterable,\n        checkProps,\n        clearable,\n        showAllLevels,\n        max,\n        value,\n        visible,\n        treeStore,\n        treeNodes,\n        filterActive,\n        inputVal,\n        inputWidth,\n        minCollapsedNum,\n        ...this.stateFns,\n      };\n    },\n  },\n\n  watch: {\n    // 处理外部传进来的value\n    value: {\n      handler(val) {\n        const { valueType, multiple } = this;\n        if (isEqual(val, this.scopeVal)) return;\n        this.scopeVal = getValue(val, valueType, multiple);\n        this.updateExpend();\n        this.updatedTreeNodes();\n      },\n    },\n    inputVal() {\n      const {\n        cascaderContext: { value, setExpend },\n      } = this;\n      if (!getTreeValue(value).length) {\n        setExpend([]);\n      }\n      this.updatedTreeNodes();\n    },\n    filterActive() {\n      const {\n        cascaderContext: { filterActive },\n      } = this;\n      if (!filterActive) {\n        this.inputVal = '';\n      }\n    },\n  },\n\n  mounted() {\n    const {\n      value,\n      multiple,\n      cascaderContext: { setValue, showAllLevels },\n      valueType,\n    } = this;\n    if ((multiple && !Array.isArray(value)) || (!multiple && Array.isArray(value) && !showAllLevels)) {\n      const val: CascaderValue = multiple ? [] : '';\n      setValue(val, 'invalid-value');\n      console.warn('TDesign Cascader Warn:', 'cascader props value invalid, v-model automatic calibration');\n    }\n\n    if (!isEmpty(value)) {\n      this.scopeVal = getValue(value, valueType, multiple);\n    }\n\n    this.init();\n    ['checkStrictly', 'disabled', 'keys', 'lazy', 'load', 'options', 'valueMode'].forEach((key) => {\n      this.$watch(key, () => {\n        this.init();\n      });\n    });\n  },\n\n  methods: {\n    // 创建单个 cascader 节点\n    init() {\n      const { disabled, keys, checkStrictly = false, lazy = true, load, options, valueMode = 'onlyLeaf' } = this;\n      if (!options || (Array.isArray(options) && !options.length)) return;\n\n      this.treeStore = new TreeStore({\n        keys: keys || {},\n        checkable: true,\n        checkStrictly,\n        expandMutex: true,\n        expandParent: true,\n        disabled,\n        load,\n        lazy,\n        valueMode,\n        onLoad: () => {\n          setTimeout(() => {\n            this.treeStore.refreshNodes();\n            this.updatedTreeNodes();\n          }, 0);\n        },\n      });\n      this.treeStore.append(options);\n\n      // 初始化状态\n      this.$nextTick(() => {\n        this.updateExpend();\n        this.updatedTreeNodes();\n      });\n    },\n    // 更新treeNodes\n    updatedTreeNodes() {\n      const {\n        cascaderContext: { inputVal, treeStore, setTreeNodes },\n      } = this;\n      treeNodesEffect(inputVal, treeStore, setTreeNodes);\n    },\n    // 更新节点展开状态\n    updateExpend() {\n      const {\n        cascaderContext: { treeStore, value },\n        expend,\n      } = this;\n      if (!treeStore) return;\n      treeStoreExpendEffect(treeStore, value, expend);\n      treeStore.replaceChecked(getTreeValue(value));\n    },\n  },\n  render(): VNode {\n    const { visible, trigger, empty, $attrs, cascaderContext, $slots, placeholder, collapsedItems } = this;\n\n    const popupProps = this.popupProps as PopupProps;\n\n    const listeners: ListenersType = {};\n\n    EVENT_NAME_WITH_KEBAB.forEach((eventName) => {\n      listeners[getPropsApiByEvent(eventName)] = (...args: any[]) => {\n        emitEvent(this, eventName, ...args);\n      };\n    });\n\n    return (\n      <Popup\n        class={`${name}__popup`}\n        overlayClassName={`${name}__dropdown`}\n        placement=\"bottom-left\"\n        visible={visible}\n        expandAnimation={true}\n        trigger={popupProps?.trigger || 'click'}\n        {...popupProps}\n        v-slots={{\n          content: () => (\n            <panel empty={empty} trigger={trigger} cascaderContext={cascaderContext}>\n              {{ empty: $slots.empty }}\n            </panel>\n          ),\n        }}\n      >\n        <InputContent\n          {...$attrs}\n          cascaderContext={cascaderContext}\n          placeholder={placeholder}\n          collapsedItems={collapsedItems}\n          listeners={listeners}\n        >\n          {{ collapsedItems: $slots.collapsedItems }}\n        </InputContent>\n      </Popup>\n    );\n  },\n});\n"],"names":["name","prefix","defineComponent","components","Popup","Panel","Transition","InputContent","props","emits","data","inputWidth","visible","treeStore","inputVal","scopeVal","defaultValue","treeNodes","filterActive","expend","computed","stateFns","setTreeNodes","nodes","setValue","val","source","node","isEqual","emitEvent","setVisible","setFilterActive","setInputVal","setExpend","setInputWidth","cascaderContext","value","size","checkStrictly","lazy","multiple","filterable","clearable","checkProps","max","disabled","showAllLevels","minCollapsedNum","loading","valueType","watch","handler","getValue","updateExpend","updatedTreeNodes","getTreeValue","length","mounted","Array","isArray","console","warn","isEmpty","init","forEach","key","$watch","methods","keys","load","options","valueMode","TreeStore","checkable","expandMutex","expandParent","onLoad","setTimeout","refreshNodes","append","$nextTick","treeNodesEffect","treeStoreExpendEffect","replaceChecked","render","trigger","empty","$attrs","$slots","placeholder","collapsedItems","popupProps","listeners","EVENT_NAME_WITH_KEBAB","eventName","getPropsApiByEvent","args","content"],"mappings":"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"}