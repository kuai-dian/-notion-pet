/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var notification_notification = require('./notification.js');
require('@babel/runtime/helpers/typeof');
require('@babel/runtime/helpers/defineProperty');
require('tdesign-icons-vue-next');
require('lodash/isFunction');
require('../config.js');
require('./props.js');
require('../utils/event.js');
require('../utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/camelCase');

var DEFAULT_Z_INDEX = 6e3;
var MARGIN = 16;
var NotificationList = vue.defineComponent({
  components: {
    Notification: notification_notification["default"]
  },
  props: {
    placement: {
      type: String,
      "default": "top-right",
      validator: function validator(v) {
        return ["top-left", "top-right", "bottom-left", "bottom-right"].indexOf(v) > -1;
      }
    }
  },
  data: function data() {
    return {
      list: [],
      zIndex: DEFAULT_Z_INDEX
    };
  },
  methods: {
    add: function add(options) {
      this.list.push(options);
      return this.list.length - 1;
    },
    remove: function remove(index) {
      this.list.splice(index, 1);
    },
    removeAll: function removeAll() {
      this.list = [];
    },
    notificationStyles: function notificationStyles(item) {
      var styles = {};
      this.placement.split("-").forEach(function (direction) {
        var margin = MARGIN;

        if (item.offset && item.offset[direction]) {
          margin += item.offset[direction];
        }

        styles["margin-".concat(direction)] = "".concat(margin, "px");
      });
      styles["z-index"] = item.zIndex ? item.zIndex : this.zIndex;
      return styles;
    },
    getListeners: function getListeners(index) {
      var _this = this;

      return {
        onClickCloseBtn: function onClickCloseBtn() {
          return _this.remove(index);
        },
        onDurationEnd: function onDurationEnd() {
          return _this.remove(index);
        }
      };
    },
    getLastChild: function getLastChild() {
      return this.$refs["notification".concat(this.list.length - 1)];
    }
  },
  render: function render() {
    var _this2 = this;

    if (!this.list.length) return;
    return vue.createVNode("div", {
      "class": "t-notification__show--".concat(this.placement),
      "style": "z-index: ".concat(this.zIndex)
    }, [this.list.map(function (item, index) {
      return vue.createVNode(notification_notification["default"], vue.mergeProps({
        "ref": "notification".concat(index),
        "key": item.id,
        "style": _this2.notificationStyles(item)
      }, item, _this2.getListeners(index)), null);
    })]);
  }
});

exports["default"] = NotificationList;
//# sourceMappingURL=notificationList.js.map
