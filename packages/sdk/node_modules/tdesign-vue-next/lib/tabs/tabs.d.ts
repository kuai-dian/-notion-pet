import { ComponentPublicInstance } from 'vue';
import { TabValue, TdTabsProps } from './type';
declare const _default: import("vue").DefineComponent<{
    addable: BooleanConstructor;
    disabled: BooleanConstructor;
    list: {
        type: import("vue").PropType<import("./type").TdTabPanelProps[]>;
    };
    placement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
        default: "left" | "top" | "bottom" | "right";
        validator(val: "left" | "top" | "bottom" | "right"): boolean;
    };
    size: {
        type: import("vue").PropType<"medium" | "large">;
        default: "medium" | "large";
        validator(val: "medium" | "large"): boolean;
    };
    theme: {
        type: import("vue").PropType<"normal" | "card">;
        default: "normal" | "card";
        validator(val: "normal" | "card"): boolean;
    };
    value: {
        type: import("vue").PropType<TabValue>;
    };
    defaultValue: {
        type: import("vue").PropType<TabValue>;
    };
    onAdd: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: TabValue) => void>;
    onRemove: import("vue").PropType<(options: {
        value: TabValue;
        index: number;
        e: MouseEvent;
    }) => void>;
}, unknown, {
    panels: ({
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            disabled: boolean;
            destroyOnHide: boolean;
            removable: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            default: {
                type: import("vue").PropType<import("../common").TNode<any>>;
            };
            destroyOnHide: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: BooleanConstructor;
            label: {
                type: import("vue").PropType<string | import("../common").TNode<any>>;
            };
            panel: {
                type: import("vue").PropType<string | import("../common").TNode<any>>;
            };
            removable: BooleanConstructor;
            value: {
                type: import("vue").PropType<TabValue>;
            };
            onRemove: import("vue").PropType<(options: {
                value: TabValue;
                e: MouseEvent;
            }) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "destroyOnHide" | "removable">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            default: {
                type: import("vue").PropType<import("../common").TNode<any>>;
            };
            destroyOnHide: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: BooleanConstructor;
            label: {
                type: import("vue").PropType<string | import("../common").TNode<any>>;
            };
            panel: {
                type: import("vue").PropType<string | import("../common").TNode<any>>;
            };
            removable: BooleanConstructor;
            value: {
                type: import("vue").PropType<TabValue>;
            };
            onRemove: import("vue").PropType<(options: {
                value: TabValue;
                e: MouseEvent;
            }) => void>;
        }>>, unknown, unknown, {
            active(): boolean;
        }, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            disabled: boolean;
            destroyOnHide: boolean;
            removable: boolean;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        default: {
            type: import("vue").PropType<import("../common").TNode<any>>;
        };
        destroyOnHide: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: BooleanConstructor;
        label: {
            type: import("vue").PropType<string | import("../common").TNode<any>>;
        };
        panel: {
            type: import("vue").PropType<string | import("../common").TNode<any>>;
        };
        removable: BooleanConstructor;
        value: {
            type: import("vue").PropType<TabValue>;
        };
        onRemove: import("vue").PropType<(options: {
            value: TabValue;
            e: MouseEvent;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<{}> & {} & {
        active: boolean;
    } & import("vue").ComponentCustomProperties)[];
    listPanels: any[];
}, {}, {
    onAddTab(e: MouseEvent): void;
    onChangeTab(value: TabValue): void;
    onRemoveTab({ e, value, index }: Parameters<TdTabsProps['onRemove']>[0]): void;
    getSlotPanels(): any;
    renderHeader(): JSX.Element;
    renderContent(): JSX.Element | JSX.Element[];
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("add" | "remove" | "change" | "update:value")[], "add" | "remove" | "change" | "update:value", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    addable: BooleanConstructor;
    disabled: BooleanConstructor;
    list: {
        type: import("vue").PropType<import("./type").TdTabPanelProps[]>;
    };
    placement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
        default: "left" | "top" | "bottom" | "right";
        validator(val: "left" | "top" | "bottom" | "right"): boolean;
    };
    size: {
        type: import("vue").PropType<"medium" | "large">;
        default: "medium" | "large";
        validator(val: "medium" | "large"): boolean;
    };
    theme: {
        type: import("vue").PropType<"normal" | "card">;
        default: "normal" | "card";
        validator(val: "normal" | "card"): boolean;
    };
    value: {
        type: import("vue").PropType<TabValue>;
    };
    defaultValue: {
        type: import("vue").PropType<TabValue>;
    };
    onAdd: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: TabValue) => void>;
    onRemove: import("vue").PropType<(options: {
        value: TabValue;
        index: number;
        e: MouseEvent;
    }) => void>;
}>> & {
    onChange?: (...args: any[]) => any;
    onRemove?: (...args: any[]) => any;
    onAdd?: (...args: any[]) => any;
    "onUpdate:value"?: (...args: any[]) => any;
}, {
    disabled: boolean;
    size: "medium" | "large";
    theme: "normal" | "card";
    placement: "left" | "top" | "bottom" | "right";
    addable: boolean;
}>;
export default _default;
