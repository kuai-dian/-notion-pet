/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var _regeneratorRuntime = require('@babel/runtime/regenerator');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var cloneDeep = require('lodash/cloneDeep');
var get = require('lodash/get');
var set = require('lodash/set');
var isNil = require('lodash/isNil');
var config = require('../config.js');
var form_formModel = require('./form-model.js');
var form_formItemProps = require('./form-item-props.js');
var form_const = require('./const.js');
var utils_mixins = require('../utils/mixins.js');
var configProvider_configReceiver = require('../config-provider/config-receiver.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-eb6b0f94.js');
require('lodash/isEmpty');
require('lodash/isNumber');
require('../utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/camelCase');
require('../config-provider/zh_CN_config.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);
var cloneDeep__default = /*#__PURE__*/_interopDefaultLegacy(cloneDeep);
var get__default = /*#__PURE__*/_interopDefaultLegacy(get);
var set__default = /*#__PURE__*/_interopDefaultLegacy(set);
var isNil__default = /*#__PURE__*/_interopDefaultLegacy(isNil);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var ValidateStatus = /* @__PURE__ */function (ValidateStatus2) {
  ValidateStatus2["TO_BE_VALIDATED"] = "not";
  ValidateStatus2["SUCCESS"] = "success";
  ValidateStatus2["FAIL"] = "fail";
  return ValidateStatus2;
}(ValidateStatus || {});
var _FormItem = vue.defineComponent(_objectSpread(_objectSpread({}, utils_mixins["default"](configProvider_configReceiver["default"]("form"))), {}, {
  name: "TFormItem",
  inject: {
    form: {
      "default": void 0
    }
  },
  props: _objectSpread({}, form_formItemProps["default"]),
  data: function data() {
    return {
      errorList: [],
      successList: [],
      verifyStatus: "not"
      /* TO_BE_VALIDATED */
      ,
      resetValidating: false,
      needResetField: false,
      initialValue: void 0
    };
  },
  computed: {
    classes: function classes() {
      var _ref;

      return [form_const.CLASS_NAMES.formItem, form_const.FORM_ITEM_CLASS_PREFIX + this.name, (_ref = {}, _defineProperty__default["default"](_ref, form_const.CLASS_NAMES.formItemWithHelp, this.help), _defineProperty__default["default"](_ref, form_const.CLASS_NAMES.formItemWithExtra, this.renderTipsInfo()), _ref)];
    },
    labelClasses: function labelClasses() {
      var _ref2;

      var parent = this.form;
      var labelAlign = isNil__default["default"](this.labelAlign) ? parent === null || parent === void 0 ? void 0 : parent.labelAlign : this.labelAlign;
      var labelWidth = isNil__default["default"](this.labelWidth) ? parent === null || parent === void 0 ? void 0 : parent.labelWidth : this.labelWidth;
      return [form_const.CLASS_NAMES.label, (_ref2 = {}, _defineProperty__default["default"](_ref2, "".concat(config.prefix, "-form__label--required"), this.needRequiredMark), _defineProperty__default["default"](_ref2, "".concat(config.prefix, "-form__label--colon"), this.hasColon), _defineProperty__default["default"](_ref2, "".concat(config.prefix, "-form__label--top"), labelAlign === "top" || !labelWidth), _defineProperty__default["default"](_ref2, "".concat(config.prefix, "-form__label--left"), labelAlign === "left" && labelWidth), _defineProperty__default["default"](_ref2, "".concat(config.prefix, "-form__label--right"), labelAlign === "right" && labelWidth), _ref2)];
    },
    errorClasses: function errorClasses() {
      var parent = this.form;
      if (!parent.showErrorMessage) return "";

      if (this.verifyStatus === "success"
      /* SUCCESS */
      ) {
        return this.successBorder ? [form_const.CLASS_NAMES.success, form_const.CLASS_NAMES.successBorder].join(" ") : form_const.CLASS_NAMES.success;
      }

      if (!this.errorList.length) return;
      var type = this.errorList[0].type || "error";
      return type === "error" ? form_const.CLASS_NAMES.error : form_const.CLASS_NAMES.warning;
    },
    contentClasses: function contentClasses() {
      var getErrorClass = this.errorClasses;
      return [form_const.CLASS_NAMES.controls, getErrorClass];
    },
    contentStyle: function contentStyle() {
      var parent = this.form;
      var labelAlign = isNil__default["default"](this.labelAlign) ? parent === null || parent === void 0 ? void 0 : parent.labelAlign : this.labelAlign;
      var labelWidth = isNil__default["default"](this.labelWidth) ? parent === null || parent === void 0 ? void 0 : parent.labelWidth : this.labelWidth;
      var contentStyle = {};

      if (labelWidth && labelAlign !== "top") {
        if (typeof labelWidth === "number") {
          contentStyle = {
            marginLeft: "".concat(labelWidth, "px")
          };
        } else {
          contentStyle = {
            marginLeft: labelWidth
          };
        }
      }

      return contentStyle;
    },
    value: function value() {
      var parent = this.form;
      return parent && parent.data && get__default["default"](parent.data, this.name);
    },
    hasColon: function hasColon() {
      var parent = this.form;
      return !!(parent && parent.colon && this.getLabelContent());
    },
    needRequiredMark: function needRequiredMark() {
      var requiredMark = this.$props.requiredMark;
      if (typeof requiredMark === "boolean") return requiredMark;
      var parent = this.form;
      var parentRequiredMark = (parent === null || parent === void 0 ? void 0 : parent.requiredMark) === void 0 ? this.global.requiredMark : parent.requiredMark;
      var isRequired = this.innerRules.filter(function (rule) {
        return rule.required;
      }).length > 0;
      return Boolean(parentRequiredMark && isRequired);
    },
    innerRules: function innerRules() {
      var parent = this.form;
      return get__default["default"](parent === null || parent === void 0 ? void 0 : parent.rules, this.name) || this.rules || [];
    }
  },
  watch: {
    value: function value() {
      this.validate("change");
    }
  },
  mounted: function mounted() {
    this.initialValue = cloneDeep__default["default"](this.value);
    this.form.children.push(this);
  },
  beforeUnmount: function beforeUnmount() {
    var _this = this;

    var index = this.form.children.findIndex(function (item) {
      return item === _this;
    });
    this.form.children.splice(index, 1);
  },
  methods: {
    validate: function validate(trigger) {
      var _this2 = this;

      return _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee() {
        var rules, r, errorList;
        return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this2.resetValidating = true;
                rules = trigger === "all" ? _this2.innerRules : _this2.innerRules.filter(function (item) {
                  return (item.trigger || "change") === trigger;
                });
                _context.next = 4;
                return form_formModel.validate(_this2.value, rules);

              case 4:
                r = _context.sent;
                errorList = r.filter(function (item) {
                  return item.result !== true;
                });
                _this2.errorList = errorList;
                _this2.successList = r.filter(function (item) {
                  return item.result === true && item.message && item.type === "success";
                });

                if (rules.length) {
                  _this2.verifyStatus = errorList.length ? "fail"
                  /* FAIL */
                  : "success"
                  /* SUCCESS */
                  ;
                } else {
                  _this2.verifyStatus = "not"
                  /* TO_BE_VALIDATED */
                  ;
                }

                if (_this2.needResetField) {
                  _this2.resetHandler();
                }

                _this2.resetValidating = false;
                return _context.abrupt("return", _defineProperty__default["default"]({}, _this2.name, errorList.length === 0 ? true : r));

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    getLabelContent: function getLabelContent() {
      if (typeof this.label === "function") {
        return this.label(vue.h);
      }

      if (typeof this.$slots.label === "function") {
        return this.$slots.label(null);
      }

      return this.label;
    },
    getLabel: function getLabel() {
      var parent = this.form;
      var labelWidth = isNil__default["default"](this.labelWidth) ? parent === null || parent === void 0 ? void 0 : parent.labelWidth : this.labelWidth;
      var labelAlign = isNil__default["default"](this.labelAlign) ? parent === null || parent === void 0 ? void 0 : parent.labelAlign : this.labelAlign;
      if (Number(labelWidth) === 0) return;
      var labelStyle = {};

      if (labelWidth && labelAlign !== "top") {
        if (typeof labelWidth === "number") {
          labelStyle = {
            width: "".concat(labelWidth, "px")
          };
        } else {
          labelStyle = {
            width: labelWidth
          };
        }
      }

      return vue.createVNode("div", {
        "class": this.labelClasses,
        "style": labelStyle
      }, [vue.createVNode("label", {
        "for": this["for"]
      }, [this.getLabelContent()])]);
    },
    renderTipsInfo: function renderTipsInfo() {
      var parent = this.form;
      var helpVNode;

      if (this.help) {
        helpVNode = vue.createVNode("div", {
          "class": form_const.CLASS_NAMES.help
        }, [this.help]);
      }

      var list = this.errorList;

      if (parent.showErrorMessage && list && list[0] && list[0].message) {
        return vue.createVNode("p", {
          "class": form_const.CLASS_NAMES.extra
        }, [list[0].message]);
      }

      if (this.successList.length) {
        return vue.createVNode("p", {
          "class": form_const.CLASS_NAMES.extra
        }, [this.successList[0].message]);
      }

      return helpVNode;
    },
    getDefaultIcon: function getDefaultIcon() {
      var resultIcon = function resultIcon(Icon) {
        return vue.createVNode("span", {
          "class": form_const.CLASS_NAMES.status
        }, [vue.createVNode(Icon, {
          "size": "20px"
        }, null)]);
      };

      var list = this.errorList;

      if (this.verifyStatus === "success"
      /* SUCCESS */
      ) {
        return resultIcon(tdesignIconsVueNext.CheckCircleFilledIcon);
      }

      if (list && list[0]) {
        var type = this.errorList[0].type || "error";
        var icon = {
          error: tdesignIconsVueNext.CloseCircleFilledIcon,
          warning: tdesignIconsVueNext.ErrorCircleFilledIcon
        }[type] || tdesignIconsVueNext.CheckCircleFilledIcon;
        return resultIcon(icon);
      }

      return null;
    },
    getIcon: function getIcon(statusIcon, slotStatusIcon) {
      var resultIcon = function resultIcon(otherContent) {
        return vue.createVNode("span", {
          "class": form_const.CLASS_NAMES.status
        }, [otherContent]);
      };

      var withoutIcon = function withoutIcon() {
        return vue.createVNode("span", {
          "class": [form_const.CLASS_NAMES.status, "".concat(form_const.CLASS_NAMES.status, "-without-icon")]
        }, null);
      };

      if (statusIcon === true) {
        return this.getDefaultIcon();
      }

      if (statusIcon === false) {
        return withoutIcon();
      }

      if (typeof statusIcon === "function") {
        return resultIcon(slotStatusIcon());
      }

      if (typeof slotStatusIcon === "function") {
        return resultIcon(slotStatusIcon());
      }

      return null;
    },
    getSuffixIcon: function getSuffixIcon() {
      var parent = this.form;
      var statusIcon = this.statusIcon;
      var slotStatusIcon = this.$slots.statusIcon;
      var parentStatusIcon = parent.statusIcon;
      var parentSlotStatusIcon = parent.$slots.statusIcon;
      var resultIcon = this.getIcon(statusIcon, slotStatusIcon);
      if (resultIcon) return resultIcon;
      if (resultIcon === false) return;
      resultIcon = this.getIcon(parentStatusIcon, parentSlotStatusIcon);
      if (resultIcon) return resultIcon;
    },
    getEmptyValue: function getEmptyValue() {
      var parent = this.form;
      var type = Object.prototype.toString.call(get__default["default"](parent.data, this.name));
      var emptyValue;

      if (type === "[object Array]") {
        emptyValue = [];
      }

      if (type === "[object Object]") {
        emptyValue = {};
      }

      return emptyValue;
    },
    resetField: function resetField() {
      var _this3 = this;

      var parent = this.form;

      if (!this.name) {
        return;
      }

      if (parent.resetType === "empty") {
        set__default["default"](parent.data, this.name, this.getEmptyValue());
      }

      if (parent.resetType === "initial") {
        set__default["default"](parent.data, this.name, this.initialValue);
      }

      vue.nextTick(function () {
        if (_this3.resetValidating) {
          _this3.needResetField = true;
        } else {
          _this3.resetHandler();
        }
      });
    },
    resetHandler: function resetHandler() {
      this.needResetField = false;
      this.errorList = [];
      this.successList = [];
      this.verifyStatus = "not"
      /* TO_BE_VALIDATED */
      ;
    }
  },
  render: function render() {
    return vue.createVNode("div", {
      "class": this.classes
    }, [this.getLabel(), vue.createVNode("div", {
      "class": this.contentClasses,
      "style": this.contentStyle
    }, [vue.createVNode("div", {
      "class": form_const.CLASS_NAMES.controlsContent
    }, [this.$slots["default"] ? this.$slots["default"]() : null, this.getSuffixIcon()]), this.renderTipsInfo()])]);
  }
}));

exports.ValidateStatus = ValidateStatus;
exports["default"] = _FormItem;
//# sourceMappingURL=form-item.js.map
