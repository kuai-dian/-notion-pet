import { VNode, ComponentPublicInstance } from 'vue';
import { FormValidateResult, TdFormProps, FormValidateParams } from './type';
import FormItem from './form-item';
import { FormResetEvent, FormSubmitEvent, ClassName } from '../common';
export declare type FormItemInstance = InstanceType<typeof FormItem>;
declare type Result = FormValidateResult<TdFormProps['data']>;
declare const _default: import("vue").DefineComponent<{
    colon: BooleanConstructor;
    data: {
        type: import("vue").PropType<import("./type").Data>;
        default: () => {};
    };
    labelAlign: {
        type: import("vue").PropType<"left" | "top" | "right">;
        default: "left" | "top" | "right";
        validator(val: "left" | "top" | "right"): boolean;
    };
    labelWidth: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    layout: {
        type: import("vue").PropType<"inline" | "vertical">;
        default: "inline" | "vertical";
        validator(val: "inline" | "vertical"): boolean;
    };
    preventSubmitDefault: {
        type: BooleanConstructor;
        default: boolean;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: any;
    };
    resetType: {
        type: import("vue").PropType<"initial" | "empty">;
        default: "initial" | "empty";
        validator(val: "initial" | "empty"): boolean;
    };
    rules: {
        type: import("vue").PropType<{
            [x: string]: import("./type").FormRule[];
        }>;
    };
    scrollToFirstError: {
        type: import("vue").PropType<"auto" | "smooth">;
        validator(val: "auto" | "smooth"): boolean;
    };
    showErrorMessage: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<"medium" | "large">;
        default: "medium" | "large";
        validator(val: "medium" | "large"): boolean;
    };
    statusIcon: {
        type: import("vue").PropType<boolean | import("../common").TNode<import("./type").TdFormItemProps>>;
        default: any;
    };
    onReset: import("vue").PropType<(context: {
        e?: Event;
    }) => void>;
    onSubmit: import("vue").PropType<(context: import("./type").SubmitContext<import("./type").Data>) => void>;
    onValidate: import("vue").PropType<(result: import("./type").ValidateResultContext<import("./type").Data>) => void>;
}, unknown, {
    children: ({
        $: import("vue").ComponentInternalInstance;
        $data: {
            errorList: any[];
            successList: any[];
            verifyStatus: import("./form-item").ValidateStatus;
            resetValidating: boolean;
            needResetField: boolean;
            initialValue: any;
        };
        $props: Partial<{
            name: string;
            label: string | import("../common").TNode<any>;
            help: string;
            for: string;
            rules: import("./type").FormRule[];
            statusIcon: boolean | import("../common").TNode<any>;
            requiredMark: boolean;
            successBorder: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            for: {
                type: StringConstructor;
                default: string;
            };
            help: {
                type: StringConstructor;
                default: string;
            };
            label: {
                type: import("vue").PropType<string | import("../common").TNode<any>>;
                default: string;
            };
            labelAlign: {
                type: import("vue").PropType<"left" | "top" | "right">;
                validator(val: "left" | "top" | "right"): boolean;
            };
            labelWidth: {
                type: import("vue").PropType<string | number>;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            requiredMark: {
                type: BooleanConstructor;
                default: any;
            };
            rules: {
                type: import("vue").PropType<import("./type").FormRule[]>;
                default: () => import("./type").FormRule[];
            };
            statusIcon: {
                type: import("vue").PropType<boolean | import("../common").TNode<any>>;
                default: any;
            };
            successBorder: BooleanConstructor;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "name" | "label" | "help" | "for" | "rules" | "statusIcon" | "requiredMark" | "successBorder">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            for: {
                type: StringConstructor;
                default: string;
            };
            help: {
                type: StringConstructor;
                default: string;
            };
            label: {
                type: import("vue").PropType<string | import("../common").TNode<any>>;
                default: string;
            };
            labelAlign: {
                type: import("vue").PropType<"left" | "top" | "right">;
                validator(val: "left" | "top" | "right"): boolean;
            };
            labelWidth: {
                type: import("vue").PropType<string | number>;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            requiredMark: {
                type: BooleanConstructor;
                default: any;
            };
            rules: {
                type: import("vue").PropType<import("./type").FormRule[]>;
                default: () => import("./type").FormRule[];
            };
            statusIcon: {
                type: import("vue").PropType<boolean | import("../common").TNode<any>>;
                default: any;
            };
            successBorder: BooleanConstructor;
        }>>, unknown, {
            errorList: any[];
            successList: any[];
            verifyStatus: import("./form-item").ValidateStatus;
            resetValidating: boolean;
            needResetField: boolean;
            initialValue: any;
        }, {
            classes(): ClassName;
            labelClasses(): (string | {
                [x: string]: any;
            })[];
            errorClasses(): string;
            contentClasses(): string[];
            contentStyle(): import("../common").Styles;
            value(): any;
            hasColon(): boolean;
            needRequiredMark(): boolean;
            innerRules(): import("./type").FormRule[];
        }, {
            validate<T>(trigger: import("./type").ValidateTriggerType): Promise<import("./form-item").FormItemValidateResult<T>>;
            getLabelContent(): import("../common").SlotReturnValue;
            getLabel(): import("../common").SlotReturnValue;
            renderTipsInfo(): VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>;
            getDefaultIcon(): import("../common").SlotReturnValue;
            getIcon(statusIcon: boolean | import("../common").TNode<any> | import("../common").TNode<import("./type").TdFormItemProps>, slotStatusIcon: import("../common").ScopedSlot): import("../common").SlotReturnValue;
            getSuffixIcon(): import("../common").SlotReturnValue;
            getEmptyValue(): any;
            resetField(): void;
            resetHandler(): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            name: string;
            label: string | import("../common").TNode<any>;
            help: string;
            for: string;
            rules: import("./type").FormRule[];
            statusIcon: boolean | import("../common").TNode<any>;
            requiredMark: boolean;
            successBorder: boolean;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        for: {
            type: StringConstructor;
            default: string;
        };
        help: {
            type: StringConstructor;
            default: string;
        };
        label: {
            type: import("vue").PropType<string | import("../common").TNode<any>>;
            default: string;
        };
        labelAlign: {
            type: import("vue").PropType<"left" | "top" | "right">;
            validator(val: "left" | "top" | "right"): boolean;
        };
        labelWidth: {
            type: import("vue").PropType<string | number>;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: any;
        };
        rules: {
            type: import("vue").PropType<import("./type").FormRule[]>;
            default: () => import("./type").FormRule[];
        };
        statusIcon: {
            type: import("vue").PropType<boolean | import("../common").TNode<any>>;
            default: any;
        };
        successBorder: BooleanConstructor;
    }>> & import("vue").ShallowUnwrapRef<{}> & {
        errorList: any[];
        successList: any[];
        verifyStatus: import("./form-item").ValidateStatus;
        resetValidating: boolean;
        needResetField: boolean;
        initialValue: any;
    } & {
        classes: ClassName;
        labelClasses: (string | {
            [x: string]: any;
        })[];
        errorClasses: string;
        contentClasses: string[];
        contentStyle: import("../common").Styles;
        value: any;
        hasColon: boolean;
        needRequiredMark: boolean;
        innerRules: import("./type").FormRule[];
    } & {
        validate<T>(trigger: import("./type").ValidateTriggerType): Promise<import("./form-item").FormItemValidateResult<T>>;
        getLabelContent(): import("../common").SlotReturnValue;
        getLabel(): import("../common").SlotReturnValue;
        renderTipsInfo(): VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>;
        getDefaultIcon(): import("../common").SlotReturnValue;
        getIcon(statusIcon: boolean | import("../common").TNode<any> | import("../common").TNode<import("./type").TdFormItemProps>, slotStatusIcon: import("../common").ScopedSlot): import("../common").SlotReturnValue;
        getSuffixIcon(): import("../common").SlotReturnValue;
        getEmptyValue(): any;
        resetField(): void;
        resetHandler(): void;
    } & import("vue").ComponentCustomProperties)[];
}, {
    formClass(): ClassName;
}, {
    getFirstError(r: Result): any;
    scrollTo(selector: string): void;
    isFunction(val: unknown): boolean;
    needValidate(name: string, fields: string[]): boolean;
    validate(param?: FormValidateParams): Promise<Result>;
    submitHandler(e?: FormSubmitEvent): void;
    resetHandler(e?: FormResetEvent): void;
    clearValidate(fields?: Array<string>): void;
    reset(): void;
    submit(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("reset" | "submit" | "validate" | "form-item-destroyed")[], "reset" | "submit" | "validate" | "form-item-destroyed", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    colon: BooleanConstructor;
    data: {
        type: import("vue").PropType<import("./type").Data>;
        default: () => {};
    };
    labelAlign: {
        type: import("vue").PropType<"left" | "top" | "right">;
        default: "left" | "top" | "right";
        validator(val: "left" | "top" | "right"): boolean;
    };
    labelWidth: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    layout: {
        type: import("vue").PropType<"inline" | "vertical">;
        default: "inline" | "vertical";
        validator(val: "inline" | "vertical"): boolean;
    };
    preventSubmitDefault: {
        type: BooleanConstructor;
        default: boolean;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: any;
    };
    resetType: {
        type: import("vue").PropType<"initial" | "empty">;
        default: "initial" | "empty";
        validator(val: "initial" | "empty"): boolean;
    };
    rules: {
        type: import("vue").PropType<{
            [x: string]: import("./type").FormRule[];
        }>;
    };
    scrollToFirstError: {
        type: import("vue").PropType<"auto" | "smooth">;
        validator(val: "auto" | "smooth"): boolean;
    };
    showErrorMessage: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<"medium" | "large">;
        default: "medium" | "large";
        validator(val: "medium" | "large"): boolean;
    };
    statusIcon: {
        type: import("vue").PropType<boolean | import("../common").TNode<import("./type").TdFormItemProps>>;
        default: any;
    };
    onReset: import("vue").PropType<(context: {
        e?: Event;
    }) => void>;
    onSubmit: import("vue").PropType<(context: import("./type").SubmitContext<import("./type").Data>) => void>;
    onValidate: import("vue").PropType<(result: import("./type").ValidateResultContext<import("./type").Data>) => void>;
}>> & {
    onReset?: (...args: any[]) => any;
    onSubmit?: (...args: any[]) => any;
    onValidate?: (...args: any[]) => any;
    "onForm-item-destroyed"?: (...args: any[]) => any;
}, {
    data: {};
    size: "medium" | "large";
    layout: "inline" | "vertical";
    labelAlign: "left" | "top" | "right";
    labelWidth: string | number;
    resetType: "initial" | "empty";
    statusIcon: boolean | import("../common").TNode<import("./type").TdFormItemProps>;
    colon: boolean;
    preventSubmitDefault: boolean;
    requiredMark: boolean;
    showErrorMessage: boolean;
}>;
export default _default;
