/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var utils_classnames = require('../utils/classnames.js');
var config = require('../config.js');
var tag_props = require('./props.js');
var utils_renderTnode = require('../utils/render-tnode.js');
var utils_event = require('../utils/event.js');
var utils_mixins = require('../utils/mixins.js');
var configProvider_configReceiver = require('../config-provider/config-receiver.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isFunction');
require('lodash/isObject');
require('../utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/camelCase');
require('../config-provider/zh_CN_config.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-tag");
var _Tag = vue.defineComponent(_objectSpread(_objectSpread({}, utils_mixins["default"](configProvider_configReceiver["default"]("tag"))), {}, {
  name: "TTag",
  props: _objectSpread({}, tag_props["default"]),
  emits: ["close", "click"],
  computed: {
    tagClass: function tagClass() {
      var _ref;

      return ["".concat(name), "".concat(name, "--").concat(this.theme), utils_classnames["default"].SIZE[this.size], "".concat(name, "--").concat(this.variant), this.shape !== "square" && "".concat(name, "--").concat(this.shape), (_ref = {}, _defineProperty__default["default"](_ref, "".concat(name, "--ellipsis"), this.maxWidth), _defineProperty__default["default"](_ref, "".concat(name, "--close"), this.closable), _defineProperty__default["default"](_ref, "".concat(name, "--disabled"), this.disabled), _ref)];
    },
    tagStyle: function tagStyle() {
      if (this.maxWidth) return {
        maxWidth: "".concat(this.maxWidth, "px")
      };
      return {};
    }
  },
  methods: {
    handleClose: function handleClose(_ref2) {
      var e = _ref2.e;
      utils_event.emitEvent(this, "close", {
        e: e
      });
    },
    handleClick: function handleClick(e) {
      utils_event.emitEvent(this, "click", {
        e: e
      });
    },
    getCloseIcon: function getCloseIcon() {
      if (!this.closable) return null;
      var iconClassName = "".concat(prefix, "-tag__icon-close");

      if (this.global.closeIcon) {
        var component = this.global.closeIcon();
        return vue.h(component, {
          "class": iconClassName
        });
      }

      return vue.createVNode(tdesignIconsVueNext.CloseIcon, {
        "onClick": this.handleClose,
        "class": iconClassName
      }, null);
    }
  },
  render: function render() {
    var closeIcon = this.getCloseIcon();
    var tagContent = utils_renderTnode.renderContent(this, "default", "content");
    var icon = utils_renderTnode.renderTNodeJSX(this, "icon");
    return vue.createVNode("span", {
      "class": this.tagClass,
      "style": this.tagStyle,
      "onClick": this.handleClick
    }, [icon, this.maxWidth ? vue.createVNode("span", {
      "style": this.tagStyle,
      "class": "".concat(name, "--text")
    }, [tagContent]) : tagContent, closeIcon]);
  }
}));

exports["default"] = _Tag;
//# sourceMappingURL=tag.js.map
