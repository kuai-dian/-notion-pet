import { ClassName } from '../common';
declare const _default: import("vue").DefineComponent<{
    closable: BooleanConstructor;
    content: {
        type: import("vue").PropType<string | number | import("../common").TNode<any>>;
    };
    default: {
        type: import("vue").PropType<string | number | import("../common").TNode<any>>;
    };
    disabled: BooleanConstructor;
    icon: {
        type: import("vue").PropType<import("../common").TNode<any>>;
        default: any;
    };
    maxWidth: {
        type: import("vue").PropType<string | number>;
    };
    shape: {
        type: import("vue").PropType<"square" | "round" | "mark">;
        default: "square" | "round" | "mark";
        validator(val: "square" | "round" | "mark"): boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "success" | "primary" | "danger" | "warning">;
        default: "default" | "success" | "primary" | "danger" | "warning";
        validator(val: "default" | "success" | "primary" | "danger" | "warning"): boolean;
    };
    variant: {
        type: import("vue").PropType<"outline" | "dark" | "light" | "light-outline">;
        default: "outline" | "dark" | "light" | "light-outline";
        validator(val: "outline" | "dark" | "light" | "light-outline"): boolean;
    };
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClose: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}, unknown, unknown, {
    tagClass(): ClassName;
    tagStyle(): Record<string, string>;
}, {
    handleClose({ e }: {
        e: MouseEvent;
    }): void;
    handleClick(e: MouseEvent): void;
    getCloseIcon(): import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "close")[], "click" | "close", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    closable: BooleanConstructor;
    content: {
        type: import("vue").PropType<string | number | import("../common").TNode<any>>;
    };
    default: {
        type: import("vue").PropType<string | number | import("../common").TNode<any>>;
    };
    disabled: BooleanConstructor;
    icon: {
        type: import("vue").PropType<import("../common").TNode<any>>;
        default: any;
    };
    maxWidth: {
        type: import("vue").PropType<string | number>;
    };
    shape: {
        type: import("vue").PropType<"square" | "round" | "mark">;
        default: "square" | "round" | "mark";
        validator(val: "square" | "round" | "mark"): boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "success" | "primary" | "danger" | "warning">;
        default: "default" | "success" | "primary" | "danger" | "warning";
        validator(val: "default" | "success" | "primary" | "danger" | "warning"): boolean;
    };
    variant: {
        type: import("vue").PropType<"outline" | "dark" | "light" | "light-outline">;
        default: "outline" | "dark" | "light" | "light-outline";
        validator(val: "outline" | "dark" | "light" | "light-outline"): boolean;
    };
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClose: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}>> & {
    onClick?: (...args: any[]) => any;
    onClose?: (...args: any[]) => any;
}, {
    disabled: boolean;
    size: import("../common").SizeEnum;
    icon: import("../common").TNode<any>;
    shape: "square" | "round" | "mark";
    theme: "default" | "success" | "primary" | "danger" | "warning";
    variant: "outline" | "dark" | "light" | "light-outline";
    closable: boolean;
}>;
export default _default;
