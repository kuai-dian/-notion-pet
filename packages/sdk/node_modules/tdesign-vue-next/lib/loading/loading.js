/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var loading_icon_gradient = require('./icon/gradient.js');
var config = require('../config.js');
var utils_classnames = require('../utils/classnames.js');
var utils_dom = require('../utils/dom.js');
var utils_renderTnode = require('../utils/render-tnode.js');
var utils_transferDom = require('../utils/transfer-dom.js');
var loading_props = require('./props.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../_chunks/dep-eb6b0f94.js');
require('lodash/isString');
require('../utils/easing.js');
require('lodash/isEmpty');
require('lodash/isFunction');
require('lodash/isObject');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

var name = "".concat(config.prefix, "-loading");
var centerClass = "".concat(config.prefix, "-loading--center");
var fullscreenClass = "".concat(config.prefix, "-loading__fullscreen");
var lockClass = "".concat(config.prefix, "-loading--lock");
var overlayClass = "".concat(config.prefix, "-loading__overlay");
var relativeClass = "".concat(config.prefix, "-loading__parent");
var fullClass = "".concat(config.prefix, "-loading--full");
var inheritColorClass = "".concat(config.prefix, "-loading--inherit-color");
var _Loading = vue.defineComponent({
  name: "TLoading",
  directives: {
    TransferDom: utils_transferDom["default"]
  },
  props: loading_props["default"],
  setup: function setup(props2, _ref) {
    var slots = _ref.slots;
    var delayShowLoading = vue.ref(false);

    var countDelay = function countDelay() {
      delayShowLoading.value = false;
      var timer = setTimeout(function () {
        delayShowLoading.value = true;
        clearTimeout(timer);
      }, props2.delay);
    };

    var delayCounted = vue.computed(function () {
      return Boolean(!props2.delay || props2.delay && delayShowLoading.value);
    });
    var styles = vue.computed(function () {
      var styles2 = {};

      if (props2.zIndex !== void 0) {
        styles2.zIndex = props2.zIndex;
      }

      if (!["small", "medium", "large"].includes(props2.size)) {
        styles2["font-size"] = props2.size;
      }

      return styles2;
    });
    var hasContent = vue.computed(function () {
      return Boolean(props2["default"] || slots["default"] || props2.content || slots.content);
    });
    var lockFullscreen = vue.computed(function () {
      return props2.preventScrollThrough && props2.fullscreen;
    });
    var showText = vue.computed(function () {
      return Boolean(props2.text || slots.text);
    });
    var showWrapLoading = vue.computed(function () {
      return hasContent.value && props2.loading && delayCounted.value;
    });
    var showNormalLoading = vue.computed(function () {
      return !hasContent.value && props2.loading && delayCounted.value;
    });
    var classes = vue.computed(function () {
      var baseClasses = [centerClass, utils_classnames.SIZE_CLASSNAMES[props2.size], _defineProperty__default["default"]({}, inheritColorClass, props2.inheritColor)];
      var fullScreenClasses = [name, fullscreenClass, centerClass, overlayClass];
      return {
        baseClasses: baseClasses,
        attachClasses: baseClasses.concat([name, fullClass, _defineProperty__default["default"]({}, overlayClass, props2.showOverlay)]),
        withContentClasses: baseClasses.concat([name, fullClass, _defineProperty__default["default"]({}, overlayClass, props2.showOverlay)]),
        fullScreenClasses: fullScreenClasses,
        normalClasses: baseClasses.concat([name])
      };
    });
    var loadingRef = vue.computed(function () {
      return props2.loading;
    });
    vue.watch([loadingRef], function (_ref5) {
      var _ref6 = _slicedToArray__default["default"](_ref5, 1),
          isLoading = _ref6[0];

      if (isLoading) {
        countDelay();
        lockFullscreen.value && utils_dom.addClass(document.body, lockClass);
      } else {
        lockFullscreen.value && utils_dom.removeClass(document.body, lockClass);
      }
    });
    vue.onMounted(function () {
      props2.delay && countDelay();
    });
    return {
      delayShowLoading: delayShowLoading,
      styles: styles,
      showText: showText,
      hasContent: hasContent,
      classes: classes,
      lockFullscreen: lockFullscreen,
      showWrapLoading: showWrapLoading,
      showNormalLoading: showNormalLoading
    };
  },
  render: function render() {
    var _this$classes = this.classes,
        fullScreenClasses = _this$classes.fullScreenClasses,
        baseClasses = _this$classes.baseClasses,
        withContentClasses = _this$classes.withContentClasses,
        attachClasses = _this$classes.attachClasses,
        normalClasses = _this$classes.normalClasses;

    var defaultIndicator = vue.createVNode(loading_icon_gradient["default"], {
      "size": this.size
    }, null);

    var indicator = this.loading && utils_renderTnode.renderTNodeJSX(this, "indicator", defaultIndicator);

    var text = this.showText && vue.createVNode("div", {
      "class": "".concat(config.prefix, "-loading__text")
    }, [utils_renderTnode.renderTNodeJSX(this, "text")]);

    if (this.fullscreen) {
      if (!this.loading) return null;
      return vue.withDirectives(vue.createVNode("div", {
        "class": fullScreenClasses,
        "style": this.styles
      }, [vue.createVNode("div", {
        "class": baseClasses
      }, [indicator, text])]), [[vue.resolveDirective("transfer-dom"), this.attach]]);
    }

    if (this.hasContent) {
      return vue.createVNode("div", {
        "class": relativeClass
      }, [utils_renderTnode.renderContent(this, "default", "content"), this.showWrapLoading && vue.createVNode("div", {
        "class": withContentClasses,
        "style": this.styles
      }, [indicator, text])]);
    }

    if (this.attach) {
      return vue.withDirectives(vue.createVNode("div", {
        "class": attachClasses,
        "style": this.styles
      }, [indicator, text]), [[vue.resolveDirective("transfer-dom"), this.attach]]);
    }

    return vue.createVNode("div", {
      "class": normalClasses,
      "style": this.styles
    }, [indicator, text]);
  }
});

exports["default"] = _Loading;
//# sourceMappingURL=loading.js.map
