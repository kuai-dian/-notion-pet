{"version":3,"file":"render-tnode.js","sources":["../../src/utils/render-tnode.ts"],"sourcesContent":["import { h, ComponentPublicInstance, VNode, isVNode } from 'vue';\nimport isEmpty from 'lodash/isEmpty';\nimport isString from 'lodash/isString';\nimport isFunction from 'lodash/isFunction';\nimport isObject from 'lodash/isObject';\n\nexport interface JSXRenderContext {\n  defaultNode?: VNode | string;\n  params?: Record<string, any>;\n}\n\nexport type OptionsType = VNode | JSXRenderContext | string;\n\nexport function getDefaultNode(options?: OptionsType) {\n  let defaultNode;\n  if (isObject(options) && 'defaultNode' in options) {\n    defaultNode = options.defaultNode;\n  } else if (isVNode(options) || isString(options)) {\n    defaultNode = options;\n  }\n\n  return defaultNode;\n}\n\nexport function getParams(options?: OptionsType) {\n  return isObject(options) && 'params' in options ? options.params : null;\n}\n\n/**\n * 通过JSX的方式渲染 TNode，props 和 插槽同时处理，也能处理默认值为 true 则渲染默认节点的情况\n * @param vm 组件实例\n * @param name 插槽和属性名称\n * @param options 值可能为默认渲染节点，也可能是默认渲染节点和参数的集合\n * @example renderTNodeJSX(this, 'closeBtn')  优先级 props function 大于 插槽\n * @example renderTNodeJSX(this, 'closeBtn', <close-icon />)。 当属性值为 true 时则渲染 <close-icon />\n * @example renderTNodeJSX(this, 'closeBtn', { defaultNode: <close-icon />, params })。 params 为渲染节点时所需的参数\n */\n\nexport const renderTNodeJSX = (instance: ComponentPublicInstance, name: string, options?: OptionsType) => {\n  // assemble params && defaultNode\n  const params = getParams(options);\n  const defaultNode = getDefaultNode(options);\n\n  // 处理 props 类型的Node\n  let propsNode;\n  if (name in instance) {\n    propsNode = instance[name];\n  }\n\n  // propsNode 为 false 不渲染\n  if (propsNode === false) return;\n\n  // 同名优先处理插槽\n  if (instance.$slots[name]) {\n    return instance.$slots[name](params);\n  }\n  if (isFunction(propsNode)) return propsNode(h, params);\n\n  if (propsNode === true && defaultNode) {\n    return instance.$slots[name] ? instance.$slots[name](params) : defaultNode;\n  }\n\n  return propsNode;\n};\n\n/**\n * 通过JSX的方式渲染 TNode，props 和 插槽同时处理。与 renderTNodeJSX 区别在于 属性值为 undefined 时会渲染默认节点\n * @param vm 组件实例\n * @param name 插槽和属性名称\n * @example renderTNodeJSX(this, 'closeBtn')\n * @example renderTNodeJSX(this, 'closeBtn', <close-icon />)。this.closeBtn 为空时，则兜底渲染 <close-icon />\n * @example renderTNodeJSX(this, 'closeBtn', { defaultNode: <close-icon />, params }) 。params 为渲染节点时所需的参数\n */\nexport const renderTNodeJSXDefault = (vm: ComponentPublicInstance, name: string, options?: OptionsType) => {\n  const defaultNode = getDefaultNode(options);\n  return renderTNodeJSX(vm, name, options) || defaultNode;\n};\n\n/**\n * 用于处理相同名称的 TNode 渲染\n * @param vm 组件实例\n * @param name1 第一个名称，优先级高于 name2\n * @param name2 第二个名称\n * @param defaultNode 默认渲染内容：当 name1 和 name2 都为空时会启动默认内容渲染\n * @example renderContent(this, 'default', 'content')\n * @example renderContent(this, 'default', 'content', '我是默认内容')\n * @example renderContent(this, 'default', 'content', { defaultNode: '我是默认内容', params })\n */\nexport const renderContent = (vm: ComponentPublicInstance, name1: string, name2: string, options?: OptionsType) => {\n  const params = getParams(options);\n  const defaultNode = getDefaultNode(options);\n\n  const toParams = params ? { params } : undefined;\n\n  const node1 = renderTNodeJSX(vm, name1, toParams);\n  const node2 = renderTNodeJSX(vm, name2, toParams);\n\n  const res = isEmpty(node1) ? node2 : node1;\n  return isEmpty(res) ? defaultNode : res;\n};\n"],"names":["getDefaultNode","options","defaultNode","isObject","isVNode","isString","getParams","params","renderTNodeJSX","instance","name","propsNode","$slots","isFunction","h","renderTNodeJSXDefault","vm","renderContent","name1","name2","toParams","node1","node2","res","isEmpty"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAKO,SAASA,cAAT,CAAwBC,OAAxB,EAAiC;AACtC,MAAIC,WAAJ;;AACA,MAAIC,6BAAQ,CAACF,OAAD,CAAR,IAAqB,iBAAiBA,OAA1C,EAAmD;AACjDC,IAAAA,WAAW,GAAGD,OAAO,CAACC,WAAtB;AACD,GAFD,MAEO,IAAIE,WAAO,CAACH,OAAD,CAAP,IAAoBI,4BAAQ,CAACJ,OAAD,CAAhC,EAA2C;AAChDC,IAAAA,WAAW,GAAGD,OAAd;AACD;;AACD,SAAOC,WAAP;AACD;AACM,SAASI,SAAT,CAAmBL,OAAnB,EAA4B;AACjC,SAAOE,6BAAQ,CAACF,OAAD,CAAR,IAAqB,YAAYA,OAAjC,GAA2CA,OAAO,CAACM,MAAnD,GAA4D,IAAnE;AACD;IACYC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,QAAD,EAAWC,IAAX,EAAiBT,OAAjB,EAA6B;AACzD,MAAMM,MAAM,GAAGD,SAAS,CAACL,OAAD,CAAxB;AACA,MAAMC,WAAW,GAAGF,cAAc,CAACC,OAAD,CAAlC;AACA,MAAIU,SAAJ;;AACA,MAAID,IAAI,IAAID,QAAZ,EAAsB;AACpBE,IAAAA,SAAS,GAAGF,QAAQ,CAACC,IAAD,CAApB;AACD;;AACD,MAAIC,SAAS,KAAK,KAAlB,EACE;;AACF,MAAIF,QAAQ,CAACG,MAAT,CAAgBF,IAAhB,CAAJ,EAA2B;AACzB,WAAOD,QAAQ,CAACG,MAAT,CAAgBF,IAAhB,EAAsBH,MAAtB,CAAP;AACD;;AACD,MAAIM,8BAAU,CAACF,SAAD,CAAd,EACE,OAAOA,SAAS,CAACG,KAAD,EAAIP,MAAJ,CAAhB;;AACF,MAAII,SAAS,KAAK,IAAd,IAAsBT,WAA1B,EAAuC;AACrC,WAAOO,QAAQ,CAACG,MAAT,CAAgBF,IAAhB,IAAwBD,QAAQ,CAACG,MAAT,CAAgBF,IAAhB,EAAsBH,MAAtB,CAAxB,GAAwDL,WAA/D;AACD;;AACD,SAAOS,SAAP;AACD;IACYI,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,EAAD,EAAKN,IAAL,EAAWT,OAAX,EAAuB;AAC1D,MAAMC,WAAW,GAAGF,cAAc,CAACC,OAAD,CAAlC;AACA,SAAOO,cAAc,CAACQ,EAAD,EAAKN,IAAL,EAAWT,OAAX,CAAd,IAAqCC,WAA5C;AACD;IACYe,aAAa,GAAG,SAAhBA,aAAgB,CAACD,EAAD,EAAKE,KAAL,EAAYC,KAAZ,EAAmBlB,OAAnB,EAA+B;AAC1D,MAAMM,MAAM,GAAGD,SAAS,CAACL,OAAD,CAAxB;AACA,MAAMC,WAAW,GAAGF,cAAc,CAACC,OAAD,CAAlC;AACA,MAAMmB,QAAQ,GAAGb,MAAM,GAAG;AAAEA,IAAAA,MAAM,EAANA;AAAF,GAAH,GAAgB,KAAK,CAA5C;AACA,MAAMc,KAAK,GAAGb,cAAc,CAACQ,EAAD,EAAKE,KAAL,EAAYE,QAAZ,CAA5B;AACA,MAAME,KAAK,GAAGd,cAAc,CAACQ,EAAD,EAAKG,KAAL,EAAYC,QAAZ,CAA5B;AACA,MAAMG,GAAG,GAAGC,2BAAO,CAACH,KAAD,CAAP,GAAiBC,KAAjB,GAAyBD,KAArC;AACA,SAAOG,2BAAO,CAACD,GAAD,CAAP,GAAerB,WAAf,GAA6BqB,GAApC;AACD;;;;;;;;"}