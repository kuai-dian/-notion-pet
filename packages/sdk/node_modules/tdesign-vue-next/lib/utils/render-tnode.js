/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var isEmpty = require('lodash/isEmpty');
var isString = require('lodash/isString');
var isFunction = require('lodash/isFunction');
var _isObject = require('lodash/isObject');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var isEmpty__default = /*#__PURE__*/_interopDefaultLegacy(isEmpty);
var isString__default = /*#__PURE__*/_interopDefaultLegacy(isString);
var isFunction__default = /*#__PURE__*/_interopDefaultLegacy(isFunction);
var _isObject__default = /*#__PURE__*/_interopDefaultLegacy(_isObject);

function getDefaultNode(options) {
  var defaultNode;

  if (_isObject__default["default"](options) && "defaultNode" in options) {
    defaultNode = options.defaultNode;
  } else if (vue.isVNode(options) || isString__default["default"](options)) {
    defaultNode = options;
  }

  return defaultNode;
}
function getParams(options) {
  return _isObject__default["default"](options) && "params" in options ? options.params : null;
}
var renderTNodeJSX = function renderTNodeJSX(instance, name, options) {
  var params = getParams(options);
  var defaultNode = getDefaultNode(options);
  var propsNode;

  if (name in instance) {
    propsNode = instance[name];
  }

  if (propsNode === false) return;

  if (instance.$slots[name]) {
    return instance.$slots[name](params);
  }

  if (isFunction__default["default"](propsNode)) return propsNode(vue.h, params);

  if (propsNode === true && defaultNode) {
    return instance.$slots[name] ? instance.$slots[name](params) : defaultNode;
  }

  return propsNode;
};
var renderTNodeJSXDefault = function renderTNodeJSXDefault(vm, name, options) {
  var defaultNode = getDefaultNode(options);
  return renderTNodeJSX(vm, name, options) || defaultNode;
};
var renderContent = function renderContent(vm, name1, name2, options) {
  var params = getParams(options);
  var defaultNode = getDefaultNode(options);
  var toParams = params ? {
    params: params
  } : void 0;
  var node1 = renderTNodeJSX(vm, name1, toParams);
  var node2 = renderTNodeJSX(vm, name2, toParams);
  var res = isEmpty__default["default"](node1) ? node2 : node1;
  return isEmpty__default["default"](res) ? defaultNode : res;
};

exports.getDefaultNode = getDefaultNode;
exports.getParams = getParams;
exports.renderContent = renderContent;
exports.renderTNodeJSX = renderTNodeJSX;
exports.renderTNodeJSXDefault = renderTNodeJSXDefault;
//# sourceMappingURL=render-tnode.js.map
