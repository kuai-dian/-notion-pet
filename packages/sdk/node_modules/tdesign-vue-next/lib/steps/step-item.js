/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var isFunction = require('lodash/isFunction');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var config = require('../config.js');
var steps_stepItemProps = require('./step-item-props.js');
var utils_renderTnode = require('../utils/render-tnode.js');
var utils_mixins = require('../utils/mixins.js');
var configProvider_configReceiver = require('../config-provider/config-receiver.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isObject');
require('../config-provider/zh_CN_config.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var isFunction__default = /*#__PURE__*/_interopDefaultLegacy(isFunction);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(config.prefix, "-steps-item");
var _StepItem = vue.defineComponent(_objectSpread(_objectSpread({}, utils_mixins["default"](configProvider_configReceiver["default"]("steps"))), {}, {
  name: "TStepItem",
  components: {
    CheckIcon: tdesignIconsVueNext.CheckIcon,
    CloseIcon: tdesignIconsVueNext.CloseIcon
  },
  inject: {
    steps: {
      "default": void 0
    }
  },
  props: _objectSpread({}, steps_stepItemProps["default"]),
  data: function data() {
    return {
      index: -1
    };
  },
  computed: {
    current: function current() {
      return this.steps && this.steps.current;
    },
    baseClass: function baseClass() {
      return [name, _defineProperty__default["default"]({}, "".concat(name, "--").concat(this.status), this.status)];
    },
    iconClass: function iconClass() {
      return ["".concat(name, "__icon"), _defineProperty__default["default"]({}, "".concat(name, "--").concat(this.status), this.status)];
    },
    canClick: function canClick() {
      var _this$steps;

      return this.status !== "process" && !((_this$steps = this.steps) !== null && _this$steps !== void 0 && _this$steps.readonly);
    }
  },
  mounted: function mounted() {
    this.steps.addItem(this);
  },
  unmounted: function unmounted() {
    this.steps.removeItem(this);
  },
  methods: {
    renderIcon: function renderIcon() {
      var defaultIcon;

      if (this.steps.theme === "default") {
        var icon = "";

        switch (this.status) {
          case "finish":
            icon = vue.createVNode(vue.resolveComponent("check-icon"), null, null);
            break;

          case "error":
            if (isFunction__default["default"](this.global.errorIcon)) {
              icon = this.global.errorIcon(vue.h);
            } else {
              icon = vue.createVNode(vue.resolveComponent("close-icon"), null, null);
            }

            break;

          default:
            icon = String(this.index + 1);
            break;
        }

        defaultIcon = vue.createVNode("span", {
          "class": "".concat(name, "__icon--number")
        }, [icon]);
      }

      return utils_renderTnode.renderTNodeJSX(this, "icon", defaultIcon);
    },
    onStepClick: function onStepClick(e) {
      var val = this.value === void 0 ? this.index : this.value;
      this.steps.handleChange(val, this.current, e);
    }
  },
  render: function render() {
    var content = utils_renderTnode.renderContent(this, "default", "content");
    return vue.createVNode("div", {
      "class": this.baseClass
    }, [vue.createVNode("div", {
      "class": "".concat(name, "__inner ").concat(this.canClick ? "".concat(name, "--clickable") : ""),
      "onClick": this.onStepClick
    }, [vue.createVNode("div", {
      "class": this.iconClass
    }, [this.renderIcon()]), vue.createVNode("div", {
      "class": "".concat(name, "__content")
    }, [vue.createVNode("div", {
      "class": "".concat(name, "__title")
    }, [utils_renderTnode.renderTNodeJSX(this, "title")]), vue.createVNode("div", {
      "class": "".concat(name, "__description")
    }, [content]), vue.createVNode("div", {
      "class": "".concat(name, "__extra")
    }, [utils_renderTnode.renderTNodeJSX(this, "extra")])])])]);
  }
}));

exports["default"] = _StepItem;
//# sourceMappingURL=step-item.js.map
