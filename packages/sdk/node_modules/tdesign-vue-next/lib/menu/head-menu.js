/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var vue = require('vue');
var hooks_event = require('../hooks/event.js');
var _common_js_log_log = require('../_common/js/log/log.js');
var config = require('../config.js');
var menu_headMenuProps = require('./head-menu-props.js');
var tabs_index = require('../tabs/index.js');
var utils_renderTnode = require('../utils/render-tnode.js');
var menu_vMenu = require('./v-menu.js');
require('../utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('@babel/runtime/helpers/defineProperty');
require('lodash/camelCase');
require('../tabs/tabs.js');
require('../tabs/tab-panel.js');
require('../tabs/tab-panel-props.js');
require('../tabs/tab-nav.js');
require('lodash/debounce');
require('tdesign-icons-vue-next');
require('../tabs/tab-nav-item.js');
require('../utils/event.js');
require('../utils/ripple.js');
require('../utils/set-style.js');
require('../tabs/props.js');
require('../utils/map-props.js');
require('lodash/kebabCase');
require('../utils/withInstall.js');
require('../tabs/style');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isFunction');
require('lodash/isObject');
require('@babel/runtime/helpers/classCallCheck');
require('@babel/runtime/helpers/createClass');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
}

var _HeadMenu = vue.defineComponent({
  name: "THeadMenu",
  components: {
    Tabs: tabs_index.Tabs,
    TabPanel: tabs_index.TabPanel
  },
  props: menu_headMenuProps["default"],
  emits: ["change", "expand"],
  setup: function setup(props2, ctx) {
    var emitEvent = hooks_event.useEmitEvent(props2, ctx.emit);
    vue.watchEffect(function () {
      if (ctx.slots.options) {
        _common_js_log_log["default"].warnOnce("TMenu", "`options` slot is going to be deprecated, please use `operations` for slot instead.");
      }
    });
    var activeValue = vue.ref(props2.defaultValue || props2.value);
    var activeValues = vue.ref([]);
    var expandValues = vue.ref(props2.defaultExpanded || props2.expanded || []);
    var theme = vue.computed(function () {
      return props2.theme;
    });
    var menuClass = vue.computed(function () {
      return ["".concat(config.prefix, "-menu"), "".concat(config.prefix, "-head-menu"), "".concat(config.prefix, "-menu--").concat(props2.theme)];
    });
    var mode = vue.ref(props2.expandType);
    var submenu = vue.reactive([]);
    var vMenu = new menu_vMenu["default"]({
      isMutex: true,
      expandValues: expandValues.value
    });
    vue.provide("TdMenu", {
      mode: mode,
      theme: theme,
      vMenu: vMenu,
      isHead: true,
      expandValues: expandValues,
      activeValue: activeValue,
      activeValues: activeValues,
      select: function select(value) {
        emitEvent("change", value);
      },
      open: function open(value, type) {
        var expanded = _toConsumableArray__default["default"](expandValues.value);

        var index = expanded.indexOf(value);

        if (mode.value === "popup") {
          if (type === "add") {
            if (index === -1) {
              expanded.push(value);
            }
          } else if (type === "remove") {
            expanded.splice(index, 1);
          }
        } else {
          expanded.splice(0, 1);

          if (index === -1) {
            expanded.push(value);
          }
        }

        emitEvent("expand", expanded);
      }
    });

    var handleTabChange = function handleTabChange(value) {
      emitEvent("change", value);
    };

    var handleSubmenuExpand = function handleSubmenuExpand(value) {
      var ans = vMenu.getChild(value);
      submenu.length = 0;
      submenu.push.apply(submenu, _toConsumableArray__default["default"](ans));
    };

    vue.watch(function () {
      return props2.expanded;
    }, function (value) {
      expandValues.value = value;

      if (mode.value === "normal") {
        handleSubmenuExpand(value[0]);
      }
    });

    var updateActiveValues = function updateActiveValues(value) {
      activeValue.value = value;
      activeValues.value = vMenu.select(value);
    };

    vue.watch(function () {
      return props2.value;
    }, updateActiveValues);
    vue.watch(function () {
      return props2.defaultValue;
    }, updateActiveValues);
    vue.watch(function () {
      return props2.expandType;
    }, function (value) {
      mode.value = value;
    });
    vue.onMounted(function () {
      var _expandValues$value;

      activeValues.value = vMenu.select(activeValue.value);

      if (((_expandValues$value = expandValues.value) === null || _expandValues$value === void 0 ? void 0 : _expandValues$value.length) > 0) {
        handleSubmenuExpand(expandValues.value[0]);
      }
    });
    return {
      mode: mode,
      menuClass: menuClass,
      expandValues: expandValues,
      activeValue: activeValue,
      activeValues: activeValues,
      submenu: submenu,
      handleTabChange: handleTabChange
    };
  },
  methods: {
    renderNormalSubmenu: function renderNormalSubmenu() {
      var _slot;

      if (this.submenu.length === 0) return null;
      return vue.createVNode("ul", {
        "class": ["".concat(config.prefix, "-head-menu__submenu"), "".concat(config.prefix, "-submenu")]
      }, [vue.createVNode(vue.resolveComponent("t-tabs"), {
        "value": this.activeValue,
        "onChange": this.handleTabChange
      }, _isSlot(_slot = this.submenu.map(function (item) {
        var _item$vnode$;

        return vue.createVNode(vue.resolveComponent("t-tab-panel"), {
          "value": item.value,
          "label": (_item$vnode$ = item.vnode()[0]) === null || _item$vnode$ === void 0 ? void 0 : _item$vnode$.children
        }, null);
      })) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      })]);
    }
  },
  render: function render() {
    var operations = utils_renderTnode.renderContent(this, "operations", "options");
    var logo = utils_renderTnode.renderTNodeJSX(this, "logo");
    return vue.createVNode("div", {
      "class": this.menuClass
    }, [vue.createVNode("div", {
      "class": "".concat(config.prefix, "-head-menu__inner")
    }, [logo && vue.createVNode("div", {
      "class": "".concat(config.prefix, "-menu__logo")
    }, [logo]), vue.createVNode("ul", {
      "class": "".concat(config.prefix, "-menu")
    }, [utils_renderTnode.renderContent(this, "default", "content")]), operations && vue.createVNode("div", {
      "class": "".concat(config.prefix, "-menu__operations")
    }, [operations])]), this.mode === "normal" && this.renderNormalSubmenu()]);
  }
});

exports["default"] = _HeadMenu;
//# sourceMappingURL=head-menu.js.map
