/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var config = require('../config.js');
var menu_submenuProps = require('./submenu-props.js');
var utils_renderTnode = require('../utils/render-tnode.js');
var commonComponents_fakeArrow = require('../common-components/fake-arrow.js');
var utils_ripple = require('../utils/ripple.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isFunction');
require('lodash/isObject');
require('../utils/set-style.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

var _Submenu = vue.defineComponent({
  name: "TSubmenu",
  directives: {
    ripple: utils_ripple["default"]
  },
  props: menu_submenuProps["default"],
  setup: function setup(props2, ctx) {
    var menu = vue.inject("TdMenu");
    var theme = menu.theme,
        activeValues = menu.activeValues,
        expandValues = menu.expandValues,
        mode = menu.mode,
        isHead = menu.isHead,
        open = menu.open;
    var submenu = vue.inject("TdSubmenu", null);
    var menuItems = vue.ref([]);
    var isActive = vue.computed(function () {
      return activeValues.value.indexOf(props2.value) > -1;
    });
    var popupVisible = vue.ref(false);
    var rippleColor = vue.computed(function () {
      return theme.value === "light" ? "#E7E7E7" : "#383838";
    });
    var isOpen = vue.computed(function () {
      if (mode.value === "popup") {
        return popupVisible.value;
      }

      return expandValues ? expandValues.value.includes(props2.value) : false;
    });
    var isNested = vue.ref(false);
    var classes = vue.computed(function () {
      var _ref;

      return ["".concat(config.prefix, "-submenu"), (_ref = {}, _defineProperty__default["default"](_ref, "".concat(config.prefix, "-is-disabled"), props2.disabled), _defineProperty__default["default"](_ref, "".concat(config.prefix, "-is-opened"), isOpen.value), _ref)];
    });
    var popupClass = vue.computed(function () {
      var _ref2;

      return ["".concat(config.prefix, "-menu__popup"), (_ref2 = {}, _defineProperty__default["default"](_ref2, "".concat(config.prefix, "-is-opened"), popupVisible.value), _defineProperty__default["default"](_ref2, "".concat(config.prefix, "-is-vertical"), !isHead), _ref2)];
    });
    var submenuClass = vue.computed(function () {
      var _ref3;

      return ["".concat(config.prefix, "-menu__item"), (_ref3 = {}, _defineProperty__default["default"](_ref3, "".concat(config.prefix, "-is-disabled"), props2.disabled), _defineProperty__default["default"](_ref3, "".concat(config.prefix, "-is-opened"), isOpen.value), _defineProperty__default["default"](_ref3, "".concat(config.prefix, "-is-active"), isActive.value), _ref3)];
    });
    var subClass = vue.computed(function () {
      return ["".concat(config.prefix, "-menu__sub"), _defineProperty__default["default"]({}, "".concat(config.prefix, "-is-opened"), isOpen.value)];
    });
    var arrowClass = vue.computed(function () {
      return [_defineProperty__default["default"]({}, "".concat(config.prefix, "-fake-arrow--active"), isOpen.value)];
    });

    var handleMouseEnter = function handleMouseEnter() {
      if (props2.disabled) return;

      if (!popupVisible.value) {
        open(props2.value);
      }

      popupVisible.value = true;
    };

    var handleMouseLeave = function handleMouseLeave() {
      popupVisible.value = false;
    };

    var handleSubmenuItemClick = function handleSubmenuItemClick() {
      if (props2.disabled) return;
      open(props2.value);
    };

    vue.watch(popupVisible, function (visible) {
      menu.open(props2.value, visible ? "add" : "remove");
    });
    vue.provide("TdSubmenu", {
      value: props2.value,
      addMenuItem: function addMenuItem(item) {
        menuItems.value.push(item);

        if (submenu) {
          submenu.addMenuItem(item);
        }
      }
    });
    vue.onMounted(function () {
      var _menu$vMenu, _instance$parent;

      menu === null || menu === void 0 ? void 0 : (_menu$vMenu = menu.vMenu) === null || _menu$vMenu === void 0 ? void 0 : _menu$vMenu.add({
        value: props2.value,
        parent: submenu === null || submenu === void 0 ? void 0 : submenu.value,
        vnode: ctx.slots["default"]
      });
      var instance = vue.getCurrentInstance();
      isNested.value = /submenu/i.test((_instance$parent = instance.parent) === null || _instance$parent === void 0 ? void 0 : _instance$parent.type.name);
      var refs = instance.refs;

      if (refs) {
        var _refs$popupInner, _$popup$style, _$popup$style2;

        var rect = (_refs$popupInner = refs.popupInner) === null || _refs$popupInner === void 0 ? void 0 : _refs$popupInner.getBoundingClientRect();
        var $popup = refs.popup;
        $popup === null || $popup === void 0 ? void 0 : (_$popup$style = $popup.style) === null || _$popup$style === void 0 ? void 0 : _$popup$style.setProperty("--popup-max-height", "".concat(rect === null || rect === void 0 ? void 0 : rect.height, "px"));
        $popup === null || $popup === void 0 ? void 0 : (_$popup$style2 = $popup.style) === null || _$popup$style2 === void 0 ? void 0 : _$popup$style2.setProperty("--popup-width", "".concat(rect === null || rect === void 0 ? void 0 : rect.width, "px"));
      }
    });
    return {
      menuItems: menuItems,
      mode: mode,
      isHead: isHead,
      isNested: isNested,
      classes: classes,
      subClass: subClass,
      arrowClass: arrowClass,
      popupClass: popupClass,
      submenuClass: submenuClass,
      rippleColor: rippleColor,
      handleMouseEnter: handleMouseEnter,
      handleMouseLeave: handleMouseLeave,
      handleSubmenuItemClick: handleSubmenuItemClick
    };
  },
  methods: {
    renderHeadSubmenu: function renderHeadSubmenu() {
      var normalSubmenu = [vue.withDirectives(vue.createVNode("div", {
        "class": this.submenuClass,
        "onClick": this.handleSubmenuItemClick
      }, [utils_renderTnode.renderTNodeJSX(this, "title")]), [[vue.resolveDirective("ripple"), this.rippleColor]]), vue.createVNode("ul", {
        "style": "opacity: 0; width: 0; height: 0; overflow: hidden"
      }, [utils_renderTnode.renderContent(this, "default", "content")])];
      var popupSubmenu = [vue.createVNode("div", {
        "class": this.submenuClass
      }, [utils_renderTnode.renderTNodeJSX(this, "title"), vue.createVNode(commonComponents_fakeArrow["default"], {
        "overlayClassName": this.arrowClass,
        "overlayStyle": {
          transform: "rotate(".concat(this.isNested ? -90 : 0, "deg)")
        }
      }, null)]), vue.createVNode("div", {
        "ref": "popup",
        "class": this.popupClass
      }, [vue.createVNode("ul", {
        "ref": "popupInner",
        "class": "".concat(config.prefix, "-menu__popup-wrapper")
      }, [utils_renderTnode.renderContent(this, "default", "content")])])];
      return this.mode === "normal" ? normalSubmenu : popupSubmenu;
    },
    renderSubmenu: function renderSubmenu() {
      var hasContent = this.$slots.content || this.$slots["default"];
      var icon = utils_renderTnode.renderTNodeJSX(this, "icon");
      var child = utils_renderTnode.renderContent(this, "default", "content");

      var _getCurrentInstance = vue.getCurrentInstance(),
          parent = _getCurrentInstance.parent;

      var paddingLeft = 44;

      while (parent && parent.type.name !== "TMenu") {
        if (parent.type.name === "TSubmenu") {
          paddingLeft += 16;
        }

        parent = parent.parent;
      }

      var needRotate = this.mode === "popup" && this.isNested;
      var normalSubmenu = [vue.withDirectives(vue.createVNode("div", {
        "class": this.submenuClass,
        "onClick": this.handleSubmenuItemClick
      }, [icon, vue.createVNode("span", {
        "class": ["".concat(config.prefix, "-menu__content")]
      }, [utils_renderTnode.renderTNodeJSX(this, "title")]), hasContent && vue.createVNode(commonComponents_fakeArrow["default"], {
        "overlayClassName": this.arrowClass,
        "overlayStyle": {
          transform: "rotate(".concat(needRotate ? -90 : 0, "deg)")
        }
      }, null)]), [[vue.resolveDirective("ripple"), this.rippleColor]]), vue.createVNode("ul", {
        "class": this.subClass,
        "style": {
          "--padding-left": "".concat(paddingLeft, "px")
        }
      }, [child])];
      var popupSubmenu = [vue.createVNode("div", {
        "class": this.submenuClass
      }, [icon, vue.createVNode("span", {
        "class": ["".concat(config.prefix, "-menu__content")]
      }, [utils_renderTnode.renderTNodeJSX(this, "title")]), vue.createVNode(commonComponents_fakeArrow["default"], {
        "overlayClassName": this.arrowClass,
        "overlayStyle": {
          transform: "rotate(".concat(needRotate ? -90 : 0, "deg)")
        }
      }, null)]), vue.createVNode("div", {
        "ref": "popup",
        "class": this.popupClass
      }, [vue.createVNode("ul", {
        "ref": "popupInner",
        "class": "".concat(config.prefix, "-menu__popup-wrapper")
      }, [child])])];
      return this.mode === "normal" ? normalSubmenu : popupSubmenu;
    }
  },
  render: function render() {
    var child = null;
    var events = {};

    if (this.mode === "popup") {
      events = {
        onmouseenter: this.handleMouseEnter,
        onmouseleave: this.handleMouseLeave
      };
    }

    if (Object.keys(this.$slots).length > 0) {
      child = this.isHead ? this.renderHeadSubmenu() : this.renderSubmenu();
    }

    return vue.createVNode("li", vue.mergeProps({
      "class": this.classes
    }, events), [child]);
  }
});

exports["default"] = _Submenu;
//# sourceMappingURL=submenu.js.map
