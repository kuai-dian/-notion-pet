/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var hooks_event = require('../hooks/event.js');
var config = require('../config.js');
var menu_props = require('./props.js');
var utils_renderTnode = require('../utils/render-tnode.js');
var menu_vMenu = require('./v-menu.js');
var _common_js_log_log = require('../_common/js/log/log.js');
require('../utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/camelCase');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isFunction');
require('lodash/isObject');
require('@babel/runtime/helpers/classCallCheck');
require('@babel/runtime/helpers/createClass');
require('@babel/runtime/helpers/toConsumableArray');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _Menu = vue.defineComponent({
  name: "TMenu",
  props: _objectSpread({}, menu_props["default"]),
  emits: ["collapsed", "change", "expand"],
  setup: function setup(props2, ctx) {
    var emitEvent = hooks_event.useEmitEvent(props2, ctx.emit);
    vue.watchEffect(function () {
      if (ctx.slots.options) {
        _common_js_log_log["default"].warnOnce("TMenu", "`options` slot is going to be deprecated, please use `operations` for slot instead.");
      }
    });
    var mode = vue.ref(props2.expandType);
    var theme = vue.computed(function () {
      return props2.theme;
    });
    var isMutex = vue.computed(function () {
      return props2.expandMutex;
    });
    var menuClass = vue.computed(function () {
      return ["".concat(config.prefix, "-default-menu"), "".concat(config.prefix, "-menu--").concat(props2.theme), _defineProperty__default["default"]({}, "".concat(config.prefix, "-is-collapsed"), props2.collapsed)];
    });
    var innerClasses = vue.computed(function () {
      return ["".concat(config.prefix, "-menu"), _defineProperty__default["default"]({}, "".concat(config.prefix, "-menu--scroll"), mode.value !== "popup"), "narrow-scrollbar"];
    });
    var expandWidth = typeof props2.width === "number" ? "".concat(props2.width, "px") : props2.width;
    var styles = vue.computed(function () {
      return {
        height: "100%",
        width: props2.collapsed ? "64px" : expandWidth
      };
    });
    var activeValue = vue.ref(props2.defaultValue || props2.value);
    var activeValues = vue.ref([]);
    var expandValues = vue.ref(props2.expanded || []);
    vue.watchEffect(function () {
      mode.value = props2.collapsed ? "popup" : "normal";
      emitEvent("collapsed", mode.value);
    });
    var vMenu = new menu_vMenu["default"]({
      isMutex: isMutex.value,
      expandValues: expandValues.value
    });
    vue.provide("TdMenu", {
      activeValue: activeValue,
      activeValues: activeValues,
      expandValues: expandValues,
      mode: mode,
      theme: theme,
      isHead: false,
      vMenu: vMenu,
      select: function select(value) {
        activeValue.value = value;
        emitEvent("change", value);
      },
      open: function open(value, type) {
        if (mode.value === "normal") {
          expandValues.value = vMenu.expand(value);
        } else if (type === "add") {
          if (expandValues.value.indexOf(value) === -1) {
            expandValues.value.push(value);
          }
        } else if (type === "remove") {
          var index = expandValues.value.indexOf(value);
          expandValues.value.splice(index, 1);
        }

        emitEvent("expand", expandValues.value);
      }
    });
    vue.watch(function () {
      return props2.expanded;
    }, function (value) {
      expandValues.value = value;
      vMenu.expandValues = new Set(value);
    });

    var updateActiveValues = function updateActiveValues(value) {
      activeValue.value = value;
      activeValues.value = vMenu.select(value);
    };

    vue.watch(function () {
      return props2.value;
    }, updateActiveValues);
    vue.watch(function () {
      return props2.defaultValue;
    }, updateActiveValues);
    vue.onMounted(function () {
      activeValues.value = vMenu.select(activeValue.value);
    });
    return {
      styles: styles,
      menuClass: menuClass,
      innerClasses: innerClasses,
      activeValue: activeValue,
      activeValues: activeValues,
      expandValues: expandValues
    };
  },
  render: function render() {
    var operations = utils_renderTnode.renderContent(this, "operations", "options");
    var logo = utils_renderTnode.renderTNodeJSX(this, "logo");
    return vue.createVNode("div", {
      "class": this.menuClass,
      "style": this.styles
    }, [vue.createVNode("div", {
      "class": "".concat(config.prefix, "-default-menu__inner")
    }, [logo && vue.createVNode("div", {
      "class": "".concat(config.prefix, "-menu__logo")
    }, [logo]), vue.createVNode("ul", {
      "class": this.innerClasses
    }, [utils_renderTnode.renderContent(this, "default", "content")]), operations && vue.createVNode("div", {
      "class": "".concat(config.prefix, "-menu__operations")
    }, [operations])])]);
  }
});

exports["default"] = _Menu;
//# sourceMappingURL=menu.js.map
