import { TdInputProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    autocomplete: BooleanConstructor;
    autofocus: BooleanConstructor;
    clearable: BooleanConstructor;
    disabled: BooleanConstructor;
    label: {
        type: PropType<string | import("../common").TNode<any>>;
    };
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: NumberConstructor;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    prefixIcon: {
        type: PropType<import("../common").TNode<any>>;
    };
    readonly: BooleanConstructor;
    size: {
        type: PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: TdInputProps['size']): boolean;
    };
    status: {
        type: PropType<"error" | "success" | "warning">;
        validator(val: TdInputProps['status']): boolean;
    };
    suffix: {
        type: PropType<string | import("../common").TNode<any>>;
    };
    suffixIcon: {
        type: PropType<import("../common").TNode<any>>;
    };
    tips: {
        type: PropType<string | import("../common").TNode<any>>;
    };
    type: {
        type: PropType<"number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel">;
        default: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
        validator(val: TdInputProps['type']): boolean;
    };
    value: {
        type: PropType<import("./type").InputValue>;
    };
    defaultValue: {
        type: PropType<import("./type").InputValue>;
    };
    onBlur: PropType<(value: import("./type").InputValue, context: {
        e: FocusEvent;
    }) => void>;
    onChange: PropType<(value: import("./type").InputValue, context?: {
        e?: MouseEvent | InputEvent;
    }) => void>;
    onClear: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onEnter: PropType<(value: import("./type").InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onFocus: PropType<(value: import("./type").InputValue, context: {
        e: FocusEvent;
    }) => void>;
    onKeydown: PropType<(value: import("./type").InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeypress: PropType<(value: import("./type").InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeyup: PropType<(value: import("./type").InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onMouseenter: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPaste: PropType<(context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void>;
};
export default _default;
