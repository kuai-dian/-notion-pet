/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _typeof = require('@babel/runtime/helpers/typeof');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var utils_helper = require('../utils/helper.js');
var configProvider_configReceiver = require('../config-provider/config-receiver.js');
var utils_mixins = require('../utils/mixins.js');
var utils_classnames = require('../utils/classnames.js');
var config = require('../config.js');
var input_props = require('./props.js');
var utils_event = require('../utils/event.js');
var utils_renderTnode = require('../utils/render-tnode.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/camelCase');
require('../config-provider/zh_CN_config.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isFunction');
require('lodash/isObject');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(config.prefix, "-input");
var INPUT_WRAP_CLASS = "".concat(config.prefix, "-input__wrap");
var INPUT_TIPS_CLASS = "".concat(config.prefix, "-input__tips");

function getValidAttrs(obj) {
  var newObj = {};
  Object.keys(obj).forEach(function (key) {
    if (typeof obj[key] !== "undefined") {
      newObj[key] = obj[key];
    }
  });
  return newObj;
}

var _Input = vue.defineComponent(_objectSpread(_objectSpread({}, utils_mixins["default"](configProvider_configReceiver["default"]("input"))), {}, {
  name: "TInput",
  inheritAttrs: false,
  props: _objectSpread({}, input_props["default"]),
  emits: ["enter", "keydown", "keyup", "keypress", "clear", "change", "focus", "blur"],
  data: function data() {
    return {
      isHover: false,
      focused: false,
      renderType: this.type
    };
  },
  computed: {
    showClear: function showClear() {
      return this.value && !this.disabled && this.clearable && this.isHover;
    },
    inputAttrs: function inputAttrs() {
      var _this$placeholder;

      return getValidAttrs({
        autofocus: this.autofocus,
        disabled: this.disabled,
        readonly: this.readonly,
        autocomplete: this.autocomplete,
        placeholder: (_this$placeholder = this.placeholder) !== null && _this$placeholder !== void 0 ? _this$placeholder : this.t(this.global.placeholder),
        maxlength: this.maxlength,
        name: this.name || void 0,
        type: this.renderType
      });
    }
  },
  watch: {
    autofocus: {
      handler: function handler(val) {
        var _this = this;

        if (val === true) {
          this.$nextTick(function () {
            _this.$refs.refInputElem.focus();
          });
        }
      },
      immediate: true
    }
  },
  created: function created() {
    this.composing = false;
  },
  methods: {
    mouseEvent: function mouseEvent(v) {
      this.isHover = v;
    },
    renderIcon: function renderIcon(icon, iconType) {
      if (typeof icon === "function") {
        return icon(vue.h);
      }

      if (this.$slots[iconType]) {
        return this.$slots[iconType](null);
      }

      return null;
    },
    setInputValue: function setInputValue() {
      var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var input = this.$refs.refInputElem;
      var sV = String(v);

      if (!input) {
        return;
      }

      if (input.value !== sV) {
        input.value = sV;
      }
    },
    focus: function focus() {
      var input = this.$refs.refInputElem;
      input === null || input === void 0 ? void 0 : input.focus();
    },
    blur: function blur() {
      var input = this.$refs.refInputElem;
      input === null || input === void 0 ? void 0 : input.blur();
    },
    handleInput: function handleInput(e) {
      var checkInputType = e.inputType && e.inputType === "insertCompositionText";
      if (e.isComposing || checkInputType) return;
      this.inputValueChangeHandle(e);
    },
    handleKeydown: function handleKeydown(e) {
      if (this.disabled) return;
      var code = e.code;

      if (code === "Enter" || code === "NumpadEnter") {
        utils_event.emitEvent(this, "enter", this.value, {
          e: e
        });
      } else {
        utils_event.emitEvent(this, "keydown", this.value, {
          e: e
        });
      }
    },
    handleKeyUp: function handleKeyUp(e) {
      if (this.disabled) return;
      utils_event.emitEvent(this, "keyup", this.value, {
        e: e
      });
    },
    handleKeypress: function handleKeypress(e) {
      if (this.disabled) return;
      utils_event.emitEvent(this, "keypress", this.value, {
        e: e
      });
    },
    onHandlePaste: function onHandlePaste(e) {
      var _this$onPaste;

      if (this.disabled) return;
      var clipData = e.clipboardData || window.clipboardData;
      (_this$onPaste = this.onPaste) === null || _this$onPaste === void 0 ? void 0 : _this$onPaste.call(this, {
        e: e,
        pasteValue: clipData === null || clipData === void 0 ? void 0 : clipData.getData("text/plain")
      });
    },
    emitPassword: function emitPassword() {
      var renderType = this.renderType;
      var toggleType = renderType === "password" ? "text" : "password";
      this.renderType = toggleType;
    },
    emitClear: function emitClear(_ref) {
      var e = _ref.e;
      utils_event.emitEvent(this, "clear", {
        e: e
      });
      utils_event.emitEvent(this, "change", "", {
        e: e
      });
      this.focus();
      this.emitFocus(e);
    },
    emitFocus: function emitFocus(e) {
      if (this.disabled) return;
      this.focused = true;
      utils_event.emitEvent(this, "focus", this.value, {
        e: e
      });
    },
    emitBlur: function emitBlur(e) {
      this.focused = false;
      utils_event.emitEvent(this, "blur", this.value, {
        e: e
      });
    },
    onCompositionend: function onCompositionend(e) {
      this.inputValueChangeHandle(e);
    },
    inputValueChangeHandle: function inputValueChangeHandle(e) {
      var _this2 = this;

      var target = e.target;
      var val = target.value;

      if (this.maxcharacter && this.maxcharacter >= 0) {
        var stringInfo = utils_helper.getCharacterLength(val, this.maxcharacter);
        val = _typeof__default["default"](stringInfo) === "object" && stringInfo.characters;
      }

      utils_event.emitEvent(this, "change", val, {
        e: e
      });
      vue.nextTick(function () {
        return _this2.setInputValue(_this2.value);
      });
    },
    onInputMouseenter: function onInputMouseenter(e) {
      var _this$onMouseenter;

      this.mouseEvent(true);
      (_this$onMouseenter = this.onMouseenter) === null || _this$onMouseenter === void 0 ? void 0 : _this$onMouseenter.call(this, {
        e: e
      });
    },
    onInputMouseleave: function onInputMouseleave(e) {
      var _this$onMouseleave;

      this.mouseEvent(false);
      (_this$onMouseleave = this.onMouseleave) === null || _this$onMouseleave === void 0 ? void 0 : _this$onMouseleave.call(this, {
        e: e
      });
    }
  },
  render: function render() {
    var _this3 = this,
        _ref2;

    var inputEvents = getValidAttrs({
      onFocus: function onFocus(e) {
        return _this3.emitFocus(e);
      },
      onBlur: this.emitBlur,
      onKeydown: this.handleKeydown,
      onKeyup: this.handleKeyUp,
      onKeypresss: this.handleKeypress,
      onPaste: this.onHandlePaste,
      onChange: function onChange() {}
    });
    var wrapperAttrs = utils_helper.omit(this.$attrs, [].concat(_toConsumableArray__default["default"](Object.keys(inputEvents)), _toConsumableArray__default["default"](Object.keys(this.inputAttrs)), ["input"]));
    var prefixIcon = this.renderIcon(this.prefixIcon, "prefix-icon");
    var suffixIcon = this.renderIcon(this.suffixIcon, "suffix-icon");
    var label = utils_renderTnode.renderTNodeJSX(this, "label");
    var suffix = utils_renderTnode.renderTNodeJSX(this, "suffix");
    var labelContent = label ? vue.createVNode("div", {
      "class": "".concat(name, "__prefix")
    }, [label]) : null;
    var suffixContent = suffix ? vue.createVNode("div", {
      "class": "".concat(name, "__suffix")
    }, [suffix]) : null;

    if (this.showClear) {
      suffixIcon = vue.createVNode(tdesignIconsVueNext.CloseCircleFilledIcon, {
        "class": "".concat(name, "__suffix-clear"),
        "onClick": this.emitClear
      }, null);
    }

    if (this.type === "password") {
      if (this.renderType === "password") {
        suffixIcon = vue.createVNode(tdesignIconsVueNext.BrowseOffIcon, {
          "class": "".concat(name, "__suffix-clear"),
          "onClick": this.emitPassword
        }, null);
      } else if (this.renderType === "text") {
        suffixIcon = vue.createVNode(tdesignIconsVueNext.BrowseIcon, {
          "class": "".concat(name, "__suffix-clear"),
          "onClick": this.emitPassword
        }, null);
      }
    }

    var classes = [name, utils_classnames["default"].SIZE[this.size] || "", (_ref2 = {}, _defineProperty__default["default"](_ref2, utils_classnames["default"].STATUS.disabled, this.disabled), _defineProperty__default["default"](_ref2, utils_classnames["default"].STATUS.focused, this.focused), _defineProperty__default["default"](_ref2, "".concat(config.prefix, "-is-").concat(this.status), this.status), _defineProperty__default["default"](_ref2, "".concat(config.prefix, "-is-disabled"), this.disabled), _defineProperty__default["default"](_ref2, "".concat(config.prefix, "-is-readonly"), this.readonly), _defineProperty__default["default"](_ref2, "".concat(name, "--prefix"), prefixIcon || labelContent), _defineProperty__default["default"](_ref2, "".concat(name, "--suffix"), suffixIcon || suffixContent), _defineProperty__default["default"](_ref2, "".concat(name, "--focused"), this.focused), _ref2)];

    var inputNode = vue.createVNode("div", vue.mergeProps({
      "class": classes,
      "onMouseenter": this.onInputMouseenter,
      "onMouseleave": this.onInputMouseleave
    }, _objectSpread({}, wrapperAttrs)), [prefixIcon ? vue.createVNode("span", {
      "class": ["".concat(name, "__prefix"), "".concat(name, "__prefix-icon")]
    }, [prefixIcon]) : null, labelContent, vue.createVNode("input", vue.mergeProps({
      "class": "".concat(name, "__inner")
    }, _objectSpread({}, this.inputAttrs), inputEvents, {
      "ref": "refInputElem",
      "value": this.value,
      "onInput": function onInput(e) {
        return _this3.handleInput(e);
      },
      "onCompositionend": this.onCompositionend
    }), null), suffixContent, suffixIcon ? vue.createVNode("span", {
      "class": ["".concat(name, "__suffix"), "".concat(name, "__suffix-icon"), _defineProperty__default["default"]({}, "".concat(name, "__clear"), this.showClear)]
    }, [suffixIcon]) : null]);

    var tips = utils_renderTnode.renderTNodeJSX(this, "tips");

    if (tips) {
      return vue.createVNode("div", {
        "class": INPUT_WRAP_CLASS
      }, [inputNode, vue.createVNode("div", {
        "class": "".concat(INPUT_TIPS_CLASS, " ").concat(config.prefix, "-input__tips--").concat(this.status || "normal")
      }, [tips])]);
    }

    return inputNode;
  }
}));

exports["default"] = _Input;
//# sourceMappingURL=input.js.map
