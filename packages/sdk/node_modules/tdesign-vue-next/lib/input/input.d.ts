import { InputValue } from './type';
declare const _default: import("vue").DefineComponent<{
    autocomplete: BooleanConstructor;
    autofocus: BooleanConstructor;
    clearable: BooleanConstructor;
    disabled: BooleanConstructor;
    label: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: NumberConstructor;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    prefixIcon: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    readonly: BooleanConstructor;
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "success" | "warning">;
        validator(val: "error" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    suffixIcon: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    tips: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    type: {
        type: import("vue").PropType<"number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel">;
        default: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
        validator(val: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel"): boolean;
    };
    value: {
        type: import("vue").PropType<InputValue>;
    };
    defaultValue: {
        type: import("vue").PropType<InputValue>;
    };
    onBlur: import("vue").PropType<(value: InputValue, context: {
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: InputValue, context?: {
        e?: MouseEvent | InputEvent;
    }) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onEnter: import("vue").PropType<(value: InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: InputValue, context: {
        e: FocusEvent;
    }) => void>;
    onKeydown: import("vue").PropType<(value: InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeypress: import("vue").PropType<(value: InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeyup: import("vue").PropType<(value: InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onMouseenter: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPaste: import("vue").PropType<(context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void>;
}, unknown, {
    isHover: boolean;
    focused: boolean;
    renderType: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
}, {
    showClear(): boolean;
    inputAttrs(): Record<string, any>;
}, {
    mouseEvent(v: boolean): void;
    renderIcon(icon: string | Function | undefined, iconType: 'prefix-icon' | 'suffix-icon'): any;
    setInputValue(v?: InputValue): void;
    focus(): void;
    blur(): void;
    handleInput(e: InputEvent): void;
    handleKeydown(e: KeyboardEvent): void;
    handleKeyUp(e: KeyboardEvent): void;
    handleKeypress(e: KeyboardEvent): void;
    onHandlePaste(e: ClipboardEvent): void;
    emitPassword(): void;
    emitClear({ e }: {
        e: MouseEvent;
    }): void;
    emitFocus(e: FocusEvent): void;
    emitBlur(e: FocusEvent): void;
    onCompositionend(e: CompositionEvent): void;
    inputValueChangeHandle(e: InputEvent | CompositionEvent): void;
    onInputMouseenter(e: MouseEvent): void;
    onInputMouseleave(e: MouseEvent): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "keydown" | "keypress" | "keyup" | "enter" | "clear")[], "clear" | "blur" | "change" | "focus" | "keydown" | "keypress" | "keyup" | "enter", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    autocomplete: BooleanConstructor;
    autofocus: BooleanConstructor;
    clearable: BooleanConstructor;
    disabled: BooleanConstructor;
    label: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: NumberConstructor;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    prefixIcon: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    readonly: BooleanConstructor;
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "success" | "warning">;
        validator(val: "error" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    suffixIcon: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    tips: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    type: {
        type: import("vue").PropType<"number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel">;
        default: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
        validator(val: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel"): boolean;
    };
    value: {
        type: import("vue").PropType<InputValue>;
    };
    defaultValue: {
        type: import("vue").PropType<InputValue>;
    };
    onBlur: import("vue").PropType<(value: InputValue, context: {
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: InputValue, context?: {
        e?: MouseEvent | InputEvent;
    }) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onEnter: import("vue").PropType<(value: InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: InputValue, context: {
        e: FocusEvent;
    }) => void>;
    onKeydown: import("vue").PropType<(value: InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeypress: import("vue").PropType<(value: InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeyup: import("vue").PropType<(value: InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onMouseenter: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPaste: import("vue").PropType<(context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void>;
}>> & {
    onEnter?: (...args: any[]) => any;
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    onKeydown?: (...args: any[]) => any;
    onKeypress?: (...args: any[]) => any;
    onKeyup?: (...args: any[]) => any;
    onClear?: (...args: any[]) => any;
}, {
    type: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
    name: string;
    autocomplete: boolean;
    autofocus: boolean;
    disabled: boolean;
    size: import("../common").SizeEnum;
    readonly: boolean;
    placeholder: string;
    clearable: boolean;
}>;
export default _default;
