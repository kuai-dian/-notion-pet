/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _typeof = require('@babel/runtime/helpers/typeof');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var utils_dom = require('../utils/dom.js');
var config = require('../config.js');
var button_index = require('../button/index.js');
var drawer_props = require('./props.js');
var utils_renderTnode = require('../utils/render-tnode.js');
var utils_transferDom = require('../utils/transfer-dom.js');
var dialog_actions = require('../dialog/actions.js');
var utils_event = require('../utils/event.js');
var utils_mixins = require('../utils/mixins.js');
var configProvider_configReceiver = require('../config-provider/config-receiver.js');
require('../_chunks/dep-eb6b0f94.js');
require('lodash/isString');
require('../utils/easing.js');
require('../button/button.js');
require('@babel/runtime/helpers/toConsumableArray');
require('../utils/classnames.js');
require('../loading/index.js');
require('../loading/loading.js');
require('@babel/runtime/helpers/slicedToArray');
require('../loading/icon/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../loading/props.js');
require('../utils/withInstall.js');
require('../loading/style');
require('../loading/plugin.js');
require('lodash/isEmpty');
require('lodash/isFunction');
require('lodash/isObject');
require('../button/props.js');
require('../utils/ripple.js');
require('../utils/set-style.js');
require('../button/style');
require('../utils/helper.js');
require('lodash/camelCase');
require('../config-provider/zh_CN_config.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(config.prefix, "-drawer");
var lockClass = "".concat(config.prefix, "-drawer--lock");
var _Drawer = vue.defineComponent(_objectSpread(_objectSpread({}, utils_mixins["default"](dialog_actions["default"], configProvider_configReceiver["default"]("drawer"))), {}, {
  name: "TDrawer",
  components: {
    CloseIcon: tdesignIconsVueNext.CloseIcon,
    TButton: button_index.Button
  },
  directives: {
    TransferDom: utils_transferDom["default"]
  },
  props: _objectSpread({}, drawer_props["default"]),
  emits: ["open", "close", "opened", "closed", "update:visible", "overlay", "close-btn", "esc-keydown", "confirm", "cancel"],
  computed: {
    drawerClasses: function drawerClasses() {
      return ["t-drawer", "t-drawer--".concat(this.placement), {
        "t-drawer--open": this.visible,
        "t-drawer--attach": this.showInAttachedElement,
        "t-drawer--without-mask": !this.showOverlay
      }];
    },
    sizeValue: function sizeValue() {
      var defaultSize = isNaN(Number(this.size)) ? this.size : "".concat(this.size, "px");
      return {
        small: "300px",
        medium: "500px",
        large: "760px"
      }[this.size] || defaultSize;
    },
    wrapperStyles: function wrapperStyles() {
      return {
        transform: this.visible ? "translateX(0)" : void 0,
        width: ["left", "right"].includes(this.placement) ? this.sizeValue : "",
        height: ["top", "bottom"].includes(this.placement) ? this.sizeValue : ""
      };
    },
    wrapperClasses: function wrapperClasses() {
      return ["t-drawer__content-wrapper", "t-drawer__content-wrapper--".concat(this.placement)];
    },
    parentNode: function parentNode() {
      return this.$el && this.$el.parentNode;
    },
    modeAndPlacement: function modeAndPlacement() {
      return [this.mode, this.placement].join();
    },
    footerStyle: function footerStyle() {
      return {
        display: "flex",
        justifyContent: this.placement === "right" ? "flex-start" : "flex-end"
      };
    }
  },
  watch: {
    modeAndPlacement: {
      handler: function handler() {
        this.handlePushMode();
      },
      immediate: true
    },
    visible: {
      handler: function handler(value) {
        if (value && !this.showInAttachedElement) {
          this.preventScrollThrough && utils_dom.addClass(document.body, lockClass);
        } else {
          this.preventScrollThrough && utils_dom.removeClass(document.body, lockClass);
        }
      },
      immediate: true
    }
  },
  updated: function updated() {
    this.updatePushMode();
  },
  methods: {
    handlePushMode: function handlePushMode() {
      var _this = this;

      if (this.mode !== "push") return;
      vue.nextTick(function () {
        if (!_this.parentNode) return;
        _this.parentNode.style.cssText = "transition: margin 300ms cubic-bezier(0.7, 0.3, 0.1, 1) 0s;";
      });
    },
    updatePushMode: function updatePushMode() {
      if (!this.parentNode) return;
      if (this.mode !== "push" || !this.parentNode) return;
      var marginStr = {
        left: "margin: 0 0 0 ".concat(this.sizeValue),
        right: "margin: 0 0 0 -".concat(this.sizeValue),
        top: "margin: ".concat(this.sizeValue, " 0 0 0"),
        bottom: "margin: -".concat(this.sizeValue, " 0 0 0")
      }[this.placement];

      if (this.visible) {
        this.parentNode.style.cssText += marginStr;
      } else {
        this.parentNode.style.cssText = this.parentNode.style.cssText.replace(/margin:.+;/, "");
      }
    },
    getDefaultBtn: function getDefaultBtn(btnType, btnApi) {
      var isCancel = btnType === "cancel";
      var clickAction = isCancel ? this.cancelBtnAction : this.confirmBtnAction;
      var theme = isCancel ? "default" : "primary";
      var isApiObject = _typeof__default["default"](btnApi) === "object";
      return vue.createVNode(vue.resolveComponent("t-button"), {
        "theme": theme,
        "onClick": clickAction,
        "props": isApiObject ? btnApi : {},
        "class": "".concat(name, "-").concat(btnType)
      }, {
        "default": function _default() {
          return [btnApi && _typeof__default["default"](btnApi) === "object" ? btnApi.content : btnApi];
        }
      });
    },
    isUseDefault: function isUseDefault(btnApi) {
      var baseTypes = ["string", "object"];
      return Boolean(btnApi && baseTypes.includes(_typeof__default["default"](btnApi)));
    },
    getDefaultFooter: function getDefaultFooter() {
      var confirmBtn = this.getConfirmBtn({
        confirmBtn: this.confirmBtn,
        globalConfirm: this.global.confirm,
        className: "".concat(config.prefix, "-drawer__confirm")
      });
      var cancelBtn = this.getCancelBtn({
        cancelBtn: this.cancelBtn,
        globalCancel: this.global.cancel,
        className: "".concat(config.prefix, "-drawer__cancel")
      });
      return vue.createVNode("div", {
        "style": this.footerStyle
      }, [this.placement === "right" ? confirmBtn : null, cancelBtn, this.placement !== "right" ? confirmBtn : null]);
    },
    handleCloseBtnClick: function handleCloseBtnClick(e) {
      utils_event.emitEvent(this, "close-btn", e);
      this.closeDrawer({
        trigger: "close-btn",
        e: e
      });
    },
    handleWrapperClick: function handleWrapperClick(e) {
      utils_event.emitEvent(this, "overlay", e);

      if (this.closeOnOverlayClick) {
        this.closeDrawer({
          trigger: "overlay",
          e: e
        });
      }
    },
    onKeyDown: function onKeyDown(e) {
      if (this.closeOnEscKeydown && e.key === "Escape") {
        utils_event.emitEvent(this, "esc-keydown", e);
        this.closeDrawer({
          trigger: "esc",
          e: e
        });
      }
    },
    confirmBtnAction: function confirmBtnAction(e) {
      utils_event.emitEvent(this, "confirm", e);
    },
    cancelBtnAction: function cancelBtnAction(e) {
      utils_event.emitEvent(this, "cancel", e);
      this.closeDrawer({
        trigger: "cancel",
        e: e
      });
    },
    closeDrawer: function closeDrawer(params) {
      utils_event.emitEvent(this, "close", params);
      this.$emit("update:visible", false);
    }
  },
  render: function render() {
    if (this.destroyOnClose && !this.visible) return;

    var defaultCloseBtn = vue.createVNode(vue.resolveComponent("close-icon"), {
      "class": "t-submenu-icon"
    }, null);

    var body = utils_renderTnode.renderContent(this, "default", "body");
    var defaultFooter = this.getDefaultFooter();
    return vue.withDirectives(vue.createVNode("div", vue.mergeProps({
      "class": this.drawerClasses,
      "style": {
        zIndex: this.zIndex
      },
      "onKeydown": this.onKeyDown
    }, this.$attrs), [this.showOverlay && vue.createVNode("div", {
      "class": "".concat(name, "__mask"),
      "onClick": this.handleWrapperClick
    }, null), vue.createVNode("div", {
      "class": this.wrapperClasses,
      "style": this.wrapperStyles
    }, [this.header && vue.createVNode("div", {
      "class": "".concat(name, "__header")
    }, [utils_renderTnode.renderTNodeJSX(this, "header")]), this.closeBtn && vue.createVNode("div", {
      "class": "".concat(name, "__close-btn"),
      "onClick": this.handleCloseBtnClick
    }, [utils_renderTnode.renderTNodeJSX(this, "closeBtn", defaultCloseBtn)]), vue.createVNode("div", {
      "class": ["".concat(name, "__body"), "narrow-scrollbar"]
    }, [body]), this.footer && vue.createVNode("div", {
      "class": "".concat(name, "__footer")
    }, [utils_renderTnode.renderTNodeJSX(this, "footer", defaultFooter)])])]), [[vue.resolveDirective("transfer-dom"), this.attach]]);
  }
}));

exports["default"] = _Drawer;
//# sourceMappingURL=drawer.js.map
