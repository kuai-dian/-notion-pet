import { TdCalendarProps } from './type';
import './style';
export * from './type';
export declare type CalendarProps = TdCalendarProps;
export declare const Calendar: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            curDate: any;
            curSelectedYear: any;
            curSelectedMonth: any;
            curSelectedMode: any;
            isShowWeekend: boolean;
            controlSize: string;
        };
        $props: Partial<{
            mode: "month" | "year";
            format: string;
            theme: "full" | "card";
            controllerConfig: any;
            fillWithZero: boolean;
            isShowWeekendDefault: boolean;
            preventCellContextmenu: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            cell: {
                type: import("vue").PropType<string | import("../common").TNode<import("./type").CalendarCell>>;
            };
            cellAppend: {
                type: import("vue").PropType<string | import("../common").TNode<import("./type").CalendarCell>>;
            };
            controllerConfig: {
                type: import("vue").PropType<boolean | import("./type").CalendarController>;
                default: any;
            };
            fillWithZero: {
                type: BooleanConstructor;
                default: any;
            };
            firstDayOfWeek: {
                type: NumberConstructor;
                validator(val: number): boolean;
            };
            format: {
                type: StringConstructor;
                default: string;
            };
            head: {
                type: import("vue").PropType<string | import("../common").TNode<import("./type").ControllerOptions>>;
            };
            isShowWeekendDefault: {
                type: BooleanConstructor;
                default: boolean;
            };
            mode: {
                type: import("vue").PropType<"month" | "year">;
                default: "month" | "year";
                validator(val: "month" | "year"): boolean;
            };
            preventCellContextmenu: BooleanConstructor;
            range: {
                type: import("vue").PropType<import("./type").CalendarValue[]>;
            };
            theme: {
                type: import("vue").PropType<"full" | "card">;
                default: "full" | "card";
                validator(val: "full" | "card"): boolean;
            };
            value: {
                type: import("vue").PropType<import("./type").CalendarValue>;
            };
            week: {
                type: import("vue").PropType<string[] | import("../common").TNode<import("./type").CalendarWeek>>;
            };
            onCellClick: import("vue").PropType<(options: {
                cell: import("./type").CalendarCell;
                e: MouseEvent;
            }) => void>;
            onCellDoubleClick: import("vue").PropType<(options: {
                cell: import("./type").CalendarCell;
                e: MouseEvent;
            }) => void>;
            onCellRightClick: import("vue").PropType<(options: {
                cell: import("./type").CalendarCell;
                e: MouseEvent;
            }) => void>;
            onControllerChange: import("vue").PropType<(options: import("./type").ControllerOptions) => void>;
            onMonthChange: import("vue").PropType<(options: {
                month: string;
                year: string;
            }) => void>;
        }>> & {
            "onCell-click"?: (...args: any[]) => any;
            "onCell-double-click"?: (...args: any[]) => any;
            "onCell-right-click"?: (...args: any[]) => any;
            "onController-change"?: (...args: any[]) => any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "mode" | "format" | "theme" | "controllerConfig" | "fillWithZero" | "isShowWeekendDefault" | "preventCellContextmenu">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "cell-click" | "cell-double-click" | "cell-right-click" | "controller-change", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            cell: {
                type: import("vue").PropType<string | import("../common").TNode<import("./type").CalendarCell>>;
            };
            cellAppend: {
                type: import("vue").PropType<string | import("../common").TNode<import("./type").CalendarCell>>;
            };
            controllerConfig: {
                type: import("vue").PropType<boolean | import("./type").CalendarController>;
                default: any;
            };
            fillWithZero: {
                type: BooleanConstructor;
                default: any;
            };
            firstDayOfWeek: {
                type: NumberConstructor;
                validator(val: number): boolean;
            };
            format: {
                type: StringConstructor;
                default: string;
            };
            head: {
                type: import("vue").PropType<string | import("../common").TNode<import("./type").ControllerOptions>>;
            };
            isShowWeekendDefault: {
                type: BooleanConstructor;
                default: boolean;
            };
            mode: {
                type: import("vue").PropType<"month" | "year">;
                default: "month" | "year";
                validator(val: "month" | "year"): boolean;
            };
            preventCellContextmenu: BooleanConstructor;
            range: {
                type: import("vue").PropType<import("./type").CalendarValue[]>;
            };
            theme: {
                type: import("vue").PropType<"full" | "card">;
                default: "full" | "card";
                validator(val: "full" | "card"): boolean;
            };
            value: {
                type: import("vue").PropType<import("./type").CalendarValue>;
            };
            week: {
                type: import("vue").PropType<string[] | import("../common").TNode<import("./type").CalendarWeek>>;
            };
            onCellClick: import("vue").PropType<(options: {
                cell: import("./type").CalendarCell;
                e: MouseEvent;
            }) => void>;
            onCellDoubleClick: import("vue").PropType<(options: {
                cell: import("./type").CalendarCell;
                e: MouseEvent;
            }) => void>;
            onCellRightClick: import("vue").PropType<(options: {
                cell: import("./type").CalendarCell;
                e: MouseEvent;
            }) => void>;
            onControllerChange: import("vue").PropType<(options: import("./type").ControllerOptions) => void>;
            onMonthChange: import("vue").PropType<(options: {
                month: string;
                year: string;
            }) => void>;
        }>> & {
            "onCell-click"?: (...args: any[]) => any;
            "onCell-double-click"?: (...args: any[]) => any;
            "onCell-right-click"?: (...args: any[]) => any;
            "onController-change"?: (...args: any[]) => any;
        }, unknown, {
            curDate: any;
            curSelectedYear: any;
            curSelectedMonth: any;
            curSelectedMode: any;
            isShowWeekend: boolean;
            controlSize: string;
        }, {
            realFirstDayOfWeek(): number;
            TEXT_MAP(): import("./interface").TextConfigType;
            weekDipalyText(): string[] | import("../common").TNode<import("./type").CalendarWeek>;
            calendarCls(): Record<string, any>;
            calendarPanelCls(): Record<string, any>;
            isWeekRender(): boolean;
            rangeFromTo(): import("./interface").CalendarRange;
            controllerOptions(): import("./type").ControllerOptions;
            cellColHeaders(): import("./interface").CellColHeader[];
            yearSelectOptionList(): import("./interface").YearMonthOption[];
            monthSelectOptionList(): import("./interface").YearMonthOption[];
            modeSelectOptionList(): import("./interface").ModeOption[];
            monthCellsData(): import("./type").CalendarCell[][];
            yearCellsData(): import("./type").CalendarCell[][];
            controllerConfigData(): Record<string, any>;
            isControllerVisible(): boolean;
            weekendBtnText(): string;
            weekendBtnVBind(): object;
            currentBtnText(): string;
            currentBtnVBind(): object;
            isModeVisible(): boolean;
            isYearVisible(): boolean;
            isMonthVisible(): boolean;
            isWeekendToggleVisible(): boolean;
            isCurrentBtnVisible(): boolean;
            isModeDisabled(): boolean;
            isYearDisabled(): boolean;
            isMonthDisabled(): boolean;
            isWeekendToggleDisabled(): boolean;
            isCurrentBtnDisabled(): boolean;
            filterYearStr(): string;
            filterMonthStr(): string;
            filterYearMonth(): {
                month: string;
                year: string;
            };
        }, {
            getCalendarWeekSlotData(item: import("./interface").CellColHeader): import("./type").CalendarWeek;
            getWeekDisplay(weekNum: number): string;
            checkMonthCellItemShowed(cellData: import("./type").CalendarCell): boolean;
            createCalendarCell(cellData: import("./type").CalendarCell): import("./type").CalendarCell;
            clickCell(e: MouseEvent, cellData: import("./type").CalendarCell): void;
            doubleClickCell(e: MouseEvent, cellData: import("./type").CalendarCell): void;
            rightClickCell(e: MouseEvent, cellData: import("./type").CalendarCell): void;
            getCellClickEventOptions(e: MouseEvent, cellData: import("./type").CalendarCell): import("./interface").CellEventOption;
            controllerChange(): void;
            onWeekendToggleClick(): void;
            checkMonthCellColHeaderVisibled(item: import("./interface").CellColHeader): boolean;
            checkControllerDisabled(name: string, propsName: string): boolean;
            checkControllerVisible(name: string): boolean;
            toCurrent(value?: import("./type").CalendarValue): void;
            checkMonthAndYearSelecterDisabled(year: number, month: number): boolean;
            renderControl(): JSX.Element;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("cell-click" | "cell-double-click" | "cell-right-click" | "controller-change")[], string, {
            mode: "month" | "year";
            format: string;
            theme: "full" | "card";
            controllerConfig: any;
            fillWithZero: boolean;
            isShowWeekendDefault: boolean;
            preventCellContextmenu: boolean;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        cell: {
            type: import("vue").PropType<string | import("../common").TNode<import("./type").CalendarCell>>;
        };
        cellAppend: {
            type: import("vue").PropType<string | import("../common").TNode<import("./type").CalendarCell>>;
        };
        controllerConfig: {
            type: import("vue").PropType<boolean | import("./type").CalendarController>;
            default: any;
        };
        fillWithZero: {
            type: BooleanConstructor;
            default: any;
        };
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: number): boolean;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        head: {
            type: import("vue").PropType<string | import("../common").TNode<import("./type").ControllerOptions>>;
        };
        isShowWeekendDefault: {
            type: BooleanConstructor;
            default: boolean;
        };
        mode: {
            type: import("vue").PropType<"month" | "year">;
            default: "month" | "year";
            validator(val: "month" | "year"): boolean;
        };
        preventCellContextmenu: BooleanConstructor;
        range: {
            type: import("vue").PropType<import("./type").CalendarValue[]>;
        };
        theme: {
            type: import("vue").PropType<"full" | "card">;
            default: "full" | "card";
            validator(val: "full" | "card"): boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").CalendarValue>;
        };
        week: {
            type: import("vue").PropType<string[] | import("../common").TNode<import("./type").CalendarWeek>>;
        };
        onCellClick: import("vue").PropType<(options: {
            cell: import("./type").CalendarCell;
            e: MouseEvent;
        }) => void>;
        onCellDoubleClick: import("vue").PropType<(options: {
            cell: import("./type").CalendarCell;
            e: MouseEvent;
        }) => void>;
        onCellRightClick: import("vue").PropType<(options: {
            cell: import("./type").CalendarCell;
            e: MouseEvent;
        }) => void>;
        onControllerChange: import("vue").PropType<(options: import("./type").ControllerOptions) => void>;
        onMonthChange: import("vue").PropType<(options: {
            month: string;
            year: string;
        }) => void>;
    }>> & {
        "onCell-click"?: (...args: any[]) => any;
        "onCell-double-click"?: (...args: any[]) => any;
        "onCell-right-click"?: (...args: any[]) => any;
        "onController-change"?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<{}> & {
        curDate: any;
        curSelectedYear: any;
        curSelectedMonth: any;
        curSelectedMode: any;
        isShowWeekend: boolean;
        controlSize: string;
    } & {
        realFirstDayOfWeek: number;
        TEXT_MAP: import("./interface").TextConfigType;
        weekDipalyText: string[] | import("../common").TNode<import("./type").CalendarWeek>;
        calendarCls: Record<string, any>;
        calendarPanelCls: Record<string, any>;
        isWeekRender: boolean;
        rangeFromTo: import("./interface").CalendarRange;
        controllerOptions: import("./type").ControllerOptions;
        cellColHeaders: import("./interface").CellColHeader[];
        yearSelectOptionList: import("./interface").YearMonthOption[];
        monthSelectOptionList: import("./interface").YearMonthOption[];
        modeSelectOptionList: import("./interface").ModeOption[];
        monthCellsData: import("./type").CalendarCell[][];
        yearCellsData: import("./type").CalendarCell[][];
        controllerConfigData: Record<string, any>;
        isControllerVisible: boolean;
        weekendBtnText: string;
        weekendBtnVBind: object;
        currentBtnText: string;
        currentBtnVBind: object;
        isModeVisible: boolean;
        isYearVisible: boolean;
        isMonthVisible: boolean;
        isWeekendToggleVisible: boolean;
        isCurrentBtnVisible: boolean;
        isModeDisabled: boolean;
        isYearDisabled: boolean;
        isMonthDisabled: boolean;
        isWeekendToggleDisabled: boolean;
        isCurrentBtnDisabled: boolean;
        filterYearStr: string;
        filterMonthStr: string;
        filterYearMonth: {
            month: string;
            year: string;
        };
    } & {
        getCalendarWeekSlotData(item: import("./interface").CellColHeader): import("./type").CalendarWeek;
        getWeekDisplay(weekNum: number): string;
        checkMonthCellItemShowed(cellData: import("./type").CalendarCell): boolean;
        createCalendarCell(cellData: import("./type").CalendarCell): import("./type").CalendarCell;
        clickCell(e: MouseEvent, cellData: import("./type").CalendarCell): void;
        doubleClickCell(e: MouseEvent, cellData: import("./type").CalendarCell): void;
        rightClickCell(e: MouseEvent, cellData: import("./type").CalendarCell): void;
        getCellClickEventOptions(e: MouseEvent, cellData: import("./type").CalendarCell): import("./interface").CellEventOption;
        controllerChange(): void;
        onWeekendToggleClick(): void;
        checkMonthCellColHeaderVisibled(item: import("./interface").CellColHeader): boolean;
        checkControllerDisabled(name: string, propsName: string): boolean;
        checkControllerVisible(name: string): boolean;
        toCurrent(value?: import("./type").CalendarValue): void;
        checkMonthAndYearSelecterDisabled(year: number, month: number): boolean;
        renderControl(): JSX.Element;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    cell: {
        type: import("vue").PropType<string | import("../common").TNode<import("./type").CalendarCell>>;
    };
    cellAppend: {
        type: import("vue").PropType<string | import("../common").TNode<import("./type").CalendarCell>>;
    };
    controllerConfig: {
        type: import("vue").PropType<boolean | import("./type").CalendarController>;
        default: any;
    };
    fillWithZero: {
        type: BooleanConstructor;
        default: any;
    };
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: number): boolean;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    head: {
        type: import("vue").PropType<string | import("../common").TNode<import("./type").ControllerOptions>>;
    };
    isShowWeekendDefault: {
        type: BooleanConstructor;
        default: boolean;
    };
    mode: {
        type: import("vue").PropType<"month" | "year">;
        default: "month" | "year";
        validator(val: "month" | "year"): boolean;
    };
    preventCellContextmenu: BooleanConstructor;
    range: {
        type: import("vue").PropType<import("./type").CalendarValue[]>;
    };
    theme: {
        type: import("vue").PropType<"full" | "card">;
        default: "full" | "card";
        validator(val: "full" | "card"): boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").CalendarValue>;
    };
    week: {
        type: import("vue").PropType<string[] | import("../common").TNode<import("./type").CalendarWeek>>;
    };
    onCellClick: import("vue").PropType<(options: {
        cell: import("./type").CalendarCell;
        e: MouseEvent;
    }) => void>;
    onCellDoubleClick: import("vue").PropType<(options: {
        cell: import("./type").CalendarCell;
        e: MouseEvent;
    }) => void>;
    onCellRightClick: import("vue").PropType<(options: {
        cell: import("./type").CalendarCell;
        e: MouseEvent;
    }) => void>;
    onControllerChange: import("vue").PropType<(options: import("./type").ControllerOptions) => void>;
    onMonthChange: import("vue").PropType<(options: {
        month: string;
        year: string;
    }) => void>;
}>> & {
    "onCell-click"?: (...args: any[]) => any;
    "onCell-double-click"?: (...args: any[]) => any;
    "onCell-right-click"?: (...args: any[]) => any;
    "onController-change"?: (...args: any[]) => any;
}, unknown, {
    curDate: any;
    curSelectedYear: any;
    curSelectedMonth: any;
    curSelectedMode: any;
    isShowWeekend: boolean;
    controlSize: string;
}, {
    realFirstDayOfWeek(): number;
    TEXT_MAP(): import("./interface").TextConfigType;
    weekDipalyText(): string[] | import("../common").TNode<import("./type").CalendarWeek>;
    calendarCls(): Record<string, any>;
    calendarPanelCls(): Record<string, any>;
    isWeekRender(): boolean;
    rangeFromTo(): import("./interface").CalendarRange;
    controllerOptions(): import("./type").ControllerOptions;
    cellColHeaders(): import("./interface").CellColHeader[];
    yearSelectOptionList(): import("./interface").YearMonthOption[];
    monthSelectOptionList(): import("./interface").YearMonthOption[];
    modeSelectOptionList(): import("./interface").ModeOption[];
    monthCellsData(): import("./type").CalendarCell[][];
    yearCellsData(): import("./type").CalendarCell[][];
    controllerConfigData(): Record<string, any>;
    isControllerVisible(): boolean;
    weekendBtnText(): string;
    weekendBtnVBind(): object;
    currentBtnText(): string;
    currentBtnVBind(): object;
    isModeVisible(): boolean;
    isYearVisible(): boolean;
    isMonthVisible(): boolean;
    isWeekendToggleVisible(): boolean;
    isCurrentBtnVisible(): boolean;
    isModeDisabled(): boolean;
    isYearDisabled(): boolean;
    isMonthDisabled(): boolean;
    isWeekendToggleDisabled(): boolean;
    isCurrentBtnDisabled(): boolean;
    filterYearStr(): string;
    filterMonthStr(): string;
    filterYearMonth(): {
        month: string;
        year: string;
    };
}, {
    getCalendarWeekSlotData(item: import("./interface").CellColHeader): import("./type").CalendarWeek;
    getWeekDisplay(weekNum: number): string;
    checkMonthCellItemShowed(cellData: import("./type").CalendarCell): boolean;
    createCalendarCell(cellData: import("./type").CalendarCell): import("./type").CalendarCell;
    clickCell(e: MouseEvent, cellData: import("./type").CalendarCell): void;
    doubleClickCell(e: MouseEvent, cellData: import("./type").CalendarCell): void;
    rightClickCell(e: MouseEvent, cellData: import("./type").CalendarCell): void;
    getCellClickEventOptions(e: MouseEvent, cellData: import("./type").CalendarCell): import("./interface").CellEventOption;
    controllerChange(): void;
    onWeekendToggleClick(): void;
    checkMonthCellColHeaderVisibled(item: import("./interface").CellColHeader): boolean;
    checkControllerDisabled(name: string, propsName: string): boolean;
    checkControllerVisible(name: string): boolean;
    toCurrent(value?: import("./type").CalendarValue): void;
    checkMonthAndYearSelecterDisabled(year: number, month: number): boolean;
    renderControl(): JSX.Element;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("cell-click" | "cell-double-click" | "cell-right-click" | "controller-change")[], "cell-click" | "cell-double-click" | "cell-right-click" | "controller-change", {
    mode: "month" | "year";
    format: string;
    theme: "full" | "card";
    controllerConfig: any;
    fillWithZero: boolean;
    isShowWeekendDefault: boolean;
    preventCellContextmenu: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Calendar;
