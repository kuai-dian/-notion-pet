import { DialogCloseContext } from './type';
import { ClassName, Styles } from '../common';
declare const _default: import("vue").DefineComponent<{
    attach: {
        type: import("vue").PropType<import("../common").AttachNode>;
        default: string;
    };
    body: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
        default: string;
    };
    cancelBtn: {
        type: import("vue").PropType<string | import("../common").TNode<any> | import("../button").TdButtonProps>;
        default: string;
    };
    closeBtn: {
        type: import("vue").PropType<string | boolean | import("../common").TNode<any>>;
        default: boolean;
    };
    closeOnEscKeydown: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    confirmBtn: {
        type: import("vue").PropType<string | import("../common").TNode<any> | import("../button").TdButtonProps>;
        default: string;
    };
    default: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    destroyOnClose: BooleanConstructor;
    draggable: BooleanConstructor;
    footer: {
        type: import("vue").PropType<boolean | import("../common").TNode<any>>;
        default: boolean;
    };
    header: {
        type: import("vue").PropType<string | boolean | import("../common").TNode<any>>;
        default: boolean;
    };
    mode: {
        type: import("vue").PropType<"normal" | "modal" | "modeless">;
        default: "normal" | "modal" | "modeless";
        validator(val: "normal" | "modal" | "modeless"): boolean;
    };
    placement: {
        type: import("vue").PropType<"center" | "top">;
        default: "center" | "top";
        validator(val: "center" | "top"): boolean;
    };
    preventScrollThrough: {
        type: BooleanConstructor;
        default: boolean;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "success" | "danger" | "warning" | "info">;
        default: "default" | "success" | "danger" | "warning" | "info";
        validator(val: "default" | "success" | "danger" | "warning" | "info"): boolean;
    };
    top: {
        type: import("vue").PropType<string | number>;
    };
    visible: BooleanConstructor;
    defaultVisible: BooleanConstructor;
    width: {
        type: import("vue").PropType<string | number>;
    };
    zIndex: {
        type: NumberConstructor;
    };
    onCancel: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClose: import("vue").PropType<(context: DialogCloseContext) => void>;
    onCloseBtnClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClosed: import("vue").PropType<() => void>;
    onConfirm: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onEscKeydown: import("vue").PropType<(context: {
        e: KeyboardEvent;
    }) => void>;
    onOpened: import("vue").PropType<() => void>;
    onOverlayClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}, unknown, {
    scrollWidth: number;
}, {
    isModal(): boolean;
    isModeless(): boolean;
    maskClass(): ClassName;
    dialogClass(): ClassName;
    dialogStyle(): Styles;
}, {
    addKeyboardEvent(status: boolean): void;
    keyboardEvent(e: KeyboardEvent): void;
    overlayAction(e: MouseEvent): void;
    closeBtnAcion(e: MouseEvent): void;
    cancelBtnAction(e: MouseEvent): void;
    confirmBtnAction(e: MouseEvent): void;
    afterEnter(): void;
    afterLeave(): void;
    emitCloseEvent(context: DialogCloseContext): void;
    hasEventOn(name: string): boolean;
    getIcon(): any;
    renderDialog(): JSX.Element;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("closed" | "cancel" | "close" | "confirm" | "esc-keydown" | "update:visible" | "overlay-click" | "close-btn-click" | "opened")[], "closed" | "cancel" | "close" | "confirm" | "esc-keydown" | "update:visible" | "overlay-click" | "close-btn-click" | "opened", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    attach: {
        type: import("vue").PropType<import("../common").AttachNode>;
        default: string;
    };
    body: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
        default: string;
    };
    cancelBtn: {
        type: import("vue").PropType<string | import("../common").TNode<any> | import("../button").TdButtonProps>;
        default: string;
    };
    closeBtn: {
        type: import("vue").PropType<string | boolean | import("../common").TNode<any>>;
        default: boolean;
    };
    closeOnEscKeydown: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    confirmBtn: {
        type: import("vue").PropType<string | import("../common").TNode<any> | import("../button").TdButtonProps>;
        default: string;
    };
    default: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    destroyOnClose: BooleanConstructor;
    draggable: BooleanConstructor;
    footer: {
        type: import("vue").PropType<boolean | import("../common").TNode<any>>;
        default: boolean;
    };
    header: {
        type: import("vue").PropType<string | boolean | import("../common").TNode<any>>;
        default: boolean;
    };
    mode: {
        type: import("vue").PropType<"normal" | "modal" | "modeless">;
        default: "normal" | "modal" | "modeless";
        validator(val: "normal" | "modal" | "modeless"): boolean;
    };
    placement: {
        type: import("vue").PropType<"center" | "top">;
        default: "center" | "top";
        validator(val: "center" | "top"): boolean;
    };
    preventScrollThrough: {
        type: BooleanConstructor;
        default: boolean;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "success" | "danger" | "warning" | "info">;
        default: "default" | "success" | "danger" | "warning" | "info";
        validator(val: "default" | "success" | "danger" | "warning" | "info"): boolean;
    };
    top: {
        type: import("vue").PropType<string | number>;
    };
    visible: BooleanConstructor;
    defaultVisible: BooleanConstructor;
    width: {
        type: import("vue").PropType<string | number>;
    };
    zIndex: {
        type: NumberConstructor;
    };
    onCancel: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClose: import("vue").PropType<(context: DialogCloseContext) => void>;
    onCloseBtnClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClosed: import("vue").PropType<() => void>;
    onConfirm: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onEscKeydown: import("vue").PropType<(context: {
        e: KeyboardEvent;
    }) => void>;
    onOpened: import("vue").PropType<() => void>;
    onOverlayClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}>> & {
    onClose?: (...args: any[]) => any;
    onConfirm?: (...args: any[]) => any;
    onCancel?: (...args: any[]) => any;
    onClosed?: (...args: any[]) => any;
    onOpened?: (...args: any[]) => any;
    "onEsc-keydown"?: (...args: any[]) => any;
    "onUpdate:visible"?: (...args: any[]) => any;
    "onOverlay-click"?: (...args: any[]) => any;
    "onClose-btn-click"?: (...args: any[]) => any;
}, {
    visible: boolean;
    body: string | import("../common").TNode<any>;
    footer: boolean | import("../common").TNode<any>;
    header: string | boolean | import("../common").TNode<any>;
    draggable: boolean;
    mode: "normal" | "modal" | "modeless";
    attach: import("../common").AttachNode;
    preventScrollThrough: boolean;
    showOverlay: boolean;
    theme: "default" | "success" | "danger" | "warning" | "info";
    placement: "center" | "top";
    closeBtn: string | boolean | import("../common").TNode<any>;
    destroyOnClose: boolean;
    defaultVisible: boolean;
    confirmBtn: string;
    cancelBtn: string;
    closeOnEscKeydown: boolean;
    closeOnOverlayClick: boolean;
}>;
export default _default;
