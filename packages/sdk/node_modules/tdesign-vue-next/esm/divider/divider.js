/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, createVNode, mergeProps } from 'vue';
import { prefix } from '../config.js';
import props from './props.js';
import { renderContent } from '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isFunction';
import 'lodash/isObject';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(prefix, "-divider");
var _Divider = defineComponent({
  name: "TDivider",
  props: _objectSpread({}, props),
  render: function render() {
    var _ref;

    var theme = this.theme,
        dashed = this.dashed,
        align = this.align;
    var children = renderContent(this, "default", "content");
    var dividerClassNames = ["".concat(name), ["".concat(name, "--").concat(theme)], (_ref = {}, _defineProperty(_ref, "".concat(name, "--dashed"), !!dashed), _defineProperty(_ref, "".concat(name, "--with-text"), !!children), _defineProperty(_ref, "".concat(name, "--with-text-").concat(align), !!children), _ref)];
    return createVNode("div", mergeProps({
      "class": dividerClassNames
    }, this.$attrs), [children && createVNode("span", {
      "class": "".concat(name, "__inner-text")
    }, [children])]);
  }
});

export { _Divider as default };
//# sourceMappingURL=divider.js.map
