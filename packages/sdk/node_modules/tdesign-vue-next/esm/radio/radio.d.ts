export declare const radioBtnName: string;
declare const _default: import("vue").DefineComponent<{
    allowUncheck: BooleanConstructor;
    checked: BooleanConstructor;
    defaultChecked: BooleanConstructor;
    default: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    label: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    value: {
        type: import("vue").PropType<import("./type").RadioValue>;
        default: any;
    };
    onChange: import("vue").PropType<(checked: boolean, context: {
        e: Event;
    }) => void>;
}, unknown, unknown, {}, {
    handleChange(e: Event): void;
    handleClick(e: Event): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "click")[], "change" | "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    allowUncheck: BooleanConstructor;
    checked: BooleanConstructor;
    defaultChecked: BooleanConstructor;
    default: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    label: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    value: {
        type: import("vue").PropType<import("./type").RadioValue>;
        default: any;
    };
    onChange: import("vue").PropType<(checked: boolean, context: {
        e: Event;
    }) => void>;
}>> & {
    onChange?: (...args: any[]) => any;
    onClick?: (...args: any[]) => any;
}, {
    name: string;
    value: import("./type").RadioValue;
    disabled: boolean;
    checked: boolean;
    allowUncheck: boolean;
    defaultChecked: boolean;
}>;
export default _default;
