/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import { defineComponent, createVNode } from 'vue';
import { prefix } from '../config.js';
import props from './list-item-meta-props.js';
import { renderContent, renderTNodeJSX } from '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isFunction';
import 'lodash/isObject';

var name = "".concat(prefix, "-list-item__meta");
var _ListItemMeta = defineComponent({
  name: "TListItemMeta",
  props: props,
  methods: {
    renderAvatar: function renderAvatar() {
      if (this.avatar || this.$slots.avatar) {
        console.warn("`avatar` is going to be deprecated, please use `image` instead");
      }

      var thumbnail = renderContent(this, "avatar", "image");
      if (!thumbnail) return;

      if (typeof thumbnail === "string") {
        return createVNode("div", {
          "class": "".concat(name, "-avatar")
        }, [createVNode("img", {
          "src": thumbnail
        }, null)]);
      }

      return createVNode("div", {
        "class": "".concat(name, "-avatar")
      }, [thumbnail]);
    }
  },
  render: function render() {
    var propsTitleContent = renderTNodeJSX(this, "title");
    var propsDescriptionContent = renderTNodeJSX(this, "description");
    var listItemMetaContent = [this.renderAvatar(), createVNode("div", {
      "class": "".concat(name, "-content")
    }, [propsTitleContent && createVNode("h3", {
      "class": "".concat(name, "-title")
    }, [propsTitleContent]), propsDescriptionContent && createVNode("p", {
      "class": "".concat(name, "-description")
    }, [propsDescriptionContent])])];
    return createVNode("div", {
      "class": name
    }, [listItemMetaContent]);
  }
});

export { _ListItemMeta as default };
//# sourceMappingURL=list-item-meta.js.map
