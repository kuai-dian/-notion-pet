import { VNodeChild } from 'vue';
import { ClassName } from '../common';
declare const _default: import("vue").DefineComponent<{
    asyncLoading: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    footer: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    header: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    split: BooleanConstructor;
    stripe: BooleanConstructor;
    onLoadMore: import("vue").PropType<(options: {
        e: MouseEvent;
    }) => void>;
    onScroll: import("vue").PropType<(options: {
        e: Event | WheelEvent;
        scrollTop: number;
        scrollBottom: number;
    }) => void>;
}, unknown, unknown, {
    listClass(): ClassName;
    loadingClass(): ClassName;
}, {
    renderLoading(): any;
    handleScroll(e: WheelEvent | Event): void;
    handleLoadMore(e: MouseEvent): void;
    renderContent(): VNodeChild;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("scroll" | "load-more")[], "scroll" | "load-more", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    asyncLoading: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    footer: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    header: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    split: BooleanConstructor;
    stripe: BooleanConstructor;
    onLoadMore: import("vue").PropType<(options: {
        e: MouseEvent;
    }) => void>;
    onScroll: import("vue").PropType<(options: {
        e: Event | WheelEvent;
        scrollTop: number;
        scrollBottom: number;
    }) => void>;
}>> & {
    onScroll?: (...args: any[]) => any;
    "onLoad-more"?: (...args: any[]) => any;
}, {
    split: boolean;
    size: "small" | "medium" | "large";
    layout: "horizontal" | "vertical";
    stripe: boolean;
}>;
export default _default;
