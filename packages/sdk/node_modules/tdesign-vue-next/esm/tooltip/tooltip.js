/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, createVNode, mergeProps } from 'vue';
import { prefix } from '../config.js';
import props from './props.js';
import popupProps from '../popup/props.js';
import { Popup } from '../popup/index.js';
import { renderTNodeJSX, renderContent } from '../utils/render-tnode.js';
import { emitEvent } from '../utils/event.js';
import '../popup/popup.js';
import '@babel/runtime/helpers/typeof';
import '@popperjs/core';
import '../_chunks/dep-b66bfe36.js';
import '../utils/classnames.js';
import '../utils/dom.js';
import 'lodash/isString';
import '../utils/easing.js';
import '../utils/set-style.js';
import '../utils/map-props.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/kebabCase';
import '../utils/withInstall.js';
import '../popup/style';
import '../popup/type.js';
import 'lodash/isEmpty';
import 'lodash/isFunction';
import 'lodash/isObject';
import '../utils/helper.js';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _Tooltip = defineComponent({
  name: "TTooltip",
  components: {
    Popup: Popup
  },
  props: _objectSpread(_objectSpread({}, popupProps), props),
  emits: ["visible-change"],
  data: function data() {
    return {
      timer: null,
      tooltipVisible: false
    };
  },
  computed: {
    tooltipOverlayClassName: function tooltipOverlayClassName() {
      return ["".concat(prefix, "-tooltip"), _defineProperty({}, "".concat(prefix, "-tooltip--").concat(this.theme), this.theme), this.overlayClassName];
    }
  },
  watch: {
    visible: function visible(_visible) {
      if (this.timer && !_visible) {
        clearTimeout(this.timer);
        this.timer = null;
      }
    }
  },
  created: function created() {
    var _this = this;

    if (this.duration && this.visible) {
      this.timer = setTimeout(function () {
        emitEvent(_this, "visible-change", false);
        clearTimeout(_this.timer);
        _this.timer = null;
      }, this.duration);
    }
  },
  methods: {
    onTipVisibleChange: function onTipVisibleChange(val, ctx) {
      if (this.timer && (ctx === null || ctx === void 0 ? void 0 : ctx.trigger) !== "document") return;
      emitEvent(this, "visible-change", val);
    },
    getPopupProps: function getPopupProps() {
      var _this2 = this;

      var r = _objectSpread(_objectSpread({
        showArrow: true
      }, this.$props), {}, {
        content: function content() {
          return renderTNodeJSX(_this2, "content");
        },
        "default": function _default() {
          return renderContent(_this2, "default", "triggerElement");
        },
        overlayClassName: this.tooltipOverlayClassName,
        onVisibleChange: this.onTipVisibleChange
      });

      return r;
    }
  },
  render: function render() {
    return createVNode(Popup, mergeProps({
      "visible": this.visible,
      "showArrow": this.showArrow
    }, this.getPopupProps()), null);
  }
});

export { _Tooltip as default };
//# sourceMappingURL=tooltip.js.map
