/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, createVNode, mergeProps } from 'vue';
import { prefix } from '../config.js';
import _TabPanel from './tab-panel.js';
import TTabNav from './tab-nav.js';
import props from './props.js';
import { emitEvent } from '../utils/event.js';
import { renderTNodeJSX } from '../utils/render-tnode.js';
import './tab-panel-props.js';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/debounce';
import 'tdesign-icons-vue-next';
import './tab-nav-item.js';
import '../utils/ripple.js';
import '../utils/set-style.js';
import '../utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/camelCase';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isFunction';
import 'lodash/isObject';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(prefix, "-tabs");
var _Tabs = defineComponent({
  name: name,
  components: {
    TTabPanel: _TabPanel,
    TTabNav: TTabNav
  },
  props: _objectSpread({}, props),
  emits: ["change", "add", "remove", "update:value"],
  data: function data() {
    return {
      panels: [],
      listPanels: []
    };
  },
  methods: {
    onAddTab: function onAddTab(e) {
      emitEvent(this, "add", {
        e: e
      });
    },
    onChangeTab: function onChangeTab(value) {
      emitEvent(this, "change", value);
    },
    onRemoveTab: function onRemoveTab(_ref) {
      var e = _ref.e,
          value = _ref.value,
          index = _ref.index;
      var eventData = {
        value: value,
        index: index,
        e: e
      };
      emitEvent(this, "remove", eventData);
    },
    getSlotPanels: function getSlotPanels() {
      var content = renderTNodeJSX(this, "default");
      if (!content) return [];
      content = content.map(function (item) {
        if (item.children && Array.isArray(item.children)) return item.children;
        return item;
      }).flat().filter(function (item) {
        return item.type.name === "TTabPanel";
      });
      return content;
    },
    renderHeader: function renderHeader() {
      var _this$list, _ref2;

      var panels = ((_this$list = this.list) !== null && _this$list !== void 0 && _this$list.length ? this.list : this.getSlotPanels()) || [];
      var panelsData = panels.map(function (item) {
        var selfItem = item;

        if (item.props) {
          Object.keys(item.props).forEach(function (key) {
            selfItem[key] = item.props[key];
          });
        }

        return selfItem;
      });
      var tabNavProps = {
        theme: this.theme,
        value: this.value,
        size: this.size,
        disabled: this.disabled,
        placement: this.placement,
        addable: this.addable,
        panels: panelsData
      };
      return createVNode("div", {
        "class": (_ref2 = {}, _defineProperty(_ref2, "".concat(prefix, "-tabs__header"), true), _defineProperty(_ref2, "".concat(prefix, "-is-").concat(this.placement), true), _ref2)
      }, [createVNode(TTabNav, mergeProps(tabNavProps, {
        "onChange": this.onChangeTab,
        "onAdd": this.onAddTab,
        "onRemove": this.onRemoveTab
      }), null)]);
    },
    renderContent: function renderContent() {
      var _this$list2,
          _this = this;

      var panels = this.getSlotPanels();

      if ((_this$list2 = this.list) !== null && _this$list2 !== void 0 && _this$list2.length) {
        return this.list.map(function (item) {
          return createVNode(_TabPanel, mergeProps(item, {
            "onRemove": _this.onRemoveTab
          }), null);
        });
      }

      if (panels && panels.length) {
        return createVNode("div", {
          "class": ["".concat(prefix, "-tabs__content")]
        }, [panels]);
      }

      console.warn("Tdesign error: list or slots is empty");
    }
  },
  render: function render() {
    return createVNode("div", {
      "class": ["".concat(prefix, "-tabs")]
    }, [this.placement !== "bottom" ? [this.renderHeader(), this.renderContent()] : [this.renderContent(), this.renderHeader()]]);
  }
});

export { _Tabs as default };
//# sourceMappingURL=tabs.js.map
