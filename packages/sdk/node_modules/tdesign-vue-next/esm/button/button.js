/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, computed, createVNode, withDirectives, mergeProps, resolveDirective } from 'vue';
import { prefix } from '../config.js';
import ClASSNAMES from '../utils/classnames.js';
import { Loading } from '../loading/index.js';
import props from './props.js';
import { renderContent, renderTNodeJSX } from '../utils/render-tnode.js';
import Ripple from '../utils/ripple.js';
import '../loading/loading.js';
import '@babel/runtime/helpers/slicedToArray';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../utils/dom.js';
import '../_chunks/dep-b66bfe36.js';
import 'lodash/isString';
import '../utils/easing.js';
import '../utils/transfer-dom.js';
import '../loading/props.js';
import '../utils/withInstall.js';
import '../loading/style';
import '../loading/type.js';
import '../loading/plugin.js';
import 'lodash/isEmpty';
import 'lodash/isFunction';
import 'lodash/isObject';
import '../utils/set-style.js';

var name = "".concat(prefix, "-button");
var TButton = defineComponent({
  name: "TButton",
  directives: {
    ripple: Ripple
  },
  inheritAttrs: false,
  props: props,
  setup: function setup(props2) {
    var isDisabledRef = computed(function () {
      return props2.disabled || props2.loading;
    });
    var mergeThemeRef = computed(function () {
      var theme = props2.theme,
          variant = props2.variant;
      if (theme) return theme;
      if (variant === "base") return "primary";
      return "default";
    });
    var buttonClassRef = computed(function () {
      var _ref;

      return ["".concat(name), ClASSNAMES.SIZE[props2.size], "".concat(name, "--variant-").concat(props2.variant), "".concat(name, "--theme-").concat(mergeThemeRef.value), (_ref = {}, _defineProperty(_ref, ClASSNAMES.STATUS.disabled, isDisabledRef.value), _defineProperty(_ref, ClASSNAMES.STATUS.loading, props2.loading), _defineProperty(_ref, "".concat(name, "--shape-").concat(props2.shape), props2.shape !== "rectangle"), _defineProperty(_ref, "".concat(name, "--ghost"), props2.ghost), _defineProperty(_ref, ClASSNAMES.SIZE.block, props2.block), _ref)];
    });
    return {
      isDisabled: isDisabledRef,
      mergeTheme: mergeThemeRef,
      buttonClass: buttonClassRef
    };
  },
  render: function render() {
    var buttonContent = renderContent(this, "default", "content");
    var icon = this.loading ? createVNode(Loading, {
      "inheritColor": true
    }, null) : renderTNodeJSX(this, "icon");
    var iconOnly = icon && !buttonContent;
    buttonContent = buttonContent ? createVNode("span", {
      "class": "".concat(name, "__text")
    }, [buttonContent]) : "";

    if (icon) {
      buttonContent = [icon, buttonContent];
    }

    return withDirectives(createVNode("button", mergeProps({
      "class": [].concat(_toConsumableArray(this.buttonClass), [_defineProperty({}, "".concat(name, "--icon-only"), iconOnly)]),
      "type": this.type,
      "disabled": this.disabled
    }, this.$attrs, {
      "onClick": this.onClick
    }), [buttonContent]), [[resolveDirective("ripple")]]);
  }
});

export { TButton as default };
//# sourceMappingURL=button.js.map
