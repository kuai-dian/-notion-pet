/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import { isVNode, defineComponent, watchEffect, ref, computed, reactive, provide, watch, onMounted, createVNode, resolveComponent } from 'vue';
import { useEmitEvent } from '../hooks/event.js';
import log from '../_common/js/log/log.js';
import { prefix } from '../config.js';
import props from './head-menu-props.js';
import { Tabs, TabPanel } from '../tabs/index.js';
import { renderContent, renderTNodeJSX } from '../utils/render-tnode.js';
import VMenu from './v-menu.js';
import '../utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import '@babel/runtime/helpers/defineProperty';
import 'lodash/camelCase';
import '../tabs/tabs.js';
import '../tabs/tab-panel.js';
import '../tabs/tab-panel-props.js';
import '../tabs/tab-nav.js';
import 'lodash/debounce';
import 'tdesign-icons-vue-next';
import '../tabs/tab-nav-item.js';
import '../utils/event.js';
import '../utils/ripple.js';
import '../utils/set-style.js';
import '../tabs/props.js';
import '../utils/map-props.js';
import 'lodash/kebabCase';
import '../utils/withInstall.js';
import '../tabs/style';
import '../tabs/type.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isFunction';
import 'lodash/isObject';
import '@babel/runtime/helpers/classCallCheck';
import '@babel/runtime/helpers/createClass';

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}

var _HeadMenu = defineComponent({
  name: "THeadMenu",
  components: {
    Tabs: Tabs,
    TabPanel: TabPanel
  },
  props: props,
  emits: ["change", "expand"],
  setup: function setup(props2, ctx) {
    var emitEvent = useEmitEvent(props2, ctx.emit);
    watchEffect(function () {
      if (ctx.slots.options) {
        log.warnOnce("TMenu", "`options` slot is going to be deprecated, please use `operations` for slot instead.");
      }
    });
    var activeValue = ref(props2.defaultValue || props2.value);
    var activeValues = ref([]);
    var expandValues = ref(props2.defaultExpanded || props2.expanded || []);
    var theme = computed(function () {
      return props2.theme;
    });
    var menuClass = computed(function () {
      return ["".concat(prefix, "-menu"), "".concat(prefix, "-head-menu"), "".concat(prefix, "-menu--").concat(props2.theme)];
    });
    var mode = ref(props2.expandType);
    var submenu = reactive([]);
    var vMenu = new VMenu({
      isMutex: true,
      expandValues: expandValues.value
    });
    provide("TdMenu", {
      mode: mode,
      theme: theme,
      vMenu: vMenu,
      isHead: true,
      expandValues: expandValues,
      activeValue: activeValue,
      activeValues: activeValues,
      select: function select(value) {
        emitEvent("change", value);
      },
      open: function open(value, type) {
        var expanded = _toConsumableArray(expandValues.value);

        var index = expanded.indexOf(value);

        if (mode.value === "popup") {
          if (type === "add") {
            if (index === -1) {
              expanded.push(value);
            }
          } else if (type === "remove") {
            expanded.splice(index, 1);
          }
        } else {
          expanded.splice(0, 1);

          if (index === -1) {
            expanded.push(value);
          }
        }

        emitEvent("expand", expanded);
      }
    });

    var handleTabChange = function handleTabChange(value) {
      emitEvent("change", value);
    };

    var handleSubmenuExpand = function handleSubmenuExpand(value) {
      var ans = vMenu.getChild(value);
      submenu.length = 0;
      submenu.push.apply(submenu, _toConsumableArray(ans));
    };

    watch(function () {
      return props2.expanded;
    }, function (value) {
      expandValues.value = value;

      if (mode.value === "normal") {
        handleSubmenuExpand(value[0]);
      }
    });

    var updateActiveValues = function updateActiveValues(value) {
      activeValue.value = value;
      activeValues.value = vMenu.select(value);
    };

    watch(function () {
      return props2.value;
    }, updateActiveValues);
    watch(function () {
      return props2.defaultValue;
    }, updateActiveValues);
    watch(function () {
      return props2.expandType;
    }, function (value) {
      mode.value = value;
    });
    onMounted(function () {
      var _expandValues$value;

      activeValues.value = vMenu.select(activeValue.value);

      if (((_expandValues$value = expandValues.value) === null || _expandValues$value === void 0 ? void 0 : _expandValues$value.length) > 0) {
        handleSubmenuExpand(expandValues.value[0]);
      }
    });
    return {
      mode: mode,
      menuClass: menuClass,
      expandValues: expandValues,
      activeValue: activeValue,
      activeValues: activeValues,
      submenu: submenu,
      handleTabChange: handleTabChange
    };
  },
  methods: {
    renderNormalSubmenu: function renderNormalSubmenu() {
      var _slot;

      if (this.submenu.length === 0) return null;
      return createVNode("ul", {
        "class": ["".concat(prefix, "-head-menu__submenu"), "".concat(prefix, "-submenu")]
      }, [createVNode(resolveComponent("t-tabs"), {
        "value": this.activeValue,
        "onChange": this.handleTabChange
      }, _isSlot(_slot = this.submenu.map(function (item) {
        var _item$vnode$;

        return createVNode(resolveComponent("t-tab-panel"), {
          "value": item.value,
          "label": (_item$vnode$ = item.vnode()[0]) === null || _item$vnode$ === void 0 ? void 0 : _item$vnode$.children
        }, null);
      })) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      })]);
    }
  },
  render: function render() {
    var operations = renderContent(this, "operations", "options");
    var logo = renderTNodeJSX(this, "logo");
    return createVNode("div", {
      "class": this.menuClass
    }, [createVNode("div", {
      "class": "".concat(prefix, "-head-menu__inner")
    }, [logo && createVNode("div", {
      "class": "".concat(prefix, "-menu__logo")
    }, [logo]), createVNode("ul", {
      "class": "".concat(prefix, "-menu")
    }, [renderContent(this, "default", "content")]), operations && createVNode("div", {
      "class": "".concat(prefix, "-menu__operations")
    }, [operations])]), this.mode === "normal" && this.renderNormalSubmenu()]);
  }
});

export { _HeadMenu as default };
//# sourceMappingURL=head-menu.js.map
