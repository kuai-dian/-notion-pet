import { MenuValue } from './type';
declare const _default: import("vue").DefineComponent<{
    collapsed: BooleanConstructor;
    expanded: {
        type: import("vue").PropType<MenuValue[]>;
    };
    defaultExpanded: {
        type: import("vue").PropType<MenuValue[]>;
    };
    expandMutex: BooleanConstructor;
    expandType: {
        type: import("vue").PropType<"normal" | "popup">;
        default: "normal" | "popup";
        validator(val: "normal" | "popup"): boolean;
    };
    logo: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    operations: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    theme: {
        type: import("vue").PropType<"dark" | "light">;
        default: "dark" | "light";
        validator(val: "dark" | "light"): boolean;
    };
    value: {
        type: import("vue").PropType<MenuValue>;
    };
    defaultValue: {
        type: import("vue").PropType<MenuValue>;
    };
    width: {
        type: import("vue").PropType<string | number | (string | number)[]>;
        default: string;
    };
    onChange: import("vue").PropType<(value: MenuValue) => void>;
    onCollapsed: import("vue").PropType<(options: {
        collapsed: boolean;
        e?: MouseEvent;
    }) => void>;
    onExpand: import("vue").PropType<(value: MenuValue[]) => void>;
}, {
    styles: {
        [className: string]: any;
    };
    menuClass: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    innerClasses: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    activeValue: import("vue").Ref<MenuValue>;
    activeValues: import("vue").Ref<any[]>;
    expandValues: import("vue").Ref<MenuValue[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "collapsed" | "expand")[], "change" | "collapsed" | "expand", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    collapsed: BooleanConstructor;
    expanded: {
        type: import("vue").PropType<MenuValue[]>;
    };
    defaultExpanded: {
        type: import("vue").PropType<MenuValue[]>;
    };
    expandMutex: BooleanConstructor;
    expandType: {
        type: import("vue").PropType<"normal" | "popup">;
        default: "normal" | "popup";
        validator(val: "normal" | "popup"): boolean;
    };
    logo: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    operations: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    theme: {
        type: import("vue").PropType<"dark" | "light">;
        default: "dark" | "light";
        validator(val: "dark" | "light"): boolean;
    };
    value: {
        type: import("vue").PropType<MenuValue>;
    };
    defaultValue: {
        type: import("vue").PropType<MenuValue>;
    };
    width: {
        type: import("vue").PropType<string | number | (string | number)[]>;
        default: string;
    };
    onChange: import("vue").PropType<(value: MenuValue) => void>;
    onCollapsed: import("vue").PropType<(options: {
        collapsed: boolean;
        e?: MouseEvent;
    }) => void>;
    onExpand: import("vue").PropType<(value: MenuValue[]) => void>;
}>> & {
    onChange?: (...args: any[]) => any;
    onCollapsed?: (...args: any[]) => any;
    onExpand?: (...args: any[]) => any;
}, {
    width: string | number | (string | number)[];
    theme: "dark" | "light";
    expandType: "normal" | "popup";
    collapsed: boolean;
    expandMutex: boolean;
}>;
export default _default;
