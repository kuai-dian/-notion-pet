/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, createVNode, resolveComponent } from 'vue';
import { prefix } from '../config.js';
import { Popup } from '../popup/index.js';
import { emitEvent } from '../utils/event.js';
import '../popup/popup.js';
import '@babel/runtime/helpers/typeof';
import '@popperjs/core';
import '../_chunks/dep-b66bfe36.js';
import '../utils/classnames.js';
import '../utils/dom.js';
import 'lodash/isString';
import '../utils/easing.js';
import '../popup/props.js';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isFunction';
import 'lodash/isObject';
import '../utils/set-style.js';
import '../utils/map-props.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/kebabCase';
import '../utils/withInstall.js';
import '../popup/style';
import '../popup/type.js';
import '../utils/helper.js';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';

var name = "".concat(prefix, "-slider-button");
var _SliderButton = defineComponent({
  name: name,
  components: {
    TPopup: Popup
  },
  props: {
    value: {
      type: [Number],
      "default": 0
    },
    vertical: {
      type: Boolean,
      "default": false
    },
    popupClass: {
      type: String,
      "default": ""
    },
    tooltipProps: {
      type: [Boolean, Object],
      "default": true
    }
  },
  emits: ["input"],
  data: function data() {
    return {
      hovering: false,
      dragging: false,
      isClick: false,
      startX: 0,
      startY: 0,
      currentX: 0,
      currentY: 0,
      startPos: 0,
      newPos: null,
      prevValue: this.value,
      showTooltip: true,
      trigger: "hover",
      showArrow: true,
      overlayStyle: void 0,
      overlayClassName: void 0,
      attach: "body",
      popupVisible: false
    };
  },
  computed: {
    placement: function placement() {
      if (this.tooltipProps instanceof Object) {
        var placement = this.tooltipProps.placement;
        if (placement) return placement;
      }

      return this.vertical ? "right" : "top";
    },
    rangeDiff: function rangeDiff() {
      return this.max - this.min;
    },
    formatValue: function formatValue() {
      return this.enableFormat && this.$parent.formatpopup(this.value) || this.value;
    },
    disabled: function disabled() {
      return this.$parent.disabled;
    },
    max: function max() {
      return this.$parent.max;
    },
    min: function min() {
      return this.$parent.min;
    },
    step: function step() {
      return this.$parent.step;
    },
    precision: function precision() {
      return this.$parent.precision;
    },
    currentPos: function currentPos() {
      return "".concat((this.value - this.min) / this.rangeDiff * 100, "%");
    },
    enableFormat: function enableFormat() {
      return this.$parent.formatpopup instanceof Function;
    },
    wrapperStyle: function wrapperStyle() {
      return this.vertical ? {
        bottom: this.currentPos
      } : {
        left: this.currentPos
      };
    }
  },
  watch: {
    dragging: function dragging(val) {
      this.$parent.dragging = val;
    }
  },
  mounted: function mounted() {
    this.showTooltip = !this.tooltipProps === false;
    this.setTooltipProps();
  },
  methods: {
    setTooltipProps: function setTooltipProps() {
      if (this.tooltipProps instanceof Object) {
        var _this$tooltipProps = this.tooltipProps,
            trigger = _this$tooltipProps.trigger,
            destroyOnHide = _this$tooltipProps.destroyOnHide,
            showArrow = _this$tooltipProps.showArrow,
            overlayStyle = _this$tooltipProps.overlayStyle,
            overlayClassName = _this$tooltipProps.overlayClassName,
            attach = _this$tooltipProps.attach;

        if (!this.empty(trigger)) {
          this.trigger = trigger;
        }

        this.destroyOnHide = destroyOnHide;

        if (!this.empty(showArrow)) {
          this.showArrow = showArrow;
        }

        this.overlayStyle = overlayStyle;
        this.overlayClassName = overlayClassName;

        if (!this.empty(attach)) {
          this.attach = attach;
        }
      }
    },
    showPopup: function showPopup() {
      this.popupVisible = true;
    },
    hidePopup: function hidePopup() {
      this.popupVisible = false;
    },
    handleMouseEnter: function handleMouseEnter() {
      this.hovering = true;
      this.$refs.button.focus();
      this.showPopup();
    },
    handleMouseLeave: function handleMouseLeave() {
      this.hovering = false;

      if (!this.dragging) {
        this.hidePopup();
      }
    },
    onButtonDown: function onButtonDown(event) {
      if (this.disabled) {
        return;
      }

      event.preventDefault();
      this.onDragStart(event);
      window.addEventListener("mousemove", this.onDragging);
      window.addEventListener("mouseup", this.onDragEnd);
      window.addEventListener("touchmove", this.onDragging);
      window.addEventListener("touchend", this.onDragEnd);
      window.addEventListener("contextmenu", this.onDragEnd);
    },
    onNativeKeyDown: function onNativeKeyDown(e) {
      var code = e.code;
      e.preventDefault();

      if (code === "ArrowDown" || code === "ArrowLeft") {
        this.onKeyDown("sub");
      }

      if (code === "ArrowUp" || code === "ArrowRight") {
        this.onKeyDown("add");
      }
    },
    onKeyDown: function onKeyDown(state) {
      if (this.disabled) {
        return;
      }

      var stepLength = this.step / this.rangeDiff * 100;

      if (state === "sub") {
        stepLength = -stepLength;
      }

      this.newPos = parseFloat(this.currentPos) + stepLength;
      this.setPosition(this.newPos);
    },
    onDragStart: function onDragStart(event) {
      this.dragging = true;
      this.isClick = true;
      var type = event.type;
      var clientY = event.clientY,
          clientX = event.clientX;

      if (type === "touchstart") {
        var touch = event.touches;
        var _ref = [touch[0].clientY, touch[0].clientX];
        clientY = _ref[0];
        clientX = _ref[1];
      }

      if (this.vertical) {
        this.startY = clientY;
      } else {
        this.startX = clientX;
      }

      this.startPos = parseFloat(this.currentPos);
      this.newPos = this.startPos;
    },
    onDragging: function onDragging(e) {
      var event = e;

      if (!this.dragging) {
        return;
      }

      this.isClick = false;
      this.$parent.resetSize();
      var diff = 0;
      var parentSliderSize = this.$parent.sliderSize;

      if (this.vertical) {
        this.currentY = event.clientY;
        diff = this.startY - this.currentY;
      } else {
        this.currentX = event.clientX;
        diff = this.currentX - this.startX;
      }

      if (event.type === "touchmove") {
        var touch = event.touches;
        var _ref2 = [touch[0].clientY, touch[0].clientX],
            clientY = _ref2[0],
            clientX = _ref2[1];
        this.clientY = clientY;
        this.clientX = clientX;
      }

      diff = diff / parentSliderSize * 100;
      this.newPos = this.startPos + diff;
      this.setPosition(this.newPos);
    },
    onDragEnd: function onDragEnd() {
      var _this = this;

      if (this.dragging) {
        setTimeout(function () {
          _this.dragging = false;

          _this.hidePopup();

          if (!_this.isClick) {
            _this.setPosition(_this.newPos);
          }
        }, 0);
        window.removeEventListener("mousemove", this.onDragging);
        window.removeEventListener("touchmove", this.onDragging);
        window.removeEventListener("mouseup", this.onDragEnd);
        window.removeEventListener("touchend", this.onDragEnd);
        window.removeEventListener("contextmenu", this.onDragEnd);
      }
    },
    setPosition: function setPosition(pos) {
      var _this2 = this;

      var newPos = pos;

      if (newPos === null || Number.isNaN(newPos)) {
        return;
      }

      if (newPos > 100) {
        newPos = 100;
      } else if (newPos < 0) {
        newPos = 0;
      }

      var perStepLen = 100 * this.step / this.rangeDiff;
      var steps = Math.round(newPos / perStepLen);
      var value = steps * perStepLen * this.rangeDiff * 0.01;
      value += this.min;
      value = Number(parseFloat("".concat(value)).toFixed(this.precision));
      emitEvent(this, "input", value);
      this.$nextTick(function () {
        _this2.$refs.popup && _this2.$refs.popup.updatePopper();
      });

      if (!this.dragging && this.value !== this.prevValue) {
        this.prevValue = this.value;
      }
    },
    empty: function empty(str) {
      return str === void 0 || str === null;
    }
  },
  render: function render() {
    var _this3 = this;

    return createVNode("div", {
      "ref": "button",
      "class": "".concat(prefix, "-slider__button-wrapper"),
      "style": this.wrapperStyle,
      "tabindex": "0",
      "show-tooltip": this.showTooltip,
      "disabled": this.disabled,
      "onmouseenter": this.handleMouseEnter,
      "onmouseleave": this.handleMouseLeave,
      "onmousedown": this.onButtonDown,
      "ontouchstart": this.onButtonDown,
      "onfocus": this.handleMouseEnter,
      "onblur": this.handleMouseLeave,
      "onKeydown": this.onNativeKeyDown
    }, [createVNode(resolveComponent("t-popup"), {
      "visible": this.popupVisible,
      "ref": "popup",
      "popper-class": this.popupClass,
      "disabled": !this.showTooltip,
      "content": String(this.formatValue),
      "placement": this.placement,
      "trigger": this.trigger,
      "showArrow": this.showArrow,
      "overlayStyle": this.overlayStyle,
      "overlayClassName": this.overlayClassName,
      "attach": this.attach
    }, {
      "default": function _default() {
        return [createVNode("div", {
          "class": ["".concat(prefix, "-slider__button"), _defineProperty({}, "".concat(prefix, "-slider__button--dragging"), _this3.dragging)]
        }, null)];
      }
    })]);
  }
});

export { _SliderButton as default };
//# sourceMappingURL=slider-button.js.map
