import { ComponentPublicInstance } from 'vue';
declare const _default: import("vue").DefineComponent<{
    close: {
        type: import("vue").PropType<string | boolean | import("../common").TNode<any>>;
        default: boolean;
    };
    default: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    icon: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    maxLine: {
        type: NumberConstructor;
        default: number;
    };
    message: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    operation: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    theme: {
        type: import("vue").PropType<"error" | "success" | "warning" | "info">;
        default: "error" | "success" | "warning" | "info";
        validator(val: "error" | "success" | "warning" | "info"): boolean;
    };
    title: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    onClose: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClosed: import("vue").PropType<(context: {
        e: TransitionEvent;
    }) => void>;
}, {
    ele: import("vue").Ref<HTMLElement>;
    description: import("vue").Ref<HTMLElement>;
    visible: import("vue").Ref<boolean>;
    collapsed: import("vue").Ref<boolean>;
    renderIcon: () => JSX.Element;
    renderTitle: (context: ComponentPublicInstance) => JSX.Element;
    renderMessage: (context: ComponentPublicInstance) => JSX.Element;
    renderDescription: (context: ComponentPublicInstance) => JSX.Element;
    renderContent: (context: ComponentPublicInstance) => JSX.Element;
    renderClose: () => JSX.Element;
    handleClose: (e: MouseEvent) => void;
    handleCloseEnd: (e: TransitionEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("closed" | "close")[], "closed" | "close", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    close: {
        type: import("vue").PropType<string | boolean | import("../common").TNode<any>>;
        default: boolean;
    };
    default: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    icon: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    maxLine: {
        type: NumberConstructor;
        default: number;
    };
    message: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    operation: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    theme: {
        type: import("vue").PropType<"error" | "success" | "warning" | "info">;
        default: "error" | "success" | "warning" | "info";
        validator(val: "error" | "success" | "warning" | "info"): boolean;
    };
    title: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    onClose: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClosed: import("vue").PropType<(context: {
        e: TransitionEvent;
    }) => void>;
}>> & {
    onClose?: (...args: any[]) => any;
    onClosed?: (...args: any[]) => any;
}, {
    close: string | boolean | import("../common").TNode<any>;
    theme: "error" | "success" | "warning" | "info";
    maxLine: number;
}>;
export default _default;
