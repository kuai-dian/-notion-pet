/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, ref, createVNode, onMounted, onBeforeUnmount, mergeProps } from 'vue';
import { InfoCircleFilledIcon, CheckCircleFilledIcon, ErrorCircleFilledIcon, HelpCircleFilledIcon, CloseIcon } from 'tdesign-icons-vue-next';
import { prefix } from '../config.js';
import { addClass, on, off } from '../utils/dom.js';
import props from './props.js';
import { renderTNodeJSX } from '../utils/render-tnode.js';
import { useEmitEvent } from '../hooks/event.js';
import { useIcon } from '../hooks/icon.js';
import '../_chunks/dep-b66bfe36.js';
import 'lodash/isString';
import '../utils/easing.js';
import 'lodash/isEmpty';
import 'lodash/isFunction';
import 'lodash/isObject';
import '../utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';

var name = "".concat(prefix, "-alert");
var _Alert = defineComponent({
  name: "TAlert",
  props: props,
  emits: ["close", "closed"],
  setup: function setup(props2, _ref) {
    var slots = _ref.slots,
        emit = _ref.emit;
    var emitEvent = useEmitEvent(props2, emit);
    var ele = ref(null);
    var description = ref(null);
    var descHeight = ref(0);
    var visible = ref(true);
    var collapsed = ref(true);

    var renderIcon = function renderIcon() {
      var Component = {
        info: InfoCircleFilledIcon,
        success: CheckCircleFilledIcon,
        warning: ErrorCircleFilledIcon,
        error: ErrorCircleFilledIcon,
        question: HelpCircleFilledIcon
      };
      var iconContent = useIcon(props2, slots, "icon", Component);
      return iconContent ? createVNode("div", {
        "class": "".concat(name, "__icon")
      }, [iconContent]) : null;
    };

    var renderClose = function renderClose() {
      var close = props2.close;
      var closeContent = null;

      if (close === true || close === "") {
        closeContent = createVNode(CloseIcon, null, null);
      } else if (typeof close === "string") {
        closeContent = close;
      } else {
        closeContent = useIcon(props2, slots, "close");
      }

      return closeContent ? createVNode("div", {
        "class": "".concat(name, "__close"),
        "onClick": handleClose
      }, [closeContent]) : null;
    };

    var renderTitle = function renderTitle(context) {
      var titleContent = renderTNodeJSX(context, "title");
      return titleContent ? createVNode("div", {
        "class": "".concat(name, "__title")
      }, [" ", titleContent]) : null;
    };

    var renderMessage = function renderMessage(context) {
      var operationContent = renderTNodeJSX(context, "operation");
      return createVNode("div", {
        "class": "".concat(name, "__message")
      }, [renderDescription(context), operationContent ? createVNode("div", {
        "class": "".concat(name, "__operation")
      }, [operationContent]) : null]);
    };

    var renderDescription = function renderDescription(context) {
      var _description$value, _description$value$ch;

      var messageContent;
      messageContent = renderTNodeJSX(context, "default");

      if (!messageContent) {
        messageContent = renderTNodeJSX(context, "message");
      }

      var contentLength = Array.isArray(messageContent) ? messageContent.length : 1;
      var hasCollapse = props2.maxLine > 0 && props2.maxLine < contentLength;
      var height = (_description$value = description.value) === null || _description$value === void 0 ? void 0 : (_description$value$ch = _description$value.children[0]) === null || _description$value$ch === void 0 ? void 0 : _description$value$ch.offsetHeight;

      if (hasCollapse && collapsed.value) {
        messageContent = messageContent.slice(0, props2.maxLine);
        height && (description.value.style.height = "".concat(descHeight.value, "px"));
      } else if (hasCollapse) {
        height && (description.value.style.height = "".concat(height * (contentLength - props2.maxLine) + descHeight.value, "px"));
      }

      return createVNode("div", {
        "class": "".concat(name, "__description"),
        "ref": "description"
      }, [hasCollapse ? messageContent.map(function (content) {
        return createVNode("div", null, [content]);
      }) : messageContent, hasCollapse ? createVNode("div", {
        "class": "t-alert__collapse",
        "onClick": function onClick() {
          collapsed.value = !collapsed.value;
        }
      }, [collapsed.value ? "\u5C55\u5F00\u5168\u90E8" : "\u6536\u8D77"]) : null]);
    };

    var renderContent = function renderContent(context) {
      return createVNode("div", {
        "class": "".concat(name, "__content")
      }, [renderTitle(context), renderMessage(context)]);
    };

    var handleClose = function handleClose(e) {
      emitEvent("close", {
        e: e
      });
      addClass(ele.value, "".concat(name, "--closing"));
    };

    var handleCloseEnd = function handleCloseEnd(e) {
      if (e.propertyName === "opacity") {
        visible.value = false;
        emitEvent("closed", {
          e: e
        });
      }
    };

    onMounted(function () {
      on(ele.value, "transitionend", handleCloseEnd);
      descHeight.value = description.value.offsetHeight;
    });
    onBeforeUnmount(function () {
      off(ele.value, "transitionend", handleCloseEnd);
    });
    return {
      ele: ele,
      description: description,
      visible: visible,
      collapsed: collapsed,
      renderIcon: renderIcon,
      renderTitle: renderTitle,
      renderMessage: renderMessage,
      renderDescription: renderDescription,
      renderContent: renderContent,
      renderClose: renderClose,
      handleClose: handleClose,
      handleCloseEnd: handleCloseEnd
    };
  },
  render: function render() {
    var theme = this.theme,
        visible = this.visible,
        $attrs = this.$attrs,
        renderIcon = this.renderIcon,
        renderContent = this.renderContent,
        renderClose = this.renderClose;
    var CLASS = ["".concat(name), "".concat(name, "--").concat(theme), _defineProperty({}, "".concat(prefix, "-is-hidden"), !visible)];
    return createVNode("div", mergeProps({
      "class": CLASS
    }, $attrs, {
      "ref": "ele"
    }), [renderIcon(), renderContent(this), renderClose()]);
  }
});

export { _Alert as default };
//# sourceMappingURL=alert.js.map
