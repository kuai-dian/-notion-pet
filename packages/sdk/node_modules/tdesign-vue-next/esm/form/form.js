/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, createVNode, mergeProps } from 'vue';
import _regeneratorRuntime from '@babel/runtime/regenerator';
import isEmpty from 'lodash/isEmpty';
import { prefix } from '../config.js';
import props from './props.js';
import { CLASS_NAMES, FORM_ITEM_CLASS_PREFIX } from './const.js';
import { emitEvent } from '../utils/event.js';
import '../utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/camelCase';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(prefix, "-form");
var _Form = defineComponent({
  name: "TForm",
  provide: function provide() {
    return {
      form: this
    };
  },
  props: _objectSpread({}, props),
  emits: ["validate", "submit", "reset", "form-item-destroyed"],
  data: function data() {
    return {
      children: []
    };
  },
  computed: {
    formClass: function formClass() {
      return [CLASS_NAMES.form, _defineProperty({}, "".concat(name, "-inline"), this.layout === "inline")];
    }
  },
  methods: {
    getFirstError: function getFirstError(r) {
      if (r === true) return;

      var _Object$keys = Object.keys(r),
          _Object$keys2 = _slicedToArray(_Object$keys, 1),
          firstKey = _Object$keys2[0];

      if (this.scrollToFirstError) {
        this.scrollTo(".".concat(FORM_ITEM_CLASS_PREFIX + firstKey));
      }

      return r[firstKey][0].message;
    },
    scrollTo: function scrollTo(selector) {
      var dom = this.$el.querySelector(selector);
      var behavior = this.scrollToFirstError;
      dom && dom.scrollIntoView({
        behavior: behavior
      });
    },
    isFunction: function isFunction(val) {
      return typeof val === "function";
    },
    needValidate: function needValidate(name2, fields) {
      if (!fields || !Array.isArray(fields)) return true;
      return fields.indexOf(name2) !== -1;
    },
    validate: function validate(param) {
      var _this = this;

      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _ref2, fields, _ref2$trigger, trigger, list, arr, r, result;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _ref2 = param || {}, fields = _ref2.fields, _ref2$trigger = _ref2.trigger, trigger = _ref2$trigger === void 0 ? "all" : _ref2$trigger;
                list = _this.children.filter(function (child) {
                  return _this.isFunction(child.validate) && _this.needValidate(child.name, fields);
                }).map(function (child) {
                  return child.validate(trigger);
                });
                _context.next = 4;
                return Promise.all(list);

              case 4:
                arr = _context.sent;
                r = arr.reduce(function (r2, err) {
                  return Object.assign(r2 || {}, err);
                });
                Object.keys(r).forEach(function (key) {
                  if (r[key] === true) {
                    delete r[key];
                  }
                });
                result = isEmpty(r) ? true : r;
                emitEvent(_this, "validate", {
                  validateResult: result,
                  firstError: _this.getFirstError(result)
                });
                return _context.abrupt("return", result);

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    submitHandler: function submitHandler(e) {
      var _this2 = this;

      if (this.preventSubmitDefault) {
        e && e.preventDefault();
        e && e.stopPropagation();
      }

      this.validate().then(function (r) {
        emitEvent(_this2, "submit", {
          validateResult: r,
          firstError: _this2.getFirstError(r),
          e: e
        });
      });
    },
    resetHandler: function resetHandler(e) {
      var _this3 = this;

      if (this.preventSubmitDefault) {
        e && e.preventDefault();
        e && e.stopPropagation();
      }

      this.children.filter(function (child) {
        return _this3.isFunction(child.resetField);
      }).map(function (child) {
        return child.resetField();
      });
      emitEvent(this, "reset", {
        e: e
      });
    },
    clearValidate: function clearValidate(fields) {
      var _this4 = this;

      this.children.forEach(function (child) {
        if (_this4.isFunction(child.resetHandler) && _this4.needValidate(child.name, fields)) {
          child.resetHandler();
        }
      });
    },
    reset: function reset() {
      this.resetHandler();
    },
    submit: function submit() {
      this.submitHandler();
    }
  },
  render: function render() {
    var _this5 = this;

    return createVNode("form", mergeProps({
      "ref": "form",
      "class": this.formClass,
      "onSubmit": function onSubmit(e) {
        return _this5.submitHandler(e);
      },
      "onReset": function onReset(e) {
        return _this5.resetHandler(e);
      }
    }, this.$attrs), [this.$slots["default"] ? this.$slots["default"]() : []]);
  }
});

export { _Form as default };
//# sourceMappingURL=form.js.map
