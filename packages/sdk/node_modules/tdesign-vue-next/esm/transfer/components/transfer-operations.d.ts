import { createElementVNode, PropType } from 'vue';
import { TNode } from '../../common';
declare const _default: import("vue").DefineComponent<{
    leftDisabled: {
        type: BooleanConstructor;
        required: true;
    };
    rightDisabled: {
        type: BooleanConstructor;
        required: true;
    };
    operation: {
        type: PropType<(string | TNode<any>)[] | TNode<{
            direction: 'left' | 'right';
        }>>;
    };
}, unknown, unknown, {}, {
    moveToRight(): void;
    moveToLeft(): void;
    getIconRight(): JSX.Element;
    getIconLeft(): JSX.Element;
    getIcon(direction: 'left' | 'right'): () => JSX.Element;
    _renderButton(h: typeof createElementVNode, direction: 'left' | 'right'): import("vue").VNodeChild | TNode<any>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("moveToRight" | "moveToLeft")[], "moveToRight" | "moveToLeft", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    leftDisabled: {
        type: BooleanConstructor;
        required: true;
    };
    rightDisabled: {
        type: BooleanConstructor;
        required: true;
    };
    operation: {
        type: PropType<(string | TNode<any>)[] | TNode<{
            direction: 'left' | 'right';
        }>>;
    };
}>> & {
    onMoveToRight?: (...args: any[]) => any;
    onMoveToLeft?: (...args: any[]) => any;
}, {}>;
export default _default;
