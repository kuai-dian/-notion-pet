import { TransferValue, TransferItemOption } from '../interface';
import { PageInfo, TdPaginationProps } from '../../pagination';
declare const _default: import("vue").DefineComponent<Readonly<import("vue").ComponentPropsOptions<{
    [x: string]: unknown;
}>>, unknown, {
    filterValue: string;
    defaultCurrent: number;
    defaultPageSize: number;
}, {
    currentPage(): number;
    pageSize(): number;
    pageTotal(): number;
    filteredData(): Array<TransferItemOption>;
    curPageData(): Array<TransferItemOption>;
    paginationProps(): TdPaginationProps;
    hasFooter(): boolean;
    indeterminate(): boolean;
    isAllChecked(): boolean;
    totalCount(): number;
}, {
    handlePaginationChange(pageInfo: PageInfo): void;
    handleCheckedChange(val: Array<TransferValue>): void;
    handleCheckedAllChange(checked: boolean): void;
    scroll(e: Event): void;
    handleSearch(e: any): void;
    renderTitle(): JSX.Element;
    renderContent(): JSX.Element;
    renderEmpty(): JSX.Element;
    renderFooter(): any;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("scroll" | "search" | "pageChange" | "checkedChange")[], "search" | "scroll" | "pageChange" | "checkedChange", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<readonly string[] | import("vue").ExtractPropTypes<Readonly<import("vue").ComponentObjectPropsOptions<{
    [x: string]: unknown;
}>>>> & {
    onScroll?: (...args: any[]) => any;
    onCheckedChange?: (...args: any[]) => any;
    onSearch?: (...args: any[]) => any;
    onPageChange?: (...args: any[]) => any;
}, {
    [x: number]: string;
} | {}>;
export default _default;
