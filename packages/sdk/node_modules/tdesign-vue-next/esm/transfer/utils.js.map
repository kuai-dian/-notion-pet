{"version":3,"file":"utils.js","sources":["../../src/transfer/utils.ts"],"sourcesContent":["import { ComponentPublicInstance } from 'vue';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport { TransferListOptionBase, TransferItemOption, TdTransferProps, TransferValue, DataOption } from './interface';\n\nexport { emitEvent } from '../utils/event';\n\nexport const TRANSFER_NAME = 'TTransfer';\n\ninterface TreeNode {\n  children?: Array<TreeNode>;\n}\n\nfunction findTopNode(vm: ComponentPublicInstance): ComponentPublicInstance {\n  // 找到t-transfer这层父节点\n  if (vm.$options.name === 't-transfer') {\n    return vm;\n  }\n  if (vm.$parent) {\n    return findTopNode(vm.$parent);\n  }\n  return vm;\n}\n\nfunction getTransferListOption<T>(prop: T | Array<T>): TransferListOptionBase<T> {\n  if (Array.isArray(prop)) {\n    return {\n      source: prop[0],\n      target: prop[1],\n    };\n  }\n  return {\n    source: prop,\n    target: prop,\n  };\n}\n\nfunction getDataValues(\n  data: Array<TransferItemOption>,\n  filterValues: Array<TransferValue>,\n  {\n    isTreeMode = false,\n    include = true, // true=保留filterValues，false=删除filterValues中元素\n  } = {},\n): Array<TransferValue> {\n  // 用于处理 tree 组件这种数据结构是树形的\n  if (isTreeMode) {\n    let result: Array<TransferValue> = [];\n    if (data) {\n      for (let i = 0; i < data.length; i++) {\n        const item = data[i];\n        const isInclude = filterValues.includes(item.value);\n        if (!include && isInclude) {\n          continue; // 排除模式下子元素一律排除\n        }\n\n        // 只找叶子节点\n        if (item.children && item.children.length > 0) {\n          const childResult = getDataValues(item.children, filterValues, {\n            isTreeMode,\n            include,\n          });\n          result = result.concat(childResult);\n        } else if ((include && isInclude) || (!include && !isInclude)) {\n          result.push(item.value);\n        }\n      }\n    }\n    return result;\n  }\n  return data\n    .filter((item) => {\n      const isInclude = filterValues.includes(item.value);\n      return ((include && isInclude) || (!include && !isInclude)) && !item.disabled;\n    })\n    .map((item) => item.value);\n}\n\nfunction getTransferData(\n  data: Array<DataOption>,\n  keys: TdTransferProps['keys'],\n  isTreeMode = false,\n): Array<TransferItemOption> {\n  const list: Array<TransferItemOption> = data.map((transferDataItem, index): TransferItemOption => {\n    const labelKey = keys?.label || 'label';\n    const valueKey = keys?.value || 'value';\n    if (transferDataItem[labelKey] === undefined) {\n      throw new Error(`${labelKey} is not in DataOption ${JSON.stringify(transferDataItem)}`);\n    }\n    if (transferDataItem[valueKey] === undefined) {\n      throw new Error(`${valueKey} is not in DataOption ${JSON.stringify(transferDataItem)}`);\n    }\n    const result: TransferItemOption = {\n      label: transferDataItem[labelKey] as string,\n      value: transferDataItem[valueKey],\n      key: `key__value_${transferDataItem[valueKey]}_index_${index}`,\n      disabled: transferDataItem.disabled ?? false,\n      data: transferDataItem,\n    };\n    if (isTreeMode && transferDataItem.children) {\n      result.children = getTransferData(transferDataItem.children, keys, true);\n    }\n    return result;\n  });\n  return list;\n}\n\nfunction isAllNodeValid(data: TransferItemOption, filterValues: Array<TransferValue>, needMatch: boolean): boolean {\n  if (filterValues.includes(data.value)) {\n    return needMatch;\n  }\n  return false;\n}\n\nfunction isTreeNodeValid(data: TransferItemOption, filterValues: Array<TransferValue>, needMatch: boolean): boolean {\n  if (!data) return !needMatch;\n\n  if (filterValues.includes(data.value)) {\n    return needMatch;\n  }\n\n  if (data.children) {\n    return data.children.some((item) => isTreeNodeValid(item, filterValues, needMatch));\n  }\n  return !needMatch;\n}\n\n// 复制树并过滤节点\nfunction cloneTreeWithFilter(\n  sourceTree: TransferItemOption[],\n  targetTree: TransferItemOption[],\n  filterValues: Array<TransferValue>,\n  needMatch: boolean,\n) {\n  sourceTree.forEach((item) => {\n    let newNode: TransferItemOption;\n    if (isAllNodeValid(item, filterValues, needMatch)) {\n      // 如果当前节点直接命中，则复制所有子节点\n      newNode = cloneDeep<TransferItemOption>(item);\n      targetTree.push(newNode);\n    } else if (isTreeNodeValid(item, filterValues, needMatch)) {\n      // 如果有合法子节点，就复制这个节点\n      newNode = {\n        ...item,\n      };\n      delete newNode.children;\n      targetTree.push(newNode);\n      if (item.children) {\n        newNode.children = [];\n        cloneTreeWithFilter(item.children, newNode.children, filterValues, needMatch);\n        if (newNode.children.length === 0) {\n          delete newNode.children;\n        }\n      }\n    }\n  });\n}\n\n// 过滤列表，如果是树的话需要保持树的结构\nfunction filterTransferData(\n  data: Array<TransferItemOption>,\n  filterValues: Array<TransferValue>,\n  needMatch = true,\n  isTreeMode = false,\n) {\n  if (!isTreeMode) {\n    return data.filter((item) => {\n      const isMatch = filterValues.includes(item.value);\n      return needMatch ? isMatch : !isMatch;\n    });\n  }\n\n  const result: Array<TransferItemOption> = [];\n  cloneTreeWithFilter(data, result, filterValues, needMatch);\n  return result;\n}\n\n// 获取树节点的叶子数量\nfunction getLeefCount(nodes: Array<TreeNode>): number {\n  let total = 0;\n  nodes.forEach((child) => {\n    if (child.children && child.children.length > 0) {\n      total += getLeefCount(child.children);\n    } else {\n      total += 1;\n    }\n  });\n  return total;\n}\n\nexport {\n  findTopNode,\n  getTransferListOption,\n  getDataValues,\n  getTransferData,\n  cloneTreeWithFilter,\n  filterTransferData,\n  getLeefCount,\n};\n"],"names":["TRANSFER_NAME","findTopNode","vm","$options","name","$parent","getTransferListOption","prop","Array","isArray","source","target","getDataValues","data","filterValues","isTreeMode","include","result","i","length","item","isInclude","includes","value","children","childResult","concat","push","filter","disabled","map","getTransferData","keys","list","transferDataItem","index","labelKey","label","valueKey","Error","JSON","stringify","key","isAllNodeValid","needMatch","isTreeNodeValid","some","cloneTreeWithFilter","sourceTree","targetTree","forEach","newNode","cloneDeep","filterTransferData","isMatch","getLeefCount","nodes","total","child"],"mappings":"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"}