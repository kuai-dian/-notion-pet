import { VNode } from 'vue';
import { PopupProps } from '../popup';
import { TreeNodeModel, TreeNodeValue } from '../tree';
import { TreeSelectValue } from './type';
import { ClassName, TreeOptionData } from '../common';
import { RemoveOptions } from './interface';
declare const _default: import("vue").DefineComponent<{
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<import("../common").TNode<{
            value: TreeOptionData[];
            collapsedSelectedItems: TreeOptionData[];
            count: number;
        }>>;
    };
    data: {
        type: import("vue").PropType<TreeOptionData[]>;
        default: () => TreeOptionData[];
    };
    disabled: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
        default: string;
    };
    filter: {
        type: import("vue").PropType<(filterWords: string, option: TreeOptionData) => boolean>;
    };
    filterable: BooleanConstructor;
    loading: BooleanConstructor;
    loadingText: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
        default: string;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    popupProps: {
        type: import("vue").PropType<import("../popup").TdPopupProps>;
    };
    prefixIcon: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    showCheckAlll: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    treeProps: {
        type: import("vue").PropType<import("../tree").TreeProps>;
    };
    value: {
        type: import("vue").PropType<TreeSelectValue>;
    };
    defaultValue: {
        type: import("vue").PropType<TreeSelectValue>;
    };
    valueDisplay: {
        type: import("vue").PropType<import("../common").TNode<{
            value: TreeOptionData[];
            onClose: () => void;
        }>>;
    };
    valueType: {
        type: import("vue").PropType<"object" | "value">;
        default: "object" | "value";
        validator(val: "object" | "value"): boolean;
    };
    onBlur: import("vue").PropType<(context: {
        value: TreeSelectValue;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: TreeSelectValue, context: {
        node: TreeNodeModel<TreeOptionData>;
    }) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        value: TreeSelectValue;
        e: FocusEvent;
    }) => void>;
    onRemove: import("vue").PropType<(options: import("./type").RemoveOptions<TreeOptionData>) => void>;
    onSearch: import("vue").PropType<(filterWords: string) => void>;
}, unknown, {
    visible: boolean;
    isHover: boolean;
    focusing: boolean;
    defaultProps: import("../popup").TdPopupProps;
    filterText: string;
    filterByText: any;
    actived: any[];
    expanded: any[];
    nodeInfo: any;
    treeKey: number;
}, {
    classes(): ClassName;
    popupClass(): ClassName;
    isObjectValue(): boolean;
    checked(): Array<TreeSelectValue>;
    showArrow(): boolean;
    showLoading(): boolean;
    showClose(): boolean;
    showPlaceholder(): boolean;
    showFilter(): boolean;
    showTree(): boolean;
    popupObject(): PopupProps;
    selectedSingle(): string;
    selectedMultiple(): Array<TreeSelectValue>;
    multiLimitDisabled(): boolean;
    filterPlaceholder(): string;
    loadingTextSlot(): VNode;
    emptySlot(): VNode;
    prefixIconSlot(): VNode;
    realLabel(): string;
    realValue(): string;
    tagList(): Array<TreeSelectValue>;
}, {
    popupVisibleChange(visible: boolean): Promise<void>;
    removeTag(index: number, data: TreeOptionData, e: MouseEvent): void;
    change(value: TreeSelectValue, node: TreeNodeModel<TreeOptionData>): void;
    clear(e: MouseEvent): void;
    focus(e: FocusEvent): void;
    blur(e: FocusEvent): void;
    remove(options: RemoveOptions<TreeOptionData>): void;
    search(filterWords: string): void;
    treeNodeChange(value: Array<TreeNodeValue>, context: {
        node: TreeNodeModel<TreeOptionData>;
        e: MouseEvent;
    }): void;
    treeNodeActive(value: Array<TreeNodeValue>, context: {
        node: TreeNodeModel<TreeOptionData>;
        e: MouseEvent;
    }): void;
    treeNodeExpand(value: Array<TreeNodeValue>): void;
    onInput(): void;
    changeNodeInfo(): Promise<void>;
    treeRerender(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("remove" | "blur" | "change" | "focus" | "clear" | "search")[], "search" | "remove" | "clear" | "blur" | "change" | "focus", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<import("../common").TNode<{
            value: TreeOptionData[];
            collapsedSelectedItems: TreeOptionData[];
            count: number;
        }>>;
    };
    data: {
        type: import("vue").PropType<TreeOptionData[]>;
        default: () => TreeOptionData[];
    };
    disabled: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
        default: string;
    };
    filter: {
        type: import("vue").PropType<(filterWords: string, option: TreeOptionData) => boolean>;
    };
    filterable: BooleanConstructor;
    loading: BooleanConstructor;
    loadingText: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
        default: string;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    popupProps: {
        type: import("vue").PropType<import("../popup").TdPopupProps>;
    };
    prefixIcon: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    showCheckAlll: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    treeProps: {
        type: import("vue").PropType<import("../tree").TreeProps>;
    };
    value: {
        type: import("vue").PropType<TreeSelectValue>;
    };
    defaultValue: {
        type: import("vue").PropType<TreeSelectValue>;
    };
    valueDisplay: {
        type: import("vue").PropType<import("../common").TNode<{
            value: TreeOptionData[];
            onClose: () => void;
        }>>;
    };
    valueType: {
        type: import("vue").PropType<"object" | "value">;
        default: "object" | "value";
        validator(val: "object" | "value"): boolean;
    };
    onBlur: import("vue").PropType<(context: {
        value: TreeSelectValue;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: TreeSelectValue, context: {
        node: TreeNodeModel<TreeOptionData>;
    }) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        value: TreeSelectValue;
        e: FocusEvent;
    }) => void>;
    onRemove: import("vue").PropType<(options: import("./type").RemoveOptions<TreeOptionData>) => void>;
    onSearch: import("vue").PropType<(filterWords: string) => void>;
}>> & {
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    onRemove?: (...args: any[]) => any;
    onClear?: (...args: any[]) => any;
    onSearch?: (...args: any[]) => any;
}, {
    max: number;
    data: TreeOptionData[];
    loading: boolean;
    disabled: boolean;
    multiple: boolean;
    size: "small" | "medium" | "large";
    placeholder: string;
    clearable: boolean;
    empty: string | import("../common").TNode<any>;
    loadingText: string | import("../common").TNode<any>;
    valueType: "object" | "value";
    filterable: boolean;
    minCollapsedNum: number;
    showCheckAlll: boolean;
}>;
export default _default;
