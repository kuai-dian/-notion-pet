/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, h, createVNode, resolveComponent } from 'vue';
import isFunction from 'lodash/isFunction';
import { CheckIcon, CloseIcon } from 'tdesign-icons-vue-next';
import { prefix } from '../config.js';
import props from './step-item-props.js';
import { renderTNodeJSX, renderContent } from '../utils/render-tnode.js';
import mixins from '../utils/mixins.js';
import getConfigReceiverMixins from '../config-provider/config-receiver.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';
import '../config-provider/zh_CN_config.js';
import '../config-provider/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(prefix, "-steps-item");
var _StepItem = defineComponent(_objectSpread(_objectSpread({}, mixins(getConfigReceiverMixins("steps"))), {}, {
  name: "TStepItem",
  components: {
    CheckIcon: CheckIcon,
    CloseIcon: CloseIcon
  },
  inject: {
    steps: {
      "default": void 0
    }
  },
  props: _objectSpread({}, props),
  data: function data() {
    return {
      index: -1
    };
  },
  computed: {
    current: function current() {
      return this.steps && this.steps.current;
    },
    baseClass: function baseClass() {
      return [name, _defineProperty({}, "".concat(name, "--").concat(this.status), this.status)];
    },
    iconClass: function iconClass() {
      return ["".concat(name, "__icon"), _defineProperty({}, "".concat(name, "--").concat(this.status), this.status)];
    },
    canClick: function canClick() {
      var _this$steps;

      return this.status !== "process" && !((_this$steps = this.steps) !== null && _this$steps !== void 0 && _this$steps.readonly);
    }
  },
  mounted: function mounted() {
    this.steps.addItem(this);
  },
  unmounted: function unmounted() {
    this.steps.removeItem(this);
  },
  methods: {
    renderIcon: function renderIcon() {
      var defaultIcon;

      if (this.steps.theme === "default") {
        var icon = "";

        switch (this.status) {
          case "finish":
            icon = createVNode(resolveComponent("check-icon"), null, null);
            break;

          case "error":
            if (isFunction(this.global.errorIcon)) {
              icon = this.global.errorIcon(h);
            } else {
              icon = createVNode(resolveComponent("close-icon"), null, null);
            }

            break;

          default:
            icon = String(this.index + 1);
            break;
        }

        defaultIcon = createVNode("span", {
          "class": "".concat(name, "__icon--number")
        }, [icon]);
      }

      return renderTNodeJSX(this, "icon", defaultIcon);
    },
    onStepClick: function onStepClick(e) {
      var val = this.value === void 0 ? this.index : this.value;
      this.steps.handleChange(val, this.current, e);
    }
  },
  render: function render() {
    var content = renderContent(this, "default", "content");
    return createVNode("div", {
      "class": this.baseClass
    }, [createVNode("div", {
      "class": "".concat(name, "__inner ").concat(this.canClick ? "".concat(name, "--clickable") : ""),
      "onClick": this.onStepClick
    }, [createVNode("div", {
      "class": this.iconClass
    }, [this.renderIcon()]), createVNode("div", {
      "class": "".concat(name, "__content")
    }, [createVNode("div", {
      "class": "".concat(name, "__title")
    }, [renderTNodeJSX(this, "title")]), createVNode("div", {
      "class": "".concat(name, "__description")
    }, [content]), createVNode("div", {
      "class": "".concat(name, "__extra")
    }, [renderTNodeJSX(this, "extra")])])])]);
  }
}));

export { _StepItem as default };
//# sourceMappingURL=step-item.js.map
