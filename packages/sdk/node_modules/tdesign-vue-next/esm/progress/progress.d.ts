import { VNode } from 'vue';
import { Styles } from '../common';
declare const _default: import("vue").DefineComponent<{
    color: {
        type: import("vue").PropType<string | string[] | Record<string, string>>;
        default: string;
    };
    label: {
        type: import("vue").PropType<string | boolean | import("../common").TNode<any>>;
        default: boolean;
    };
    percentage: {
        type: NumberConstructor;
        default: number;
    };
    size: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    status: {
        type: import("vue").PropType<import("./type").StatusEnum>;
        validator(val: import("./type").StatusEnum): boolean;
    };
    strokeWidth: {
        type: import("vue").PropType<string | number>;
    };
    theme: {
        type: import("vue").PropType<import("./type").ThemeEnum>;
        default: import("./type").ThemeEnum;
        validator(val: import("./type").ThemeEnum): boolean;
    };
    trackColor: {
        type: StringConstructor;
        default: string;
    };
}, unknown, {
    name: string;
}, {
    statusStyle(): string;
    themeClass(): string;
    trackBgStyle(): Styles;
    barStyle(): Styles;
    circlePathStyle(): Styles;
    isShowIcon(): boolean;
    diameter(): number;
    rPoints(): number;
    radius(): number;
    circleStyle(): Styles;
    circleStrokeWidth(): number;
    strokeDashArr(): string;
    plumpStyles(): Styles;
}, {
    getIconMap(): {
        success: import("vue").DefineComponent<{
            size: {
                type: StringConstructor;
            };
            onClick: {
                type: import("vue").PropType<(context: {
                    e: MouseEvent;
                }) => void>;
            };
        }, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
            size?: unknown;
            onClick?: unknown;
        } & {
            size?: string;
            onClick?: (context: {
                e: MouseEvent;
            }) => void;
        }>, {}>;
        warning: import("vue").DefineComponent<{
            size: {
                type: StringConstructor;
            };
            onClick: {
                type: import("vue").PropType<(context: {
                    e: MouseEvent;
                }) => void>;
            };
        }, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
            size?: unknown;
            onClick?: unknown;
        } & {
            size?: string;
            onClick?: (context: {
                e: MouseEvent;
            }) => void;
        }>, {}>;
        error: import("vue").DefineComponent<{
            size: {
                type: StringConstructor;
            };
            onClick: {
                type: import("vue").PropType<(context: {
                    e: MouseEvent;
                }) => void>;
            };
        }, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
            size?: unknown;
            onClick?: unknown;
        } & {
            size?: string;
            onClick?: (context: {
                e: MouseEvent;
            }) => void;
        }>, {}>;
    };
    getLabelContent(): string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    color: {
        type: import("vue").PropType<string | string[] | Record<string, string>>;
        default: string;
    };
    label: {
        type: import("vue").PropType<string | boolean | import("../common").TNode<any>>;
        default: boolean;
    };
    percentage: {
        type: NumberConstructor;
        default: number;
    };
    size: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    status: {
        type: import("vue").PropType<import("./type").StatusEnum>;
        validator(val: import("./type").StatusEnum): boolean;
    };
    strokeWidth: {
        type: import("vue").PropType<string | number>;
    };
    theme: {
        type: import("vue").PropType<import("./type").ThemeEnum>;
        default: import("./type").ThemeEnum;
        validator(val: import("./type").ThemeEnum): boolean;
    };
    trackColor: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    color: string | string[] | Record<string, string>;
    label: string | boolean | import("../common").TNode<any>;
    size: string | number;
    theme: import("./type").ThemeEnum;
    percentage: number;
    trackColor: string;
}>;
export default _default;
