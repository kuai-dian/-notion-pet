import { VNode } from 'vue';
export declare const EVENT_NAME_WITH_KEBAB: string[];
interface LocalTBreadcrumb {
    separator: (() => void) | string;
    theme: string;
    $slots: {
        separator: VNode | string;
    };
    maxItemWidth: string;
}
declare const _default: import("vue").DefineComponent<{
    content: {
        type: import("vue").PropType<string | number | import("../common").TNode<any>>;
    };
    default: {
        type: import("vue").PropType<string | number | import("../common").TNode<any>>;
    };
    disabled: BooleanConstructor;
    href: {
        type: StringConstructor;
        default: string;
    };
    maxWidth: {
        type: StringConstructor;
        default: any;
    };
    replace: BooleanConstructor;
    router: {
        type: import("vue").PropType<any>;
    };
    target: {
        type: import("vue").PropType<"_self" | "_blank" | "_parent" | "_top">;
        default: "_self" | "_blank" | "_parent" | "_top";
        validator(val: "_self" | "_blank" | "_parent" | "_top"): boolean;
    };
    to: {
        type: import("vue").PropType<import("./type").Route>;
    };
}, unknown, {
    localTBreadcrumb: LocalTBreadcrumb;
    themeClassName: string;
    $router: any;
    isCutOff: boolean;
}, {
    maxWithStyle(): {
        maxWidth: string;
    };
}, {
    bindEvent(e: MouseEvent): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    content: {
        type: import("vue").PropType<string | number | import("../common").TNode<any>>;
    };
    default: {
        type: import("vue").PropType<string | number | import("../common").TNode<any>>;
    };
    disabled: BooleanConstructor;
    href: {
        type: StringConstructor;
        default: string;
    };
    maxWidth: {
        type: StringConstructor;
        default: any;
    };
    replace: BooleanConstructor;
    router: {
        type: import("vue").PropType<any>;
    };
    target: {
        type: import("vue").PropType<"_self" | "_blank" | "_parent" | "_top">;
        default: "_self" | "_blank" | "_parent" | "_top";
        validator(val: "_self" | "_blank" | "_parent" | "_top"): boolean;
    };
    to: {
        type: import("vue").PropType<import("./type").Route>;
    };
}>> & {
    onClick?: (...args: any[]) => any;
}, {
    replace: boolean;
    maxWidth: string;
    target: "_self" | "_blank" | "_parent" | "_top";
    disabled: boolean;
    href: string;
}>;
export default _default;
