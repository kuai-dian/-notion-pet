/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { createApp, nextTick } from 'vue';
import NotificationList from './notificationList.js';
import { getAttach } from '../utils/dom.js';
import './notification.js';
import '@babel/runtime/helpers/typeof';
import 'tdesign-icons-vue-next';
import 'lodash/isFunction';
import '../config.js';
import './props.js';
import '../utils/event.js';
import '../utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';
import '../_chunks/dep-b66bfe36.js';
import 'lodash/isString';
import '../utils/easing.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var seed = 0;
var instanceMap = /* @__PURE__ */new Map();

var NotificationFunction = function NotificationFunction(options) {
  seed += 1;

  var hackOptions = _objectSpread({
    placement: "top-right",
    zIndex: 6e3,
    attach: "body",
    id: seed
  }, options);

  hackOptions.content = options.content ? options.content : "";
  var a = getAttach(hackOptions.attach);

  if (!instanceMap.get(a)) {
    instanceMap.set(a, {});
  }

  var p = instanceMap.get(a)[hackOptions.placement];

  if (!p) {
    var wrapper = document.createElement("div");
    var instance = createApp(NotificationList, {
      placement: hackOptions.placement
    }).mount(wrapper);
    instance.add(hackOptions);
    instanceMap.get(a)[hackOptions.placement] = instance;
    p = instance;
    a.appendChild(instance.$el);
  } else {
    p.add(hackOptions);
  }

  return new Promise(function (resolve) {
    nextTick(function () {
      var lastChild = p.getLastChild();
      resolve(lastChild);
    });
  });
};

var showThemeNotification = function showThemeNotification(theme, options) {
  var hackOptions = _objectSpread(_objectSpread({}, options), {}, {
    theme: theme
  });

  return NotificationFunction(hackOptions);
};

var extraApi = {
  info: function info(options) {
    return showThemeNotification("info", options);
  },
  success: function success(options) {
    return showThemeNotification("success", options);
  },
  warning: function warning(options) {
    return showThemeNotification("warning", options);
  },
  error: function error(options) {
    return showThemeNotification("error", options);
  },
  close: function close(promise) {
    promise.then(function (instance) {
      return instance.close();
    });
  },
  closeAll: function closeAll() {
    instanceMap.forEach(function (attach) {
      Object.keys(attach).forEach(function (placement) {
        attach[placement].removeAll();
      });
    });
  }
};
var NotificationPlugin = showThemeNotification;

NotificationPlugin.install = function (app) {
  app.config.globalProperties.$notify = showThemeNotification;
  Object.keys(extraApi).forEach(function (funcName) {
    app.config.globalProperties.$notify[funcName] = extraApi[funcName];
  });
};

Object.keys(extraApi).forEach(function (funcName) {
  NotificationPlugin[funcName] = extraApi[funcName];
});

export { NotificationPlugin as default };
//# sourceMappingURL=plugin.js.map
