import { TdDrawerProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    attach: {
        type: PropType<import("../common").AttachNode>;
        default: string;
    };
    body: {
        type: PropType<string | import("../common").TNode<any>>;
    };
    cancelBtn: {
        type: PropType<import("./type").FooterButton>;
        default: string;
    };
    closeBtn: {
        type: PropType<string | boolean | import("../common").TNode<any>>;
        default: any;
    };
    closeOnEscKeydown: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    confirmBtn: {
        type: PropType<import("./type").FooterButton>;
        default: string;
    };
    default: {
        type: PropType<string | import("../common").TNode<any>>;
    };
    destroyOnClose: BooleanConstructor;
    footer: {
        type: PropType<boolean | import("../common").TNode<any>>;
        default: boolean;
    };
    header: {
        type: PropType<string | boolean | import("../common").TNode<any>>;
        default: any;
    };
    mode: {
        type: PropType<"push" | "overlay">;
        default: "push" | "overlay";
        validator(val: TdDrawerProps['mode']): boolean;
    };
    placement: {
        type: PropType<"left" | "top" | "bottom" | "right">;
        default: "left" | "top" | "bottom" | "right";
        validator(val: TdDrawerProps['placement']): boolean;
    };
    preventScrollThrough: {
        type: BooleanConstructor;
        default: boolean;
    };
    showInAttachedElement: BooleanConstructor;
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: StringConstructor;
        default: string;
    };
    sizeDraggable: BooleanConstructor;
    visible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onCancel: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClose: PropType<(context: import("./type").DrawerCloseContext) => void>;
    onCloseBtnClick: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onConfirm: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onEscKeydown: PropType<(context: {
        e: KeyboardEvent;
    }) => void>;
    onOverlayClick: PropType<(context: {
        e: MouseEvent;
    }) => void>;
};
export default _default;
