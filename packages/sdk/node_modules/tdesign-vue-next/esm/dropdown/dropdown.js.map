{"version":3,"file":"dropdown.js","sources":["../../src/dropdown/dropdown.tsx"],"sourcesContent":["import { defineComponent, VNode } from 'vue';\nimport { prefix } from '../config';\nimport Popup from '../popup/index';\nimport DropdownMenu from './dropdown-menu';\nimport { DropdownOption, TdDropdownProps } from './type';\nimport props from './props';\nimport { renderTNodeJSX } from '../utils/render-tnode';\nimport { emitEvent } from '../utils/event';\n\nconst name = `${prefix}-dropdown`;\n\nexport default defineComponent({\n  name: 'TDropdown',\n  components: {\n    DropdownMenu,\n  },\n  provide() {\n    return {\n      dropdown: this,\n    };\n  },\n  props: {\n    ...props,\n  },\n  emits: ['click', 'visibleChange'],\n  methods: {\n    handleMenuClick(data: DropdownOption, context: { e: MouseEvent }) {\n      if (this.hideAfterItemClick) {\n        const { popupElem }: any = this.$refs;\n        popupElem.handleClose();\n      }\n      emitEvent(this, 'click', data, context);\n    },\n  },\n  render() {\n    const trigger: VNode[] | VNode | string = this.$slots.default ? this.$slots.default(null) : '';\n\n    const contentSlot: VNode[] | VNode | string = renderTNodeJSX(this, 'dropdown');\n    const popupProps = {\n      ...this.$attrs,\n      disabled: this.disabled,\n      placement: this.placement,\n      trigger: this.trigger,\n      overlayClassName: [name, (this.popupProps as TdDropdownProps['popupProps'])?.overlayClassName],\n    };\n\n    return (\n      <Popup\n        {...this.popupProps}\n        {...popupProps}\n        destroyOnClose\n        ref=\"popupElem\"\n        expandAnimation\n        v-slots={{\n          content: () =>\n            contentSlot || (\n              <dropdown-menu\n                options={this.options}\n                maxHeight={this.maxHeight}\n                maxColumnWidth={this.maxColumnWidth}\n                minColumnWidth={this.minColumnWidth}\n              />\n            ),\n        }}\n      >\n        {trigger}\n      </Popup>\n    );\n  },\n});\n"],"names":["name","prefix","defineComponent","components","DropdownMenu","provide","dropdown","props","emits","methods","handleMenuClick","data","context","hideAfterItemClick","popupElem","$refs","handleClose","emitEvent","render","trigger","$slots","contentSlot","renderTNodeJSX","popupProps","$attrs","disabled","placement","overlayClassName","content","options","maxHeight","maxColumnWidth","minColumnWidth"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,IAAMA,IAAI,aAAMC,MAAN,cAAV;AACA,gBAAeC,eAAe,CAAC;AAC7BF,EAAAA,IAAI,EAAE,WADuB;AAE7BG,EAAAA,UAAU,EAAE;AACVC,IAAAA,YAAY,EAAZA;AADU,GAFiB;AAK7BC,EAAAA,OAL6B,qBAKnB;AACR,WAAO;AACLC,MAAAA,QAAQ,EAAE;AADL,KAAP;AAGD,GAT4B;AAU7BC,EAAAA,KAAK,oBACAA,KADA,CAVwB;AAa7BC,EAAAA,KAAK,EAAE,CAAC,OAAD,EAAU,eAAV,CAbsB;AAc7BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,eADO,2BACSC,IADT,EACeC,OADf,EACwB;AAC7B,UAAI,KAAKC,kBAAT,EAA6B;AAC3B,YAAQC,SAAR,GAAsB,KAAKC,KAA3B,CAAQD,SAAR;AACAA,QAAAA,SAAS,CAACE,WAAV;AACD;;AACDC,MAAAA,SAAS,CAAC,IAAD,EAAO,OAAP,EAAgBN,IAAhB,EAAsBC,OAAtB,CAAT;AACD;AAPM,GAdoB;AAuB7BM,EAAAA,MAvB6B,oBAuBpB;AAAA;AAAA;;AACP,QAAMC,OAAO,GAAG,KAAKC,MAAL,cAAsB,KAAKA,MAAL,YAAoB,IAApB,CAAtB,GAAkD,EAAlE;AACA,QAAMC,WAAW,GAAGC,cAAc,CAAC,IAAD,EAAO,UAAP,CAAlC;;AACA,QAAMC,UAAU,mCACX,KAAKC,MADM;AAEdC,MAAAA,QAAQ,EAAE,KAAKA,QAFD;AAGdC,MAAAA,SAAS,EAAE,KAAKA,SAHF;AAIdP,MAAAA,OAAO,EAAE,KAAKA,OAJA;AAKdQ,MAAAA,gBAAgB,EAAE,CAAC3B,IAAD,sBAAO,KAAKuB,UAAZ,qDAAO,iBAAiBI,gBAAxB;AALJ,MAAhB;;AAOA,yCAAkB,KAAKJ,UAAvB,EAAuCA,UAAvC;AAAA;AAAA,aAAsE,WAAtE;AAAA;AAAA;AAAA;AAAA,gBAEIJ,OAFJ;AAAA;AACES,MAAAA,OAAO,EAAE;AAAA,eAAMP,WAAW;AAAA,qBAA4B,KAAI,CAACQ,OAAjC;AAAA,uBAAqD,KAAI,CAACC,SAA1D;AAAA,4BAAqF,KAAI,CAACC,cAA1F;AAAA,4BAA0H,KAAI,CAACC;AAA/H,gBAAjB;AAAA;AADX;AAGD;AApC4B,CAAD,CAA9B;;;;"}