/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import { defineComponent, createVNode } from 'vue';
import _DropdownItem from './dropdown-item.js';
import { prefix } from '../config.js';
import { renderTNodeJSX } from '../utils/render-tnode.js';
import { pxCompat } from '../utils/helper.js';
import { emitEvent } from '../utils/event.js';
import '@babel/runtime/helpers/defineProperty';
import 'tdesign-icons-vue-next';
import '../divider/index.js';
import '../divider/divider.js';
import '../divider/props.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isFunction';
import 'lodash/isObject';
import '../utils/withInstall.js';
import '../divider/style';
import '../divider/type.js';
import '../utils/classnames.js';
import '../utils/ripple.js';
import '../utils/set-style.js';
import './dropdown-item-props.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';

var name = "".concat(prefix, "-dropdown__menu");
var _DropdownMenu = defineComponent({
  name: "TDropdownMenu",
  components: {
    DropdownItem: _DropdownItem
  },
  inject: {
    dropdown: {
      "default": void 0
    }
  },
  props: {
    options: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    maxHeight: {
      type: Number,
      "default": 300
    },
    maxColumnWidth: {
      type: Number,
      "default": 100
    },
    minColumnWidth: {
      type: Number,
      "default": 10
    }
  },
  emits: ["click"],
  data: function data() {
    return {
      path: ""
    };
  },
  methods: {
    isActive: function isActive(item, pathPrefix) {
      var excludeSelf = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var itemPath = "".concat(pathPrefix, "/").concat(item.value);

      if (excludeSelf && this.path === itemPath) {
        return false;
      }

      return this.path.indexOf(itemPath) === 0;
    },
    handleHoverItem: function handleHoverItem(path) {
      this.path = path;
    },
    handleItemClick: function handleItemClick(data, context, idx) {
      var _this$options$idx$onC, _this$options$idx;

      (_this$options$idx$onC = (_this$options$idx = this.options[idx]).onClick) === null || _this$options$idx$onC === void 0 ? void 0 : _this$options$idx$onC.call(_this$options$idx, data, context);
      emitEvent(this, "click", data, context);
    },
    renderMenuColumn: function renderMenuColumn(children, showSubmenu, pathPrefix) {
      var _this = this;

      var menuClass = ["".concat(name, "-column"), "narrow-scrollbar", {
        submenu__visible: showSubmenu
      }];
      var _this$dropdown = this.dropdown,
          maxHeight = _this$dropdown.maxHeight,
          maxColumnWidth = _this$dropdown.maxColumnWidth,
          minColumnWidth = _this$dropdown.minColumnWidth;
      return createVNode("div", {
        "class": menuClass,
        "style": {
          maxHeight: "".concat(maxHeight, "px"),
          maxWidth: pxCompat(maxColumnWidth),
          minWidth: pxCompat(minColumnWidth)
        }
      }, [children.map(function (item, idx) {
        return createVNode(_DropdownItem, {
          "key": idx,
          "disabled": item.disabled,
          "active": _this.isActive(item, pathPrefix) || item.active,
          "value": item.value,
          "content": item.content,
          "divider": item.divider,
          "hasChildren": item.children && item.children.length > 0,
          "path": "".concat(pathPrefix, "/").concat(item.value),
          "maxColumnWidth": _this.maxColumnWidth,
          "minColumnWidth": _this.minColumnWidth,
          "onClick": function onClick(data, context) {
            return _this.handleItemClick(data, context, idx);
          },
          "onHover": _this.handleHoverItem
        }, null);
      })]);
    }
  },
  render: function render() {
    var _this2 = this;

    var columns = [];
    var menuItems = this.options;
    var pathPrefix = "";

    if (this.$slots["default"]) {
      return createVNode("div", {
        "class": name
      }, [createVNode("div", {
        "class": ["".concat(name, "-column"), "narrow-scrollbar"],
        "style": {
          maxHeight: "".concat(this.dropdown.maxHeight, "px"),
          maxWidth: "".concat(this.dropdown.maxColumnWidth, "px"),
          minWidth: "".concat(this.dropdown.minColumnWidth, "px")
        }
      }, [renderTNodeJSX(this, "default")])]);
    }

    while (menuItems && menuItems.length) {
      var activeItem = menuItems.find(function (item) {
        return _this2.isActive(item, pathPrefix, false);
      });
      columns.push(this.renderMenuColumn(menuItems, !!activeItem, pathPrefix));

      if (activeItem) {
        pathPrefix = "".concat(pathPrefix, "/").concat(activeItem.value);
        menuItems = activeItem.children || [];
      } else {
        menuItems = [];
      }
    }

    return createVNode("div", {
      "class": name
    }, [columns]);
  }
});

export { _DropdownMenu as default };
//# sourceMappingURL=dropdown-menu.js.map
