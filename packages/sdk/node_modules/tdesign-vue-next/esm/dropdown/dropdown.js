/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, createVNode, mergeProps, resolveComponent } from 'vue';
import { prefix } from '../config.js';
import { Popup } from '../popup/index.js';
import _DropdownMenu from './dropdown-menu.js';
import props from './props.js';
import { renderTNodeJSX } from '../utils/render-tnode.js';
import { emitEvent } from '../utils/event.js';
import '../popup/popup.js';
import '@babel/runtime/helpers/typeof';
import '@popperjs/core';
import '../_chunks/dep-b66bfe36.js';
import '../utils/classnames.js';
import '../utils/dom.js';
import 'lodash/isString';
import '../utils/easing.js';
import '../popup/props.js';
import '../utils/set-style.js';
import '../utils/map-props.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/kebabCase';
import '../utils/withInstall.js';
import '../popup/style';
import '../popup/type.js';
import 'lodash/isEmpty';
import 'lodash/isFunction';
import 'lodash/isObject';
import '../utils/helper.js';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';
import './dropdown-item.js';
import 'tdesign-icons-vue-next';
import '../divider/index.js';
import '../divider/divider.js';
import '../divider/props.js';
import '../divider/style';
import '../divider/type.js';
import '../utils/ripple.js';
import './dropdown-item-props.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(prefix, "-dropdown");
var _Dropdown = defineComponent({
  name: "TDropdown",
  components: {
    DropdownMenu: _DropdownMenu
  },
  provide: function provide() {
    return {
      dropdown: this
    };
  },
  props: _objectSpread({}, props),
  emits: ["click", "visibleChange"],
  methods: {
    handleMenuClick: function handleMenuClick(data, context) {
      if (this.hideAfterItemClick) {
        var popupElem = this.$refs.popupElem;
        popupElem.handleClose();
      }

      emitEvent(this, "click", data, context);
    }
  },
  render: function render() {
    var _this$popupProps,
        _this = this;

    var trigger = this.$slots["default"] ? this.$slots["default"](null) : "";
    var contentSlot = renderTNodeJSX(this, "dropdown");

    var popupProps = _objectSpread(_objectSpread({}, this.$attrs), {}, {
      disabled: this.disabled,
      placement: this.placement,
      trigger: this.trigger,
      overlayClassName: [name, (_this$popupProps = this.popupProps) === null || _this$popupProps === void 0 ? void 0 : _this$popupProps.overlayClassName]
    });

    return createVNode(Popup, mergeProps(this.popupProps, popupProps, {
      "destroyOnClose": true,
      "ref": "popupElem",
      "expandAnimation": true
    }), {
      "default": function _default() {
        return [trigger];
      },
      content: function content() {
        return contentSlot || createVNode(resolveComponent("dropdown-menu"), {
          "options": _this.options,
          "maxHeight": _this.maxHeight,
          "maxColumnWidth": _this.maxColumnWidth,
          "minColumnWidth": _this.minColumnWidth
        }, null);
      }
    });
  }
});

export { _Dropdown as default };
//# sourceMappingURL=dropdown.js.map
