import dayjs from 'dayjs';
import { EPickerCols } from '../time-picker/constant';
import { DateValue } from './interface';
declare const _default: import("vue").DefineComponent<{
    allowInput: BooleanConstructor;
    clearable: BooleanConstructor;
    disabled: BooleanConstructor;
    disableDate: {
        type: import("vue").PropType<import("./type").DisableDate>;
    };
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: number): boolean;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    inputProps: {
        type: import("vue").PropType<import("../input").TdInputProps>;
    };
    mode: {
        type: import("vue").PropType<"month" | "year" | "date">;
        default: "month" | "year" | "date";
        validator(val: "month" | "year" | "date"): boolean;
    };
    placeholder: {
        type: import("vue").PropType<string | string[]>;
    };
    popupProps: {
        type: import("vue").PropType<import("../popup").TdPopupProps>;
    };
    prefixIcon: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    presets: {
        type: import("vue").PropType<import("./type").PresetDate>;
    };
    range: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    suffixIcon: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    value: {
        type: import("vue").PropType<DateValue>;
    };
    defaultValue: {
        type: import("vue").PropType<DateValue>;
    };
    onBlur: import("vue").PropType<(context: {
        value: DateValue;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: DateValue) => void>;
    onFocus: import("vue").PropType<(context: {
        value: DateValue;
        e: FocusEvent;
    }) => void>;
    onInput: import("vue").PropType<(context: {
        input: string;
        value: DateValue;
        e: InputEvent;
    }) => void>;
}, unknown, {
    tempValue: string | number | Date | dayjs.Dayjs;
    monthDate: Date;
    start: Date;
    end: Date;
    selectedDates: any[];
    inSelection: boolean;
    inline: boolean;
    dateFormat: string;
    multiSeparator: string;
    inlineView: boolean;
    showTime: boolean;
    isOpen: boolean;
    startTimeValue: dayjs.Dayjs;
    endTimeValue: dayjs.Dayjs;
}, {
    startText(): string;
    endText(): string;
    formattedValue: {
        get(): string | number | {
            toString: () => string;
            toDateString: () => string;
            toTimeString: () => string;
            toLocaleString: {
                (): string;
                (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
            };
            toLocaleDateString: {
                (): string;
                (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
            };
            toLocaleTimeString: {
                (): string;
                (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
            };
            valueOf: () => number;
            getTime: () => number;
            getFullYear: () => number;
            getUTCFullYear: () => number;
            getMonth: () => number;
            getUTCMonth: () => number;
            getDate: () => number;
            getUTCDate: () => number;
            getDay: () => number;
            getUTCDay: () => number;
            getHours: () => number;
            getUTCHours: () => number;
            getMinutes: () => number;
            getUTCMinutes: () => number;
            getSeconds: () => number;
            getUTCSeconds: () => number;
            getMilliseconds: () => number;
            getUTCMilliseconds: () => number;
            getTimezoneOffset: () => number;
            setTime: (time: number) => number;
            setMilliseconds: (ms: number) => number;
            setUTCMilliseconds: (ms: number) => number;
            setSeconds: (sec: number, ms?: number) => number;
            setUTCSeconds: (sec: number, ms?: number) => number;
            setMinutes: (min: number, sec?: number, ms?: number) => number;
            setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
            setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
            setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
            setDate: (date: number) => number;
            setUTCDate: (date: number) => number;
            setMonth: (month: number, date?: number) => number;
            setUTCMonth: (month: number, date?: number) => number;
            setFullYear: (year: number, month?: number, date?: number) => number;
            setUTCFullYear: (year: number, month?: number, date?: number) => number;
            toUTCString: () => string;
            toISOString: () => string;
            toJSON: (key?: any) => string;
            getVarDate: () => VarDate;
            [Symbol.toPrimitive]: {
                (hint: "default"): string;
                (hint: "string"): string;
                (hint: "number"): number;
                (hint: string): string | number;
            };
        } | {
            clone: () => dayjs.Dayjs;
            isValid: () => boolean;
            year: {
                (): number;
                (value: number): dayjs.Dayjs;
            };
            month: {
                (): number;
                (value: number): dayjs.Dayjs;
            };
            date: {
                (): number;
                (value: number): dayjs.Dayjs;
            };
            day: {
                (): number;
                (value: number): dayjs.Dayjs;
            };
            hour: {
                (): number;
                (value: number): dayjs.Dayjs;
            };
            minute: {
                (): number;
                (value: number): dayjs.Dayjs;
            };
            second: {
                (): number;
                (value: number): dayjs.Dayjs;
            };
            millisecond: {
                (): number;
                (value: number): dayjs.Dayjs;
            };
            set: (unit: dayjs.UnitType, value: number) => dayjs.Dayjs;
            get: (unit: dayjs.UnitType) => number;
            add: (value: number, unit?: dayjs.ManipulateType) => dayjs.Dayjs;
            subtract: (value: number, unit?: dayjs.ManipulateType) => dayjs.Dayjs;
            startOf: (unit: dayjs.OpUnitType) => dayjs.Dayjs;
            endOf: (unit: dayjs.OpUnitType) => dayjs.Dayjs;
            format: (template?: string) => string;
            diff: (date?: string | number | Date | dayjs.Dayjs, unit?: "Q" | "s" | "day" | "hour" | "minute" | "month" | "second" | "year" | "years" | "quarter" | "quarters" | "months" | "week" | "weeks" | "days" | "hours" | "minutes" | "seconds" | "M" | "m" | "y" | "date" | "d" | "h" | "ms" | "millisecond" | "milliseconds" | "dates" | "w", float?: boolean) => number;
            valueOf: () => number;
            unix: () => number;
            daysInMonth: () => number;
            toDate: () => Date;
            toJSON: () => string;
            toISOString: () => string;
            toString: () => string;
            utcOffset: () => number;
            isBefore: (date: string | number | Date | dayjs.Dayjs, unit?: dayjs.OpUnitType) => boolean;
            isSame: (date: string | number | Date | dayjs.Dayjs, unit?: dayjs.OpUnitType) => boolean;
            isAfter: (date: string | number | Date | dayjs.Dayjs, unit?: dayjs.OpUnitType) => boolean;
            locale: {
                (): string;
                (preset: string | ILocale, object?: Partial<ILocale>): dayjs.Dayjs;
            };
            calendar: (referenceTime?: string | number | Date | dayjs.Dayjs, formats?: object) => string;
            isBetween: (a: string | number | Date | dayjs.Dayjs, b: string | number | Date | dayjs.Dayjs, c?: dayjs.OpUnitType, d?: "()" | "[]" | "[)" | "(]") => boolean;
        };
        set(value: dayjs.ConfigType): void;
    };
    rangeText: {
        get(): string;
        set(value: any): void;
    };
    min(): Date;
    max(): Date;
    classes(): any;
    pickerStyles(): {
        [x: string]: boolean;
    };
}, {
    handleTimePick(col: EPickerCols, time: number, index: number): void;
    attachDatePicker(): any;
    onNativeInput(event?: any): void;
    onNativeFocus(event?: MouseEvent): void;
    onClick(event?: MouseEvent): void;
    normalizeDateTime(value: Date, oldValue: Date): Date;
    dateClick(value: Date): void;
    toggle(): void;
    open(): void;
    close(): void;
    clickedApply(closePicker?: boolean): void;
    toggleTime(): void;
    clickRange(value: DateValue): void;
    clear(triggerChange?: boolean): void;
    submitInput(selectedDates: any[], triggerChange?: boolean): void;
    parseDate(value?: any, format?: string): Date | boolean;
    isEnabled(value: Date): boolean;
    setDate(inputDate?: any, triggerChange?: boolean): void;
    getDates(inputDate?: any): Date[];
    formatDate(date: Date, format?: string): string;
    createPopover(): void;
    getPlaceholderText(): any;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("open" | "input" | "change" | "click" | "close" | "focus" | "pick")[], "input" | "open" | "change" | "click" | "close" | "focus" | "pick", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    allowInput: BooleanConstructor;
    clearable: BooleanConstructor;
    disabled: BooleanConstructor;
    disableDate: {
        type: import("vue").PropType<import("./type").DisableDate>;
    };
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: number): boolean;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    inputProps: {
        type: import("vue").PropType<import("../input").TdInputProps>;
    };
    mode: {
        type: import("vue").PropType<"month" | "year" | "date">;
        default: "month" | "year" | "date";
        validator(val: "month" | "year" | "date"): boolean;
    };
    placeholder: {
        type: import("vue").PropType<string | string[]>;
    };
    popupProps: {
        type: import("vue").PropType<import("../popup").TdPopupProps>;
    };
    prefixIcon: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    presets: {
        type: import("vue").PropType<import("./type").PresetDate>;
    };
    range: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    suffixIcon: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    value: {
        type: import("vue").PropType<DateValue>;
    };
    defaultValue: {
        type: import("vue").PropType<DateValue>;
    };
    onBlur: import("vue").PropType<(context: {
        value: DateValue;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: DateValue) => void>;
    onFocus: import("vue").PropType<(context: {
        value: DateValue;
        e: FocusEvent;
    }) => void>;
    onInput: import("vue").PropType<(context: {
        input: string;
        value: DateValue;
        e: InputEvent;
    }) => void>;
}>> & {
    onFocus?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    onInput?: (...args: any[]) => any;
    onClick?: (...args: any[]) => any;
    onClose?: (...args: any[]) => any;
    onPick?: (...args: any[]) => any;
    onOpen?: (...args: any[]) => any;
}, {
    disabled: boolean;
    size: "small" | "medium" | "large";
    range: boolean;
    mode: "month" | "year" | "date";
    format: string;
    clearable: boolean;
    allowInput: boolean;
    enableTimePicker: boolean;
}>;
export default _default;
