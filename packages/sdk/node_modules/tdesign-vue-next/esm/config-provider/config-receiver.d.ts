import { GlobalConfigProvider } from './type';
export declare type ValueOf<T> = T[keyof T];
export declare type ComponentConfigType = ValueOf<GlobalConfigProvider>;
export * from './type';
export declare type ConfigRule<T = any> = string | ((args: T) => string);
export interface Placement {
    [propName: string]: string | number;
}
export default function getConfigReceiverMixins<C extends ComponentConfigType>(componentName: string): import("vue").DefineComponent<{}, {}, {}, {
    global(): C;
}, {
    t<T>(pattern: T, placement?: Placement): string;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
