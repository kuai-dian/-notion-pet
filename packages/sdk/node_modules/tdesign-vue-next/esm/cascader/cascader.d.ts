import { TreeNode, TreeNodeValue, CascaderContextType, TreeNodeModel } from './interface';
import { CascaderChangeSource, CascaderValue, CascaderChangeContext } from './type';
declare const _default: import("vue").DefineComponent<{
    checkProps: {
        type: import("vue").PropType<import("..").TdCheckboxProps>;
    };
    checkStrictly: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<import("../common").TNode<{
            value: import("../common").TreeOptionData[];
            collapsedSelectedItems: import("../common").TreeOptionData[];
            count: number;
        }>>;
    };
    disabled: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    filterable: BooleanConstructor;
    keys: {
        type: import("vue").PropType<import("./type").CascaderKeysType>;
    };
    lazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    load: {
        type: import("vue").PropType<(node: TreeNodeModel<import("../common").TreeOptionData>) => Promise<import("../common").TreeOptionData[]>>;
    };
    loading: BooleanConstructor;
    loadingText: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
        default: string;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    options: {
        type: import("vue").PropType<import("../common").TreeOptionData[]>;
        default: () => import("../common").TreeOptionData[];
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<import("../popup/type").TdPopupProps>;
    };
    showAllLevels: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    trigger: {
        type: import("vue").PropType<"click" | "hover">;
        default: "click" | "hover";
        validator(val: "click" | "hover"): boolean;
    };
    value: {
        type: import("vue").PropType<CascaderValue<import("../common").TreeOptionData>>;
        default: () => CascaderValue<import("../common").TreeOptionData>;
    };
    defaultValue: {
        type: import("vue").PropType<CascaderValue<import("../common").TreeOptionData>>;
        default: () => CascaderValue<import("../common").TreeOptionData>;
    };
    valueMode: {
        type: import("vue").PropType<"all" | "parentFirst" | "onlyLeaf">;
        default: "all" | "parentFirst" | "onlyLeaf";
        validator(val: "all" | "parentFirst" | "onlyLeaf"): boolean;
    };
    valueType: {
        type: import("vue").PropType<"full" | "single">;
        default: "full" | "single";
        validator(val: "full" | "single"): boolean;
    };
    onBlur: import("vue").PropType<(context: {
        value: CascaderValue<import("../common").TreeOptionData>;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: CascaderValue<import("../common").TreeOptionData>, context: CascaderChangeContext<import("../common").TreeOptionData>) => void>;
    onFocus: import("vue").PropType<(context: {
        value: CascaderValue<import("../common").TreeOptionData>;
        e: FocusEvent;
    }) => void>;
    onRemove: import("vue").PropType<(context: import("./type").RemoveContext<import("../common").TreeOptionData>) => void>;
}, unknown, {
    inputWidth: number;
    visible: boolean;
    treeStore: any;
    inputVal: string;
    scopeVal: any;
    treeNodes: any[];
    filterActive: boolean;
    expend: TreeNodeValue[];
}, {
    stateFns(): {
        setTreeNodes: (nodes: TreeNode[]) => void;
        setValue: (val: CascaderValue, source: CascaderChangeSource, node?: TreeNodeModel) => void;
        setVisible: (val: boolean) => void;
        setFilterActive: (val: boolean) => void;
        setInputVal: (val: string) => void;
        setExpend: (val: TreeNodeValue[]) => void;
        setInputWidth: (val: number) => void;
    };
    cascaderContext(): CascaderContextType;
}, {
    init(): void;
    updatedTreeNodes(): void;
    updateExpend(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("remove" | "blur" | "change" | "focus")[], "remove" | "blur" | "change" | "focus", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    checkProps: {
        type: import("vue").PropType<import("..").TdCheckboxProps>;
    };
    checkStrictly: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<import("../common").TNode<{
            value: import("../common").TreeOptionData[];
            collapsedSelectedItems: import("../common").TreeOptionData[];
            count: number;
        }>>;
    };
    disabled: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    filterable: BooleanConstructor;
    keys: {
        type: import("vue").PropType<import("./type").CascaderKeysType>;
    };
    lazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    load: {
        type: import("vue").PropType<(node: TreeNodeModel<import("../common").TreeOptionData>) => Promise<import("../common").TreeOptionData[]>>;
    };
    loading: BooleanConstructor;
    loadingText: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
        default: string;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    options: {
        type: import("vue").PropType<import("../common").TreeOptionData[]>;
        default: () => import("../common").TreeOptionData[];
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<import("../popup/type").TdPopupProps>;
    };
    showAllLevels: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    trigger: {
        type: import("vue").PropType<"click" | "hover">;
        default: "click" | "hover";
        validator(val: "click" | "hover"): boolean;
    };
    value: {
        type: import("vue").PropType<CascaderValue<import("../common").TreeOptionData>>;
        default: () => CascaderValue<import("../common").TreeOptionData>;
    };
    defaultValue: {
        type: import("vue").PropType<CascaderValue<import("../common").TreeOptionData>>;
        default: () => CascaderValue<import("../common").TreeOptionData>;
    };
    valueMode: {
        type: import("vue").PropType<"all" | "parentFirst" | "onlyLeaf">;
        default: "all" | "parentFirst" | "onlyLeaf";
        validator(val: "all" | "parentFirst" | "onlyLeaf"): boolean;
    };
    valueType: {
        type: import("vue").PropType<"full" | "single">;
        default: "full" | "single";
        validator(val: "full" | "single"): boolean;
    };
    onBlur: import("vue").PropType<(context: {
        value: CascaderValue<import("../common").TreeOptionData>;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: CascaderValue<import("../common").TreeOptionData>, context: CascaderChangeContext<import("../common").TreeOptionData>) => void>;
    onFocus: import("vue").PropType<(context: {
        value: CascaderValue<import("../common").TreeOptionData>;
        e: FocusEvent;
    }) => void>;
    onRemove: import("vue").PropType<(context: import("./type").RemoveContext<import("../common").TreeOptionData>) => void>;
}>> & {
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    onRemove?: (...args: any[]) => any;
}, {
    max: number;
    value: CascaderValue<import("../common").TreeOptionData>;
    loading: boolean;
    disabled: boolean;
    multiple: boolean;
    options: import("../common").TreeOptionData[];
    size: import("../common").SizeEnum;
    lazy: boolean;
    placeholder: string;
    trigger: "click" | "hover";
    defaultValue: CascaderValue<import("../common").TreeOptionData>;
    clearable: boolean;
    loadingText: string | import("../common").TNode<any>;
    valueType: "full" | "single";
    filterable: boolean;
    minCollapsedNum: number;
    checkStrictly: boolean;
    valueMode: "all" | "parentFirst" | "onlyLeaf";
    showAllLevels: boolean;
}>;
export default _default;
