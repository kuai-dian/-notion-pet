import { TextareaValue } from './type';
import { ClassName } from '../common';
declare const _default: import("vue").DefineComponent<{
    autofocus: BooleanConstructor;
    autosize: {
        type: import("vue").PropType<boolean | {
            minRows?: number;
            maxRows?: number;
        }>;
        default: boolean;
    };
    disabled: BooleanConstructor;
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: NumberConstructor;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    readonly: BooleanConstructor;
    status: {
        type: import("vue").PropType<"error" | "success" | "warning">;
        validator(val: "error" | "success" | "warning"): boolean;
    };
    tips: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    value: {
        type: import("vue").PropType<TextareaValue>;
    };
    defaultValue: {
        type: import("vue").PropType<TextareaValue>;
    };
    onBlur: import("vue").PropType<(value: TextareaValue, context: {
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: TextareaValue, context?: {
        e?: InputEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: TextareaValue, context: {
        e: FocusEvent;
    }) => void>;
    onKeydown: import("vue").PropType<(value: TextareaValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeypress: import("vue").PropType<(value: TextareaValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeyup: import("vue").PropType<(value: TextareaValue, context: {
        e: KeyboardEvent;
    }) => void>;
}, unknown, {
    focused: boolean;
    mouseHover: boolean;
    textareaStyle: {};
}, {
    textareaClasses(): ClassName;
    inputAttrs(): Record<string, any>;
    characterNumber(): number;
}, {
    adjustTextareaHeight(): void;
    focus(): void;
    blur(): void;
    handleInput(e: any): void;
    onCompositionend(e: InputEvent | CompositionEvent): void;
    inputValueChangeHandle(e: InputEvent): void;
    setInputValue(v?: TextareaValue): void;
    emitKeyDown(e: KeyboardEvent): void;
    emitKeyUp(e: KeyboardEvent): void;
    emitKeypress(e: KeyboardEvent): void;
    emitFocus(e: FocusEvent): void;
    emitBlur(e: FocusEvent): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "keydown" | "keypress" | "keyup" | "update:value")[], "blur" | "change" | "focus" | "keydown" | "keypress" | "keyup" | "update:value", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    autofocus: BooleanConstructor;
    autosize: {
        type: import("vue").PropType<boolean | {
            minRows?: number;
            maxRows?: number;
        }>;
        default: boolean;
    };
    disabled: BooleanConstructor;
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: NumberConstructor;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    readonly: BooleanConstructor;
    status: {
        type: import("vue").PropType<"error" | "success" | "warning">;
        validator(val: "error" | "success" | "warning"): boolean;
    };
    tips: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    value: {
        type: import("vue").PropType<TextareaValue>;
    };
    defaultValue: {
        type: import("vue").PropType<TextareaValue>;
    };
    onBlur: import("vue").PropType<(value: TextareaValue, context: {
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: TextareaValue, context?: {
        e?: InputEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: TextareaValue, context: {
        e: FocusEvent;
    }) => void>;
    onKeydown: import("vue").PropType<(value: TextareaValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeypress: import("vue").PropType<(value: TextareaValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeyup: import("vue").PropType<(value: TextareaValue, context: {
        e: KeyboardEvent;
    }) => void>;
}>> & {
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    onKeydown?: (...args: any[]) => any;
    onKeypress?: (...args: any[]) => any;
    onKeyup?: (...args: any[]) => any;
    "onUpdate:value"?: (...args: any[]) => any;
}, {
    name: string;
    autofocus: boolean;
    disabled: boolean;
    readonly: boolean;
    placeholder: string;
    autosize: boolean;
}>;
export default _default;
