/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { isVNode, defineComponent, createVNode, h, withDirectives, mergeProps, resolveDirective } from 'vue';
import isFunction from 'lodash/isFunction';
import { CaretRightSmallIcon } from 'tdesign-icons-vue-next';
import mixins from '../utils/mixins.js';
import getConfigReceiverMixins from '../config-provider/config-receiver.js';
import { Checkbox } from '../checkbox/index.js';
import { Loading } from '../loading/index.js';
import { TreeNode } from '../_common/js/tree/tree-node.js';
import { getTNode } from './util.js';
import { TREE_NODE_NAME, CLASS_NAMES } from './constants.js';
import Ripple from '../utils/ripple.js';
import '../config-provider/zh_CN_config.js';
import '../config.js';
import '../config-provider/type.js';
import '../checkbox/checkbox.js';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';
import '../utils/classnames.js';
import '../checkbox/props.js';
import '../utils/event.js';
import '../utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';
import '../checkbox/group.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/typeof';
import 'lodash/intersection';
import '../checkbox/checkbox-group-props.js';
import '../utils/map-props.js';
import 'lodash/kebabCase';
import '../utils/withInstall.js';
import '../checkbox/style';
import '../checkbox/type.js';
import '../loading/loading.js';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '../utils/dom.js';
import '../_chunks/dep-b66bfe36.js';
import '../utils/easing.js';
import '../utils/transfer-dom.js';
import '../loading/props.js';
import '../loading/style';
import '../loading/type.js';
import '../loading/plugin.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/helpers/classCallCheck';
import '@babel/runtime/helpers/createClass';
import '@babel/runtime/regenerator';
import 'lodash/uniqueId';
import 'lodash/get';
import '../_common/js/tree/tree-node-model.js';
import 'lodash/pick';
import '../_common/js/log/log.js';
import '../utils/set-style.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}

var TreeItemProps = {
  node: {
    type: TreeNode
  },
  treeScope: {
    type: Object
  }
};
var TreeItem = defineComponent(_objectSpread(_objectSpread({}, mixins(getConfigReceiverMixins("tree"))), {}, {
  name: TREE_NODE_NAME,
  directives: {
    ripple: Ripple
  },
  props: TreeItemProps,
  emits: ["click", "change"],
  created: function created() {
    if (this.node) {
      this.data = this.node.data;
    }
  },
  methods: {
    getStyles: function getStyles() {
      var level = this.node.level;
      var styles = "--level: ".concat(level, ";");
      return styles;
    },
    getClassList: function getClassList() {
      var _list$push;

      var node = this.node;
      var list = [];
      list.push(CLASS_NAMES.treeNode);
      list.push((_list$push = {}, _defineProperty(_list$push, CLASS_NAMES.treeNodeOpen, node.expanded), _defineProperty(_list$push, CLASS_NAMES.actived, node.isActivable() ? node.actived : false), _defineProperty(_list$push, CLASS_NAMES.disabled, node.isDisabled()), _list$push));
      return list;
    },
    renderLine: function renderLine() {
      var node = this.node,
          treeScope = this.treeScope;
      var line = treeScope.line,
          scopedSlots = treeScope.scopedSlots;
      var iconVisible = !!treeScope.icon;
      var lineNode = null;

      if (line === true) {
        if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.line) {
          lineNode = scopedSlots.line({
            node: node === null || node === void 0 ? void 0 : node.getModel()
          });
        } else if (node.parent && node.tree) {
          var vmIsLeaf = node.vmIsLeaf,
              vmIsFirst = node.vmIsFirst,
              level = node.level;
          var lineClasses = [];
          lineClasses.push(CLASS_NAMES.line);

          if (vmIsLeaf || !iconVisible) {
            lineClasses.push(CLASS_NAMES.lineIsLeaf);
          }

          if (vmIsFirst && iconVisible) {
            lineClasses.push(CLASS_NAMES.lineIsFirst);
          }

          var shadowStyles = [];
          var parents = node.getParents();
          parents.pop();
          parents.forEach(function (pnode, index) {
            if (!pnode.vmIsLast) {
              shadowStyles.push("calc(-".concat(index + 1, " * var(--space)) 0 var(--color)"));
            }
          });
          var styles = {
            "--level": level,
            "box-shadow": shadowStyles.join(",")
          };
          lineNode = createVNode("span", {
            "class": lineClasses,
            "style": styles
          }, null);
        }
      } else {
        lineNode = getTNode(line, {
          node: node
        });
      }

      return lineNode;
    },
    getFolderIcon: function getFolderIcon() {
      if (isFunction(this.global.folderIcon)) {
        return this.global.folderIcon(h);
      }

      return createVNode(CaretRightSmallIcon, null, null);
    },
    renderIcon: function renderIcon() {
      var node = this.node,
          treeScope = this.treeScope;
      var icon = treeScope.icon,
          scopedSlots = treeScope.scopedSlots;
      var isDefaultIcon = false;
      var iconNode = null;

      if (icon === true) {
        if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.icon) {
          iconNode = scopedSlots.icon({
            node: node === null || node === void 0 ? void 0 : node.getModel()
          });
        } else if (!node.vmIsLeaf) {
          isDefaultIcon = true;
          iconNode = this.getFolderIcon();

          if (node.loading && node.expanded) {
            iconNode = createVNode(Loading, null, null);
          }
        } else {
          iconNode = "";
        }
      } else {
        iconNode = getTNode(icon, {
          node: node
        });
      }

      var _iconNode = function () {
        return iconNode;
      }();

      iconNode = createVNode("span", {
        "class": [CLASS_NAMES.treeIcon, CLASS_NAMES.folderIcon, isDefaultIcon ? CLASS_NAMES.treeIconDefault : ""],
        "trigger": "expand",
        "ignore": "active"
      }, [iconNode]);
      return iconNode;
    },
    renderLabel: function renderLabel() {
      var _this = this;

      var node = this.node,
          treeScope = this.treeScope;
      var label = treeScope.label,
          scopedSlots = treeScope.scopedSlots,
          disableCheck = treeScope.disableCheck;
      var checkProps = treeScope.checkProps || {};
      var labelNode = null;

      if (label === true) {
        if (scopedSlots.label) {
          labelNode = scopedSlots.label({
            node: node.getModel()
          });
        } else {
          labelNode = node.label || "";
        }
      } else {
        labelNode = getTNode(label, {
          node: node
        });
      }

      var labelClasses = [CLASS_NAMES.treeLabel, CLASS_NAMES.treeLabelStrictly, _defineProperty({}, CLASS_NAMES.actived, node.isActivable() ? node.actived : false)];

      if (node.vmCheckable) {
        var checkboxDisabled = false;

        if (typeof disableCheck === "function") {
          checkboxDisabled = disableCheck(node);
        } else {
          checkboxDisabled = !!disableCheck;
        }

        if (node.isDisabled()) {
          checkboxDisabled = true;
        }

        var itemCheckProps = _objectSpread(_objectSpread({}, checkProps), {}, {
          disabled: checkboxDisabled
        });

        var _labelNode = function () {
          return labelNode;
        }();

        labelNode = withDirectives(createVNode(Checkbox, mergeProps({
          "class": labelClasses,
          "checked": node.checked,
          "indeterminate": node.indeterminate,
          "disabled": node.isDisabled(),
          "name": node.value,
          "onChange": function onChange() {
            return _this.handleChange();
          },
          "ignore": "expand,active"
        }, itemCheckProps), _isSlot(labelNode) ? labelNode : {
          "default": function _default() {
            return [_labelNode];
          }
        }), [[resolveDirective("ripple")]]);
      } else {
        var inner = createVNode("span", {
          "style": "position: relative"
        }, [labelNode]);

        labelNode = node.isActivable() ? withDirectives(createVNode("span", {
          "key": "1",
          "class": labelClasses
        }, [inner]), [[resolveDirective("ripple")]]) : createVNode("span", {
          "key": "2",
          "class": labelClasses
        }, [inner]);
      }

      return labelNode;
    },
    renderOperations: function renderOperations() {
      var node = this.node,
          treeScope = this.treeScope;
      var operations = treeScope.operations,
          scopedSlots = treeScope.scopedSlots;
      var opNode = null;

      if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.operations) {
        opNode = scopedSlots.operations({
          node: node === null || node === void 0 ? void 0 : node.getModel()
        });
      } else {
        opNode = getTNode(operations, {
          node: node
        });
      }

      if (opNode) {
        var _opNode = function () {
          return opNode;
        }();

        opNode = createVNode("span", {
          "class": CLASS_NAMES.treeOperations,
          "ignore": "active,expand"
        }, [opNode]);
      }

      return opNode;
    },
    renderItem: function renderItem() {
      var itemNodes = [];
      var iconNode = this.renderIcon();
      var lineNode = this.renderLine();

      if (lineNode) {
        itemNodes.push(lineNode);
      }

      if (iconNode) {
        itemNodes.push(iconNode);
      }

      var labelNode = this.renderLabel();

      if (labelNode) {
        itemNodes.push(labelNode);
      }

      var opNode = this.renderOperations();

      if (opNode) {
        itemNodes.push(opNode);
      }

      return itemNodes;
    },
    handleClick: function handleClick(evt) {
      var node = this.node;
      var state = {
        mouseEvent: evt,
        event: evt,
        node: node,
        path: node.getPath()
      };
      this.$emit("click", state);
    },
    handleChange: function handleChange() {
      var node = this.node;
      var event = new Event("change");
      var state = {
        event: event,
        node: node
      };
      this.$emit("change", state);
    }
  },
  render: function render() {
    var _this2 = this;

    var node = this.node;
    var level = node.level;
    var styles = this.getStyles();
    var classList = this.getClassList();
    return createVNode("div", {
      "class": classList,
      "data-value": node.value,
      "data-level": level,
      "style": styles,
      "onClick": function onClick(evt) {
        return _this2.handleClick(evt);
      }
    }, [this.renderItem()]);
  }
}));

export { TreeItemProps, TreeItem as default };
//# sourceMappingURL=tree-item.js.map
