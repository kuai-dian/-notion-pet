{"version":3,"file":"td-tree.js","sources":["../../src/tree/td-tree.tsx"],"sourcesContent":["import { defineComponent, TransitionGroup } from 'vue';\nimport upperFirst from 'lodash/upperFirst';\nimport pick from 'lodash/pick';\nimport mixins from '../utils/mixins';\nimport getConfigReceiverMixins, { TreeConfig } from '../config-provider/config-receiver';\nimport TreeStore from '../_common/js/tree/tree-store';\nimport TreeNode from '../_common/js/tree/tree-node';\nimport TreeItem from './tree-item';\nimport props from './props';\nimport { renderTNodeJSX } from '../utils/render-tnode';\nimport { ClassName, TNodeReturnValue, TreeOptionData } from '../common';\nimport { TdTreeProps } from './type';\n\nimport {\n  TypeTdTreeProps,\n  TreeNodeValue,\n  TypeValueMode,\n  TypeEventState,\n  TreeNodeState,\n  TypeTreeNodeModel,\n  TypeTargetNode,\n} from './interface';\nimport { CLASS_NAMES, FX } from './constants';\nimport { getMark, getNode, emitEvent } from './util';\n\nexport default defineComponent({\n  ...mixins(getConfigReceiverMixins<TreeConfig>('tree')),\n  name: 'TTree',\n  components: { TransitionGroup },\n  props,\n  data() {\n    const { checkProps, empty, icon, label, line, operations } = this;\n\n    return {\n      store: null,\n      nodesMap: null,\n      mouseEvent: null,\n      treeNodes: [],\n      treeScope: {\n        checkProps,\n        empty,\n        icon,\n        label,\n        line,\n        operations,\n        scopedSlots: null,\n      },\n      transitionCD: null,\n    };\n  },\n  computed: {\n    classList(): ClassName {\n      const list: Array<string> = [CLASS_NAMES.tree];\n      const { disabled, hover, transition, checkable, expandOnClickNode } = this;\n      if (disabled) {\n        list.push(CLASS_NAMES.disabled);\n      }\n      if (hover) {\n        list.push(CLASS_NAMES.treeHoverable);\n      }\n      if (checkable) {\n        list.push(CLASS_NAMES.treeCheckable);\n      }\n      if (transition) {\n        list.push(CLASS_NAMES.treeTransition);\n      }\n      if (expandOnClickNode) {\n        list.push(CLASS_NAMES.treeBlockNode);\n      }\n      return list;\n    },\n  },\n  watch: {\n    data(list) {\n      this.rebuild(list);\n    },\n    value(nVal) {\n      this.store.replaceChecked(nVal);\n    },\n    expanded(nVal) {\n      this.store.replaceExpanded(nVal);\n    },\n    actived(nVal) {\n      this.store.replaceActived(nVal);\n    },\n  },\n  created() {\n    this.build();\n  },\n  methods: {\n    // 创建单个 tree 节点\n    renderItem(node: TreeNode) {\n      const { treeScope } = this;\n      const treeItem = (\n        <TreeItem\n          key={node.value}\n          node={node}\n          treeScope={treeScope}\n          onClick={this.handleClick}\n          onChange={this.handleChange}\n        />\n      );\n      return treeItem;\n    },\n    // 获取视图节点映射关系\n    getNodesMap() {\n      let { nodesMap } = this;\n      if (!nodesMap) {\n        nodesMap = new Map();\n        this.nodesMap = nodesMap;\n      }\n      return nodesMap;\n    },\n    // 更新视图节点映射关系\n    updateNodesMap() {\n      const { store, treeNodes } = this;\n      const nodesMap = this.getNodesMap();\n\n      let index = 0;\n      while (index < treeNodes.length) {\n        const nodeView = treeNodes[index];\n        if (nodeView && nodeView.componentInstance) {\n          const { node } = nodeView.componentInstance;\n          if (node && !store.getNode(node.value)) {\n            // 视图列表中的节点，在树中不存在\n            const nodeViewIndex = treeNodes.indexOf(nodeView);\n            // 则从视图中删除对应节点\n            treeNodes.splice(nodeViewIndex, 1);\n            // 注意 $destroy 是一个耗时操作\n            nodeView.componentInstance.$destroy();\n            nodesMap.set(node.value, null);\n            nodesMap.delete(node.value);\n          } else {\n            index += 1;\n          }\n        } else {\n          index += 1;\n        }\n      }\n    },\n    // 刷新树的视图状态\n    refresh() {\n      const { store, treeNodes, treeScope } = this;\n\n      treeScope.scopedSlots = this.$slots;\n\n      const nodesMap = this.getNodesMap();\n      this.updateNodesMap();\n\n      let index = 0;\n      const allNodes = store.getNodes();\n      allNodes.forEach((node: TreeNode) => {\n        if (node.visible) {\n          if (nodesMap.has(node.value)) {\n            const nodeView = nodesMap.get(node.value);\n            const nodeViewIndex = treeNodes.indexOf(nodeView);\n            if (nodeViewIndex !== index) {\n              // 节点存在，但位置与可视节点位置冲突，需要更新节点位置\n              treeNodes.splice(nodeViewIndex, 1);\n              treeNodes.splice(index, 0, nodeView);\n            }\n          } else {\n            // 节点可视，且不存在视图，创建该节点视图并插入到当前位置\n            const nodeView = this.renderItem(node);\n            treeNodes.splice(index, 0, nodeView);\n            nodesMap.set(node.value, nodeView);\n          }\n          index += 1;\n        } else if (nodesMap.has(node.value)) {\n          // 节点不可视，存在该视图，需要删除该节点视图\n          const nodeView = nodesMap.get(node.value);\n          const nodeViewIndex = treeNodes.indexOf(nodeView);\n          treeNodes.splice(nodeViewIndex, 1);\n          nodesMap.delete(node.value);\n        }\n      });\n      const { nodeMap } = store;\n      nodesMap.forEach((value: any, key: string) => {\n        if (!nodeMap.has(key)) {\n          // 这个节点可能被删掉了，视图也要同步删掉\n          const nodeView = nodesMap.get(key);\n          const nodeViewIndex = treeNodes.indexOf(nodeView);\n          treeNodes.splice(nodeViewIndex, 1);\n          nodesMap.delete(key);\n        }\n      });\n    },\n\n    // 同步 Store 选项\n    updateStoreConfig() {\n      const { store } = this;\n      if (!store) return;\n      // 统一更新选项，然后在 store 统一识别属性更新\n      const storeProps = pick(this, [\n        'keys',\n        'expandAll',\n        'expandLevel',\n        'expandMutex',\n        'expandParent',\n        'activable',\n        'activeMultiple',\n        'disabled',\n        'checkable',\n        'checkStrictly',\n        'load',\n        'lazy',\n        'valueMode',\n        'filter',\n      ]);\n      store.setConfig(storeProps);\n    },\n\n    updateExpanded() {\n      const { store, expanded, expandParent } = this;\n      // 初始化展开状态\n      // 校验是否自动展开父节点\n      if (Array.isArray(expanded)) {\n        const expandedMap = new Map();\n        expanded.forEach((val) => {\n          expandedMap.set(val, true);\n          if (expandParent) {\n            const node = store.getNode(val);\n            node.getParents().forEach((tn: TypeTreeNodeModel) => {\n              expandedMap.set(tn.value, true);\n            });\n          }\n        });\n        const expandedArr = Array.from(expandedMap.keys());\n        store.setExpanded(expandedArr);\n      }\n    },\n\n    // 初始化树结构\n    build() {\n      let list = this.data;\n      const { actived, value, valueMode, filter } = this;\n\n      const store = new TreeStore({\n        valueMode: valueMode as TypeValueMode,\n        filter,\n        onLoad: (info: TypeEventState) => {\n          this.handleLoad(info);\n        },\n        onUpdate: () => {\n          this.refresh();\n        },\n      });\n\n      // 初始化数据\n      this.store = store;\n      this.updateStoreConfig();\n\n      if (!Array.isArray(list)) {\n        list = [];\n      }\n      store.append(list);\n\n      // 刷新节点，必须在配置选中之前执行\n      // 这样选中态联动判断才能找到父节点\n      store.refreshNodes();\n\n      // 初始化选中状态\n      if (Array.isArray(value)) {\n        store.setChecked(value);\n      }\n\n      this.updateExpanded();\n\n      // 初始化激活状态\n      if (Array.isArray(actived)) {\n        store.setActived(actived);\n      }\n\n      // 树的数据初始化之后，需要立即进行一次视图刷新\n      this.refresh();\n    },\n    // 树结构变化后，重新\n    rebuild(list: TdTreeProps['data']) {\n      this.getNodesMap().clear();\n      this.treeNodes.length = 0;\n      const { store, value, actived } = this;\n      store.reload(list);\n      // 初始化选中状态\n      if (Array.isArray(value)) {\n        store.setChecked(value);\n      }\n      this.updateExpanded();\n      // 初始化激活状态\n      if (Array.isArray(actived)) {\n        store.setActived(actived);\n      }\n      store.refreshState();\n    },\n    toggleActived(item: TypeTargetNode): TreeNodeValue[] {\n      const node = getNode(this.store, item);\n      return this.setActived(node, !node.isActived());\n    },\n    setActived(item: TypeTargetNode, isActived: boolean) {\n      const node = getNode(this.store, item);\n      const actived = node.setActived(isActived);\n      const { mouseEvent } = this;\n      const ctx = {\n        node: node.getModel(),\n        e: mouseEvent,\n      };\n      emitEvent<Parameters<TypeTdTreeProps['onActive']>>(this, 'active', actived, ctx);\n      return actived;\n    },\n    toggleExpanded(item: TypeTargetNode): TreeNodeValue[] {\n      const node = getNode(this.store, item);\n      return this.setExpanded(node, !node.isExpanded());\n    },\n    setExpanded(item: TypeTargetNode, isExpanded: boolean): TreeNodeValue[] {\n      const node = getNode(this.store, item);\n      const expanded = node.setExpanded(isExpanded);\n      const { mouseEvent } = this;\n      const ctx = {\n        node: node.getModel(),\n        e: mouseEvent,\n      };\n      emitEvent<Parameters<TypeTdTreeProps['onExpand']>>(this, 'expand', expanded, ctx);\n      return expanded;\n    },\n    toggleChecked(item: TypeTargetNode): TreeNodeValue[] {\n      const node = getNode(this.store, item);\n      return this.setChecked(node, !node.isChecked());\n    },\n    setChecked(item: TypeTargetNode, isChecked: boolean): TreeNodeValue[] {\n      const node = getNode(this.store, item);\n      const checked = node.setChecked(isChecked);\n      const ctx = {\n        node: node.getModel(),\n      };\n      emitEvent<Parameters<TypeTdTreeProps['onChange']>>(this, 'change', checked, ctx);\n      return checked;\n    },\n    handleLoad(info: TypeEventState): void {\n      const { node } = info;\n      const ctx = {\n        node: node.getModel(),\n      };\n      const { value, expanded, actived, store } = this;\n      if (value && value.length > 0) {\n        store.replaceChecked(value);\n      }\n      if (expanded && expanded.length > 0) {\n        store.replaceExpanded(expanded);\n      }\n      if (actived && actived.length > 0) {\n        store.replaceActived(actived);\n      }\n      emitEvent<Parameters<TypeTdTreeProps['onLoad']>>(this, 'load', ctx);\n    },\n    handleClick(state: TypeEventState): void {\n      const { expandOnClickNode } = this;\n      const { mouseEvent, event, node } = state;\n\n      if (!node || this.disabled || node.disabled) {\n        return;\n      }\n\n      this.mouseEvent = mouseEvent;\n\n      let shouldExpand = expandOnClickNode;\n      let shouldActive = true;\n      ['trigger', 'ignore'].forEach((markName) => {\n        const mark = getMark(markName, event.target as HTMLElement, event.currentTarget as HTMLElement);\n        const markValue = mark?.value || '';\n        if (markValue.indexOf('expand') >= 0) {\n          if (markName === 'trigger') {\n            shouldExpand = true;\n          } else if (markName === 'ignore') {\n            shouldExpand = false;\n          }\n        }\n        if (markValue.indexOf('active') >= 0) {\n          if (markName === 'ignore') {\n            shouldActive = false;\n          }\n        }\n      });\n\n      if (shouldExpand) {\n        this.toggleExpanded(node);\n      }\n      if (shouldActive) {\n        this.toggleActived(node);\n      }\n\n      const ctx = {\n        node: node.getModel(),\n        e: mouseEvent,\n      };\n\n      emitEvent<Parameters<TypeTdTreeProps['onClick']>>(this, 'click', ctx);\n      this.mouseEvent = null;\n    },\n    handleChange(state: TypeEventState): void {\n      const { disabled } = this;\n      const { node } = state;\n      if (!node || disabled || node.disabled) {\n        return;\n      }\n      this.toggleChecked(node);\n    },\n\n    // -------- 公共方法 start --------\n    setItem(value: TreeNodeValue, options: TreeNodeState): void {\n      const node: TreeNode = this.store.getNode(value);\n      const spec = options;\n      const keys = Object.keys(spec);\n      if (node && spec) {\n        ['expanded', 'actived', 'checked'].forEach((name) => {\n          if (keys.includes(name)) {\n            this[`set${upperFirst(name)}`](node, spec[name]);\n            delete spec[name];\n          }\n        });\n        node.set(spec);\n      }\n    },\n    getItem(value: TreeNodeValue): TypeTreeNodeModel {\n      const node: TreeNode = this.store.getNode(value);\n      return node?.getModel();\n    },\n    getItems(value?: TreeNodeValue): TypeTreeNodeModel[] {\n      const nodes = this.store.getNodes(value);\n      return nodes.map((node: TreeNode) => node.getModel());\n    },\n    appendTo(para?: TreeNodeValue, item?: TreeOptionData | TreeOptionData[]): void {\n      let list = [];\n      if (Array.isArray(item)) {\n        list = item;\n      } else {\n        list = [item];\n      }\n      list.forEach((item) => {\n        const val = item?.value || '';\n        const node = getNode(this.store, val);\n        if (node) {\n          this.store.appendNodes(para, node);\n        } else {\n          this.store.appendNodes(para, item);\n        }\n      });\n    },\n    insertBefore(value: TreeNodeValue, item: TreeOptionData): void {\n      const val = item?.value || '';\n      const node = getNode(this.store, val);\n      if (node) {\n        this.store.insertBefore(value, node);\n      } else {\n        this.store.insertBefore(value, item);\n      }\n    },\n    insertAfter(value: TreeNodeValue, item: TreeOptionData): void {\n      const val = item?.value || '';\n      const node = getNode(this.store, val);\n      if (node) {\n        this.store.insertAfter(value, node);\n      } else {\n        this.store.insertAfter(value, item);\n      }\n    },\n    remove(value?: TreeNodeValue): void {\n      return this.store.remove(value);\n    },\n    getIndex(value: TreeNodeValue): number {\n      return this.store.getNodeIndex(value);\n    },\n    getParent(value: TreeNodeValue): TypeTreeNodeModel {\n      const node = this.store.getParent(value);\n      return node?.getModel();\n    },\n    getParents(value: TreeNodeValue): TypeTreeNodeModel[] {\n      const nodes = this.store.getParents(value);\n      return nodes.map((node: TreeNode) => node.getModel());\n    },\n    getPath(value: TreeNodeValue): TypeTreeNodeModel[] {\n      const node = this.store.getNode(value);\n      let pathNodes = [];\n      if (node) {\n        pathNodes = node.getPath().map((node: TreeNode) => node.getModel());\n      }\n      return pathNodes;\n    },\n    // -------- 公共方法 end --------\n  },\n  render() {\n    const { classList, treeNodes, treeScope, $slots } = this;\n\n    const scopeProps = pick(this, ['checkProps', 'disableCheck', 'icon', 'label', 'line', 'operations']);\n\n    this.updateStoreConfig();\n    Object.assign(treeScope, scopeProps);\n    treeScope.scopedSlots = $slots;\n\n    let emptyNode: TNodeReturnValue = null;\n    let treeNodeList = null;\n\n    if (treeNodes.length <= 0) {\n      const useLocale = !this.empty && !this.$slots.empty;\n      emptyNode = (\n        <div class={CLASS_NAMES.treeEmpty}>{useLocale ? this.t(this.global.empty) : renderTNodeJSX(this, 'empty')}</div>\n      );\n    }\n\n    treeNodeList = (\n      <transition-group\n        name={FX.treeNode}\n        tag=\"div\"\n        enter-active-class={CLASS_NAMES.treeNodeEnter}\n        leave-active-class={CLASS_NAMES.treeNodeLeave}\n      >\n        {treeNodes}\n      </transition-group>\n    );\n\n    return (\n      <div class={classList}>\n        {treeNodeList}\n        {emptyNode}\n      </div>\n    );\n  },\n});\n"],"names":["defineComponent","mixins","getConfigReceiverMixins","name","components","TransitionGroup","props","data","checkProps","empty","icon","label","line","operations","store","nodesMap","mouseEvent","treeNodes","treeScope","scopedSlots","transitionCD","computed","classList","list","CLASS_NAMES","tree","disabled","hover","transition","checkable","expandOnClickNode","push","treeHoverable","treeCheckable","treeTransition","treeBlockNode","watch","rebuild","value","nVal","replaceChecked","expanded","replaceExpanded","actived","replaceActived","created","build","methods","renderItem","node","treeItem","handleClick","handleChange","getNodesMap","Map","updateNodesMap","index","length","nodeView","componentInstance","getNode","nodeViewIndex","indexOf","splice","$destroy","set","refresh","$slots","allNodes","getNodes","forEach","visible","has","get","nodeMap","key","updateStoreConfig","storeProps","pick","setConfig","updateExpanded","expandParent","Array","isArray","expandedMap","val","getParents","tn","expandedArr","from","keys","setExpanded","valueMode","filter","TreeStore","onLoad","info","handleLoad","onUpdate","append","refreshNodes","setChecked","setActived","clear","reload","refreshState","toggleActived","item","isActived","ctx","getModel","e","emitEvent","toggleExpanded","isExpanded","toggleChecked","isChecked","checked","state","event","shouldExpand","shouldActive","markName","mark","getMark","target","currentTarget","markValue","setItem","options","spec","Object","includes","upperFirst","getItem","getItems","nodes","map","appendTo","para","item2","appendNodes","insertBefore","insertAfter","remove","getIndex","getNodeIndex","getParent","getPath","pathNodes","node2","render","scopeProps","assign","emptyNode","treeNodeList","useLocale","treeEmpty","t","global","renderTNodeJSX","FX","treeNode","treeNodeEnter","treeNodeLeave"],"mappings":"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"}