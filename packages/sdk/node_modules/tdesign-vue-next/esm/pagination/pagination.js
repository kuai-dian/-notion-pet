/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _typeof from '@babel/runtime/helpers/typeof';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { isVNode, defineComponent, createVNode, resolveComponent } from 'vue';
import { ChevronLeftIcon, ChevronRightIcon, ChevronLeftDoubleIcon, ChevronRightDoubleIcon, EllipsisIcon } from 'tdesign-icons-vue-next';
import config from '../config.js';
import mixins from '../utils/mixins.js';
import getConfigReceiverMixins from '../config-provider/config-receiver.js';
import { InputNumber } from '../input-number/index.js';
import { Select, Option } from '../select/index.js';
import ClASSNAMES from '../utils/classnames.js';
import props from './props.js';
import { renderTNodeJSX } from '../utils/render-tnode.js';
import { emitEvent } from '../utils/event.js';
import '../config-provider/zh_CN_config.js';
import '../config-provider/type.js';
import '../input-number/input-number.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '../button/index.js';
import '../button/button.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../loading/index.js';
import '../loading/loading.js';
import '@babel/runtime/helpers/slicedToArray';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../utils/dom.js';
import '../_chunks/dep-b66bfe36.js';
import 'lodash/isString';
import '../utils/easing.js';
import '../utils/transfer-dom.js';
import '../loading/props.js';
import '../utils/withInstall.js';
import '../loading/style';
import '../loading/type.js';
import '../loading/plugin.js';
import 'lodash/isEmpty';
import 'lodash/isFunction';
import 'lodash/isObject';
import '../button/props.js';
import '../utils/ripple.js';
import '../utils/set-style.js';
import '../button/style';
import '../button/type.js';
import '../input-number/props.js';
import '../utils/map-props.js';
import 'lodash/kebabCase';
import '../input-number/style';
import '../input-number/type.js';
import '../utils/helper.js';
import 'lodash/camelCase';
import '../select/select.js';
import 'lodash/debounce';
import 'lodash/get';
import 'lodash/set';
import '../input/index.js';
import '../input/addon.js';
import '../input/input.js';
import '../input/props.js';
import '../input/input-group.js';
import '../input/style';
import '../input/type.js';
import '../tag/index.js';
import '../tag/tag.js';
import '../tag/props.js';
import '../tag/check-tag.js';
import '../tag/check-tag-props.js';
import '../tag/style';
import '../tag/type.js';
import '../common-components/fake-arrow.js';
import '../popup/index.js';
import '../popup/popup.js';
import '@popperjs/core';
import '../popup/props.js';
import '../popup/style';
import '../popup/type.js';
import '../select/option.js';
import '../select/option-props.js';
import '../checkbox/index.js';
import '../checkbox/checkbox.js';
import '../checkbox/props.js';
import '../checkbox/group.js';
import 'lodash/intersection';
import '../checkbox/checkbox-group-props.js';
import '../checkbox/style';
import '../checkbox/type.js';
import '../select/props.js';
import '../select/optionGroup.js';
import '../select/option-group-props.js';
import '../select/style';
import '../select/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}

var prefix = config.prefix;
var name = "".concat(prefix, "-pagination");
var min = 1;
var PaginationLocalReceiver = getConfigReceiverMixins("pagination");
var _Pagination = defineComponent(_objectSpread(_objectSpread({
  name: "TPagination",
  components: {
    ChevronLeftIcon: ChevronLeftIcon,
    ChevronRightIcon: ChevronRightIcon,
    ChevronLeftDoubleIcon: ChevronLeftDoubleIcon,
    ChevronRightDoubleIcon: ChevronRightDoubleIcon,
    EllipsisIcon: EllipsisIcon,
    TInputNumber: InputNumber,
    TSelect: Select,
    TOption: Option
  }
}, mixins(PaginationLocalReceiver)), {}, {
  props: _objectSpread(_objectSpread({}, props), {}, {
    current: {
      type: Number,
      "default": 1,
      validator: function validator(v) {
        return v > 0;
      }
    },
    pageSize: {
      type: Number,
      "default": 10,
      validator: function validator(v) {
        return v > 0;
      }
    }
  }),
  emits: ["change", "update:current", "update:pageSize", "page-size-change", "current-change"],
  data: function data() {
    return {
      prevMore: false,
      nextMore: false,
      jumpIndex: this.current
    };
  },
  computed: {
    paginationClass: function paginationClass() {
      return ["".concat(name), ClASSNAMES.SIZE[this.size], _defineProperty({}, ClASSNAMES.STATUS.disabled, this.disabled)];
    },
    totalClass: function totalClass() {
      return ["".concat(name, "__total")];
    },
    sizerClass: function sizerClass() {
      return ["".concat(name, "__select")];
    },
    preBtnClass: function preBtnClass() {
      return ["".concat(name, "__btn"), "".concat(name, "__btn-prev"), _defineProperty({}, ClASSNAMES.STATUS.disabled, this.disabled || this.current === 1)];
    },
    nextBtnClass: function nextBtnClass() {
      return ["".concat(name, "__btn"), "".concat(name, "__btn-next"), _defineProperty({}, ClASSNAMES.STATUS.disabled, this.disabled || this.current === this.pageCount)];
    },
    btnWrapClass: function btnWrapClass() {
      return ["".concat(name, "__pager")];
    },
    btnMoreClass: function btnMoreClass() {
      return ["".concat(name, "__number"), "".concat(name, "__number--more"), _defineProperty({}, ClASSNAMES.STATUS.disabled, this.disabled)];
    },
    jumperClass: function jumperClass() {
      return ["".concat(name, "__jump")];
    },
    jumperInputClass: function jumperInputClass() {
      return ["".concat(name, "__input")];
    },
    simpleClass: function simpleClass() {
      return ["".concat(name, "__select")];
    },
    isSimple: function isSimple() {
      return this.theme === "simple";
    },
    pageCount: function pageCount() {
      var c = Math.ceil(this.total / this.pageSize);
      return c > 0 ? c : 1;
    },
    pageCountOption: function pageCountOption() {
      var ans = [];

      for (var i = 1; i <= this.pageCount; i++) {
        ans.push({
          value: i,
          label: "".concat(i, "/").concat(this.pageCount)
        });
      }

      return ans;
    },
    sizeOptions: function sizeOptions() {
      var _this = this;

      var pageSizeOptions = this.pageSizeOptions;
      var options = pageSizeOptions.map(function (option) {
        return _typeof(option) === "object" ? option : {
          label: _this.t(_this.global.itemsPerPage, {
            size: option
          }),
          value: Number(option)
        };
      });
      return options.sort(function (a, b) {
        return a.value - b.value;
      });
    },
    curPageLeftCount: function curPageLeftCount() {
      return Math.ceil((this.foldedMaxPageBtn - 1) / 2);
    },
    curPageRightCount: function curPageRightCount() {
      return Math.ceil((this.foldedMaxPageBtn - 1) / 2);
    },
    isPrevMoreShow: function isPrevMoreShow() {
      return 2 + this.curPageLeftCount < this.current;
    },
    isNextMoreShow: function isNextMoreShow() {
      return this.pageCount - 1 - this.curPageRightCount > this.current;
    },
    pages: function pages() {
      var array = [];
      var start;
      var end;

      if (this.isFolded) {
        if (this.isPrevMoreShow && this.isNextMoreShow) {
          start = this.current - this.curPageLeftCount;
          end = this.current + this.curPageRightCount;
        } else {
          start = this.isPrevMoreShow ? this.pageCount - this.foldedMaxPageBtn + 1 : 2;
          end = this.isPrevMoreShow ? this.pageCount - 1 : this.foldedMaxPageBtn;
        }
      } else {
        start = 1;
        end = this.pageCount;
      }

      for (var i = start; i <= end; i++) {
        array.push(i);
      }

      return array;
    },
    isFolded: function isFolded() {
      return this.pageCount > this.maxPageBtn;
    }
  },
  watch: {
    current: function current(val) {
      this.jumpIndex = val;
    }
  },
  methods: {
    toPage: function toPage(pageIndex, isTriggerChange) {
      if (this.disabled) {
        return;
      }

      var current = pageIndex;

      if (pageIndex < min) {
        current = min;
      } else if (pageIndex > this.pageCount) {
        current = this.pageCount;
      }

      if (this.current !== current) {
        var prev = this.current;
        var pageInfo = {
          current: current,
          previous: prev,
          pageSize: this.pageSize
        };

        if (isTriggerChange !== false) {
          emitEvent(this, "change", pageInfo);
        }

        this.$emit("update:current", current);
        emitEvent(this, "current-change", current, pageInfo);
      }
    },
    prevPage: function prevPage() {
      this.toPage(this.current - 1);
    },
    nextPage: function nextPage() {
      this.toPage(this.current + 1);
    },
    prevMorePage: function prevMorePage() {
      this.toPage(this.current - this.foldedMaxPageBtn);
    },
    nextMorePage: function nextMorePage() {
      this.toPage(this.current + this.foldedMaxPageBtn);
    },
    getButtonClass: function getButtonClass(index) {
      var _ref5;

      return ["".concat(name, "__number"), (_ref5 = {}, _defineProperty(_ref5, ClASSNAMES.STATUS.disabled, this.disabled), _defineProperty(_ref5, ClASSNAMES.STATUS.current, this.current === index), _ref5)];
    },
    onSelectorChange: function onSelectorChange(e) {
      if (this.disabled) {
        return;
      }

      var pageSize = parseInt(e, 10);
      var pageCount = 1;

      if (pageSize > 0) {
        pageCount = Math.ceil(this.total / pageSize);
      }

      var isIndexChange = false;

      if (this.current > pageCount) {
        isIndexChange = true;
      }

      var pageInfo = {
        current: isIndexChange ? pageCount : this.current,
        previous: this.current,
        pageSize: pageSize
      };
      emitEvent(this, "page-size-change", pageSize, pageInfo);
      emitEvent(this, "change", pageInfo);

      if (isIndexChange) {
        this.toPage(pageCount, false);
      }
    },
    renderTotalContent: function renderTotalContent() {
      var locale = this.locale,
          total = this.total,
          t = this.t;

      if (this.$slots.totalContent) {
        return this.$slots.totalContent(null);
      }

      if (typeof this.totalContent === "function") {
        return this.totalContent();
      }

      return t(locale.total, {
        total: total
      });
    },
    onJumperChange: function onJumperChange(val) {
      var currentIndex = Number(val);
      if (isNaN(currentIndex)) return;
      this.toPage(currentIndex);
    },
    renderPagination: function renderPagination() {
      var _this2 = this;

      var _slot;

      return createVNode("div", {
        "class": this.paginationClass
      }, [renderTNodeJSX(this, "totalContent", createVNode("div", {
        "class": this.totalClass
      }, [this.t(this.global.total, {
        total: this.total
      })])), this.pageSizeOptions.length > 0 && createVNode(resolveComponent("t-select"), {
        "size": this.size,
        "value": this.pageSize,
        "disabled": this.disabled,
        "class": this.sizerClass,
        "onChange": this.onSelectorChange
      }, _isSlot(_slot = this.sizeOptions.map(function (item, index) {
        return createVNode(resolveComponent("t-option"), {
          "value": item.value,
          "label": item.label,
          "key": index
        }, null);
      })) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      }), createVNode("div", {
        "class": this.preBtnClass,
        "onClick": this.prevPage,
        "disabled": this.disabled || this.current === min
      }, [createVNode(resolveComponent("chevron-left-icon"), null, null)]), !this.isSimple ? createVNode("ul", {
        "class": this.btnWrapClass
      }, [this.isFolded && createVNode("li", {
        "class": this.getButtonClass(1),
        "onClick": function onClick() {
          return _this2.toPage(min);
        }
      }, [min]), this.isFolded && this.isPrevMoreShow ? createVNode("li", {
        "class": this.btnMoreClass,
        "onClick": this.prevMorePage,
        "onMouseover": function onMouseover() {
          return _this2.prevMore = true;
        },
        "onMouseout": function onMouseout() {
          return _this2.prevMore = false;
        }
      }, [this.prevMore ? createVNode(resolveComponent("chevron-left-double-icon"), null, null) : createVNode(resolveComponent("ellipsis-icon"), null, null)]) : null, this.pages.map(function (i) {
        return createVNode("li", {
          "class": _this2.getButtonClass(i),
          "key": i,
          "onClick": function onClick() {
            return _this2.toPage(i);
          }
        }, [i]);
      }), this.isFolded && this.isNextMoreShow ? createVNode("li", {
        "class": this.btnMoreClass,
        "onClick": this.nextMorePage,
        "onMouseover": function onMouseover() {
          return _this2.nextMore = true;
        },
        "onMouseout": function onMouseout() {
          return _this2.nextMore = false;
        }
      }, [this.nextMore ? createVNode(resolveComponent("chevron-right-double-icon"), null, null) : createVNode(resolveComponent("ellipsis-icon"), null, null)]) : null, this.isFolded ? createVNode("li", {
        "class": this.getButtonClass(this.pageCount),
        "onClick": function onClick() {
          return _this2.toPage(_this2.pageCount);
        }
      }, [this.pageCount]) : null]) : createVNode(resolveComponent("t-select"), {
        "size": this.size,
        "value": this.current,
        "disabled": this.disabled,
        "class": this.simpleClass,
        "onChange": this.toPage,
        "options": this.pageCountOption
      }, null), createVNode("div", {
        "class": this.nextBtnClass,
        "onClick": this.nextPage,
        "disabled": this.disabled || this.current === this.pageCount
      }, [createVNode(resolveComponent("chevron-right-icon"), null, null)]), this.showJumper ? createVNode("div", {
        "class": this.jumperClass
      }, [this.t(this.global.jumpTo), createVNode(resolveComponent("t-input-number"), {
        "class": this.jumperInputClass,
        "modelValue": _this2.jumpIndex,
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return _this2.jumpIndex = $event;
        },
        "onBlur": this.onJumperChange,
        "onEnter": this.onJumperChange,
        "max": this.pageCount,
        "min": min,
        "theme": "normal"
      }, null), this.t(this.global.page)]) : null]);
    }
  },
  render: function render() {
    var pageCount = this.pageCount;
    return pageCount >= 1 && this.renderPagination();
  }
}));

export { _Pagination as default };
//# sourceMappingURL=pagination.js.map
