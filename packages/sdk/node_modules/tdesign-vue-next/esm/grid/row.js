/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { isVNode, defineComponent, provide, computed, createVNode } from 'vue';
import { prefix } from '../config.js';
import props from './row-props.js';
import { useRowSize, getRowClasses, calcRowStyle } from './common.js';
import { renderTNodeJSX } from '../utils/render-tnode.js';
import 'lodash/isObject';
import '../utils/responsive.js';
import '../hooks/event.js';
import '../utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isFunction';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}

var name = "".concat(prefix, "-row");
var _Row = defineComponent({
  name: "TRow",
  props: _objectSpread({}, props),
  setup: function setup(props2) {
    provide("rowContext", {
      gutter: props2.gutter
    });
    var size = useRowSize();
    var rowClasses = computed(function () {
      return getRowClasses(name, props2);
    });
    var rowStyle = computed(function () {
      return calcRowStyle(props2.gutter, size.value);
    });
    return {
      rowStyle: rowStyle,
      size: size,
      rowClasses: rowClasses
    };
  },
  render: function render() {
    var _slot;

    var TAG = this.tag,
        rowClasses = this.rowClasses,
        rowStyle = this.rowStyle;
    return createVNode(TAG, {
      "class": rowClasses,
      "style": rowStyle
    }, _isSlot(_slot = renderTNodeJSX(this, "default")) ? _slot : {
      "default": function _default() {
        return [_slot];
      }
    });
  }
});

export { _Row as default };
//# sourceMappingURL=row.js.map
