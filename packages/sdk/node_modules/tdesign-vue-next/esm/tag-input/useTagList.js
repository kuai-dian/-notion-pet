/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { ref } from 'vue';
import useDefault from '../hooks/useDefault.js';
import 'lodash/camelCase';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function useTagList(props, context) {
  var _useDefault = useDefault(props, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray(_useDefault, 2),
      tagValue = _useDefault2[0],
      setTagValue = _useDefault2[1];

  var oldInputValue = ref();

  var onClose = function onClose(p) {
    var _props$onRemove;

    var arr = _toConsumableArray(tagValue.value);

    arr.splice(p.index, 1);
    setTagValue(arr, {
      trigger: "tag-remove",
      index: p.index,
      e: p.e
    });
    (_props$onRemove = props.onRemove) === null || _props$onRemove === void 0 ? void 0 : _props$onRemove.call(props, _objectSpread(_objectSpread({}, p), {}, {
      trigger: "tag-remove",
      value: tagValue.value
    }));
  };

  var clearAll = function clearAll(context2) {
    setTagValue([], {
      trigger: "clear",
      e: context2.e
    });
  };

  var onInnerEnter = function onInnerEnter(value, context2) {
    var _tagValue$value, _props$onEnter;

    var valueStr = String(value).trim();
    if (!valueStr) return;
    var isLimitExceeded = props.max && ((_tagValue$value = tagValue.value) === null || _tagValue$value === void 0 ? void 0 : _tagValue$value.length) >= props.max;
    var newValue = tagValue.value;

    if (!isLimitExceeded) {
      newValue = tagValue.value instanceof Array ? tagValue.value.concat(String(valueStr)) : [valueStr];
      setTagValue(newValue, {
        trigger: "enter",
        index: newValue.length - 1,
        e: context2.e
      });
    }

    props === null || props === void 0 ? void 0 : (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props, newValue, _objectSpread(_objectSpread({}, context2), {}, {
      inputValue: value
    }));
  };

  var onInputBackspaceKeyUp = function onInputBackspaceKeyUp(value, context2) {
    var e = context2.e;

    if (!oldInputValue.value && ["Backspace", "NumpadDelete"].includes(e.code)) {
      var _tagValue$value2, _tagValue$value3, _props$onRemove2;

      var index = (_tagValue$value2 = tagValue.value) === null || _tagValue$value2 === void 0 ? void 0 : _tagValue$value2.length;
      var item = (_tagValue$value3 = tagValue.value) === null || _tagValue$value3 === void 0 ? void 0 : _tagValue$value3[index];
      var trigger = "backspace";
      setTagValue(tagValue.value.slice(0, -1), {
        e: e,
        index: index,
        item: item,
        trigger: trigger
      });
      (_props$onRemove2 = props.onRemove) === null || _props$onRemove2 === void 0 ? void 0 : _props$onRemove2.call(props, {
        e: e,
        index: index,
        item: item,
        trigger: trigger,
        value: tagValue.value
      });
    }

    oldInputValue.value = value;
  };

  return {
    tagValue: tagValue,
    clearAll: clearAll,
    onClose: onClose,
    onInnerEnter: onInnerEnter,
    onInputBackspaceKeyUp: onInputBackspaceKeyUp
  };
}

export { useTagList as default };
//# sourceMappingURL=useTagList.js.map
