/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { ref, defineComponent, h, createApp } from 'vue';
import _Dialog from './dialog.js';
import { getAttach } from '../utils/dom.js';
import 'tdesign-icons-vue-next';
import '../config.js';
import '../button/index.js';
import '../button/button.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../utils/classnames.js';
import '../loading/index.js';
import '../loading/loading.js';
import '@babel/runtime/helpers/slicedToArray';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isFunction';
import 'lodash/isObject';
import '../utils/transfer-dom.js';
import '../loading/props.js';
import '../utils/withInstall.js';
import '../loading/style';
import '../loading/type.js';
import '../loading/plugin.js';
import '../_chunks/dep-b66bfe36.js';
import '../utils/easing.js';
import '../button/props.js';
import '../utils/ripple.js';
import '../utils/set-style.js';
import '../button/style';
import '../button/type.js';
import './actions.js';
import '@babel/runtime/helpers/typeof';
import './props.js';
import '../utils/event.js';
import '../utils/helper.js';
import 'lodash/camelCase';
import '../utils/mixins.js';
import '../config-provider/config-receiver.js';
import '../config-provider/zh_CN_config.js';
import '../config-provider/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var createDialog = function createDialog(props) {
  var options = _objectSpread({}, props);

  var wrapper = document.createElement("div");
  var visible = ref(true);
  var className = options.className;
  var component = defineComponent({
    data: function data() {
      return {
        dialogOptions: options
      };
    },
    render: function render() {
      var onClose = options.onClose || function () {
        visible.value = false;
      };

      delete options.className;
      return h(_Dialog, _objectSpread({
        onClose: onClose,
        visible: visible.value
      }, this.dialogOptions));
    }
  });
  var dialog = createApp(component).mount(wrapper);

  if (className) {
    className.split(" ").forEach(function (name) {
      dialog.$el.classList.add(name.trim());
    });
  }

  if (options.style) {
    dialog.$el.style.cssText += options.style;
  }

  var container = getAttach(options.attach);

  if (container) {
    container.appendChild(wrapper);
  } else {
    console.error("attach is not exist");
  }

  var dialogNode = {
    show: function show() {
      visible.value = true;
    },
    hide: function hide() {
      visible.value = false;
    },
    update: function update(options2) {
      Object.assign(dialog, {
        dialogOptions: options2
      });
    },
    destroy: function destroy() {
      visible.value = false;
    }
  };
  return dialogNode;
};

var confirm = function confirm(props) {
  return createDialog(props);
};

var alert = function alert(props) {
  var options = _objectSpread({}, props);

  options.cancelBtn = null;
  return createDialog(options);
};

var extraApi = {
  confirm: confirm,
  alert: alert
};
var DialogPlugin = createDialog;

DialogPlugin.install = function (app) {
  app.config.globalProperties.$dialog = createDialog;
  Object.keys(extraApi).forEach(function (funcName) {
    app.config.globalProperties.$dialog[funcName] = extraApi[funcName];
  });
};

Object.keys(extraApi).forEach(function (funcName) {
  DialogPlugin[funcName] = extraApi[funcName];
});

export { DialogPlugin as default };
//# sourceMappingURL=plugin.js.map
