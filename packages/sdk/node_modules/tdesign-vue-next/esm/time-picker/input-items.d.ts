import { TimeInputType, InputTime } from './interface';
declare const _default: import("vue").DefineComponent<{
    format: {
        type: StringConstructor;
        default: string;
    };
    dayjs: {
        type: (ObjectConstructor | ArrayConstructor)[];
        default: any;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    allowInput: {
        type: BooleanConstructor;
    };
    isRangePicker: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
    };
}, unknown, unknown, {
    displayTimeList(): Array<InputTime | undefined> | Record<string, any>;
}, {
    onInput(e: Event, type: TimeInputType, index: number): void;
    onBlur(e: FocusEvent, trigger: TimeInputType, index: number, input: number): void;
    onFocus(e: FocusEvent, trigger: TimeInputType, index: number, input: number): void;
    onKeydown(e: any, type: TimeInputType, index: number): void;
    onToggleMeridiem(index: number): void;
    setInputValue(v: string | number, input: HTMLInputElement): void;
    switchRenderComponent(): any;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "blurDefault" | "focusDefault" | "toggleMeridiem")[], "change" | "blurDefault" | "focusDefault" | "toggleMeridiem", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    format: {
        type: StringConstructor;
        default: string;
    };
    dayjs: {
        type: (ObjectConstructor | ArrayConstructor)[];
        default: any;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    allowInput: {
        type: BooleanConstructor;
    };
    isRangePicker: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
    };
}>> & {
    onChange?: (...args: any[]) => any;
    onBlurDefault?: (...args: any[]) => any;
    onFocusDefault?: (...args: any[]) => any;
    onToggleMeridiem?: (...args: any[]) => any;
}, {
    disabled: boolean;
    placeholder: string;
    format: string;
    allowInput: boolean;
    dayjs: unknown[] | Record<string, any>;
    isRangePicker: boolean;
}>;
export default _default;
