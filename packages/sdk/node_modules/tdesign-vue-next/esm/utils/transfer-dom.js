/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { getAttach } from './dom.js';
import '../_chunks/dep-b66bfe36.js';
import 'lodash/isString';
import './easing.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function getShouldUpdate(node) {
  if (!node) {
    return false;
  }

  if (typeof node === "string" && node.indexOf("?") > 0) {
    try {
      var config = JSON.parse(node.split("?")[1]);
      return config.autoUpdate || false;
    } catch (e) {
      return false;
    }
  }

  return false;
}

var TransferDom = {
  mounted: function mounted(el, binding) {
    var value = binding.value;
    el.className = el.className ? "".concat(el.className, " v-transfer-dom") : "v-transfer-dom";
    var parentNode = el.parentNode;
    var home = document.createComment("");
    var hasMovedOut = false;
    var target = getAttach(value);

    if (value && target) {
      parentNode.replaceChild(home, el);
      target.appendChild(el);
      hasMovedOut = true;
    }

    if (!el.__transferDomData) {
      el.__transferDomData = {
        parentNode: parentNode,
        home: home,
        target: target,
        hasMovedOut: hasMovedOut
      };
    }
  },
  updated: function updated(el, binding) {
    var value = binding.value;
    var shouldUpdate = getShouldUpdate(value);

    if (!shouldUpdate) {
      return;
    }

    var ref$1 = el.__transferDomData;
    var parentNode = ref$1.parentNode,
        home = ref$1.home,
        hasMovedOut = ref$1.hasMovedOut;

    if (!hasMovedOut && value) {
      var _getAttach, _getAttach$appendChil;

      parentNode.replaceChild(home, el);
      (_getAttach = getAttach(value)) === null || _getAttach === void 0 ? void 0 : (_getAttach$appendChil = _getAttach.appendChild) === null || _getAttach$appendChil === void 0 ? void 0 : _getAttach$appendChil.call(_getAttach, el);
      el.__transferDomData = _objectSpread(_objectSpread({}, el.__transferDomData), {}, {
        hasMovedOut: true,
        target: getAttach(value)
      });
    } else if (hasMovedOut && !value) {
      parentNode.replaceChild(el, home);
      el.__transferDomData = _objectSpread(_objectSpread({}, el.__transferDomData), {}, {
        hasMovedOut: false,
        target: getAttach(value)
      });
    } else if (value) {
      var _getAttach2, _getAttach2$appendChi;

      (_getAttach2 = getAttach(value)) === null || _getAttach2 === void 0 ? void 0 : (_getAttach2$appendChi = _getAttach2.appendChild) === null || _getAttach2$appendChi === void 0 ? void 0 : _getAttach2$appendChi.call(_getAttach2, el);
    }
  },
  unmounted: function unbind(el) {
    el.className = el.className.replace("v-transfer-dom", "");

    if (el.__transferDomData && el.__transferDomData.hasMovedOut === true) {
      var _el$__transferDomData, _el$__transferDomData2;

      (_el$__transferDomData = el.__transferDomData.parentNode) === null || _el$__transferDomData === void 0 ? void 0 : (_el$__transferDomData2 = _el$__transferDomData.appendChild) === null || _el$__transferDomData2 === void 0 ? void 0 : _el$__transferDomData2.call(_el$__transferDomData, el);
    }

    el.__transferDomData = null;
  }
};

export { TransferDom as default };
//# sourceMappingURL=transfer-dom.js.map
