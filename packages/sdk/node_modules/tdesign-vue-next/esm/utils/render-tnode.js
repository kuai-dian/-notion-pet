/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import { isVNode, h } from 'vue';
import isEmpty from 'lodash/isEmpty';
import isString from 'lodash/isString';
import isFunction from 'lodash/isFunction';
import _isObject from 'lodash/isObject';

function getDefaultNode(options) {
  var defaultNode;

  if (_isObject(options) && "defaultNode" in options) {
    defaultNode = options.defaultNode;
  } else if (isVNode(options) || isString(options)) {
    defaultNode = options;
  }

  return defaultNode;
}
function getParams(options) {
  return _isObject(options) && "params" in options ? options.params : null;
}
var renderTNodeJSX = function renderTNodeJSX(instance, name, options) {
  var params = getParams(options);
  var defaultNode = getDefaultNode(options);
  var propsNode;

  if (name in instance) {
    propsNode = instance[name];
  }

  if (propsNode === false) return;

  if (instance.$slots[name]) {
    return instance.$slots[name](params);
  }

  if (isFunction(propsNode)) return propsNode(h, params);

  if (propsNode === true && defaultNode) {
    return instance.$slots[name] ? instance.$slots[name](params) : defaultNode;
  }

  return propsNode;
};
var renderTNodeJSXDefault = function renderTNodeJSXDefault(vm, name, options) {
  var defaultNode = getDefaultNode(options);
  return renderTNodeJSX(vm, name, options) || defaultNode;
};
var renderContent = function renderContent(vm, name1, name2, options) {
  var params = getParams(options);
  var defaultNode = getDefaultNode(options);
  var toParams = params ? {
    params: params
  } : void 0;
  var node1 = renderTNodeJSX(vm, name1, toParams);
  var node2 = renderTNodeJSX(vm, name2, toParams);
  var res = isEmpty(node1) ? node2 : node1;
  return isEmpty(res) ? defaultNode : res;
};

export { getDefaultNode, getParams, renderContent, renderTNodeJSX, renderTNodeJSXDefault };
//# sourceMappingURL=render-tnode.js.map
