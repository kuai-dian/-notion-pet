import { CalendarRange, YearMonthOption, ModeOption, CellColHeader, CellEventOption, TextConfigType, CalendarWeek, TdCalendarProps, ControllerOptions, CalendarCell } from './interface';
declare const _default: import("vue").DefineComponent<{
    cell: {
        type: import("vue").PropType<string | import("../common").TNode<CalendarCell>>;
    };
    cellAppend: {
        type: import("vue").PropType<string | import("../common").TNode<CalendarCell>>;
    };
    controllerConfig: {
        type: import("vue").PropType<boolean | import("./type").CalendarController>;
        default: any;
    };
    fillWithZero: {
        type: BooleanConstructor;
        default: any;
    };
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: number): boolean;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    head: {
        type: import("vue").PropType<string | import("../common").TNode<ControllerOptions>>;
    };
    isShowWeekendDefault: {
        type: BooleanConstructor;
        default: boolean;
    };
    mode: {
        type: import("vue").PropType<"month" | "year">;
        default: "month" | "year";
        validator(val: "month" | "year"): boolean;
    };
    preventCellContextmenu: BooleanConstructor;
    range: {
        type: import("vue").PropType<import("./type").CalendarValue[]>;
    };
    theme: {
        type: import("vue").PropType<"full" | "card">;
        default: "full" | "card";
        validator(val: "full" | "card"): boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").CalendarValue>;
    };
    week: {
        type: import("vue").PropType<string[] | import("../common").TNode<CalendarWeek>>;
    };
    onCellClick: import("vue").PropType<(options: {
        cell: CalendarCell;
        e: MouseEvent;
    }) => void>;
    onCellDoubleClick: import("vue").PropType<(options: {
        cell: CalendarCell;
        e: MouseEvent;
    }) => void>;
    onCellRightClick: import("vue").PropType<(options: {
        cell: CalendarCell;
        e: MouseEvent;
    }) => void>;
    onControllerChange: import("vue").PropType<(options: ControllerOptions) => void>;
    onMonthChange: import("vue").PropType<(options: {
        month: string;
        year: string;
    }) => void>;
}, unknown, {
    curDate: any;
    curSelectedYear: any;
    curSelectedMonth: any;
    curSelectedMode: any;
    isShowWeekend: boolean;
    controlSize: string;
}, {
    realFirstDayOfWeek(): number;
    TEXT_MAP(): TextConfigType;
    weekDipalyText(): TdCalendarProps['week'];
    calendarCls(): Record<string, any>;
    calendarPanelCls(): Record<string, any>;
    isWeekRender(): boolean;
    rangeFromTo(): CalendarRange;
    controllerOptions(): ControllerOptions;
    cellColHeaders(): CellColHeader[];
    yearSelectOptionList(): YearMonthOption[];
    monthSelectOptionList(): YearMonthOption[];
    modeSelectOptionList(): ModeOption[];
    monthCellsData(): CalendarCell[][];
    yearCellsData(): CalendarCell[][];
    controllerConfigData(): Record<string, any>;
    isControllerVisible(): boolean;
    weekendBtnText(): string;
    weekendBtnVBind(): object;
    currentBtnText(): string;
    currentBtnVBind(): object;
    isModeVisible(): boolean;
    isYearVisible(): boolean;
    isMonthVisible(): boolean;
    isWeekendToggleVisible(): boolean;
    isCurrentBtnVisible(): boolean;
    isModeDisabled(): boolean;
    isYearDisabled(): boolean;
    isMonthDisabled(): boolean;
    isWeekendToggleDisabled(): boolean;
    isCurrentBtnDisabled(): boolean;
    filterYearStr(): string;
    filterMonthStr(): string;
    filterYearMonth(): {
        month: string;
        year: string;
    };
}, {
    getCalendarWeekSlotData(item: CellColHeader): CalendarWeek;
    getWeekDisplay(weekNum: number): string;
    checkMonthCellItemShowed(cellData: CalendarCell): boolean;
    createCalendarCell(cellData: CalendarCell): CalendarCell;
    clickCell(e: MouseEvent, cellData: CalendarCell): void;
    doubleClickCell(e: MouseEvent, cellData: CalendarCell): void;
    rightClickCell(e: MouseEvent, cellData: CalendarCell): void;
    getCellClickEventOptions(e: MouseEvent, cellData: CalendarCell): CellEventOption;
    controllerChange(): void;
    onWeekendToggleClick(): void;
    checkMonthCellColHeaderVisibled(item: CellColHeader): boolean;
    checkControllerDisabled(name: string, propsName: string): boolean;
    checkControllerVisible(name: string): boolean;
    toCurrent(value?: TdCalendarProps['value']): void;
    checkMonthAndYearSelecterDisabled(year: number, month: number): boolean;
    renderControl(): JSX.Element;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("cell-click" | "cell-double-click" | "cell-right-click" | "controller-change")[], "cell-click" | "cell-double-click" | "cell-right-click" | "controller-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    cell: {
        type: import("vue").PropType<string | import("../common").TNode<CalendarCell>>;
    };
    cellAppend: {
        type: import("vue").PropType<string | import("../common").TNode<CalendarCell>>;
    };
    controllerConfig: {
        type: import("vue").PropType<boolean | import("./type").CalendarController>;
        default: any;
    };
    fillWithZero: {
        type: BooleanConstructor;
        default: any;
    };
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: number): boolean;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    head: {
        type: import("vue").PropType<string | import("../common").TNode<ControllerOptions>>;
    };
    isShowWeekendDefault: {
        type: BooleanConstructor;
        default: boolean;
    };
    mode: {
        type: import("vue").PropType<"month" | "year">;
        default: "month" | "year";
        validator(val: "month" | "year"): boolean;
    };
    preventCellContextmenu: BooleanConstructor;
    range: {
        type: import("vue").PropType<import("./type").CalendarValue[]>;
    };
    theme: {
        type: import("vue").PropType<"full" | "card">;
        default: "full" | "card";
        validator(val: "full" | "card"): boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").CalendarValue>;
    };
    week: {
        type: import("vue").PropType<string[] | import("../common").TNode<CalendarWeek>>;
    };
    onCellClick: import("vue").PropType<(options: {
        cell: CalendarCell;
        e: MouseEvent;
    }) => void>;
    onCellDoubleClick: import("vue").PropType<(options: {
        cell: CalendarCell;
        e: MouseEvent;
    }) => void>;
    onCellRightClick: import("vue").PropType<(options: {
        cell: CalendarCell;
        e: MouseEvent;
    }) => void>;
    onControllerChange: import("vue").PropType<(options: ControllerOptions) => void>;
    onMonthChange: import("vue").PropType<(options: {
        month: string;
        year: string;
    }) => void>;
}>> & {
    "onCell-click"?: (...args: any[]) => any;
    "onCell-double-click"?: (...args: any[]) => any;
    "onCell-right-click"?: (...args: any[]) => any;
    "onController-change"?: (...args: any[]) => any;
}, {
    mode: "month" | "year";
    format: string;
    theme: "full" | "card";
    controllerConfig: any;
    fillWithZero: boolean;
    isShowWeekendDefault: boolean;
    preventCellContextmenu: boolean;
}>;
export default _default;
