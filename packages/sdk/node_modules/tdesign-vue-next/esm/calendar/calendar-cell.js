/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, createVNode } from 'vue';
import dayjs from 'dayjs';
import { prefix } from '../config.js';
import { emitEvent } from '../utils/event.js';
import { COMPONENT_NAME } from './const.js';
import { renderTNodeJSX, renderTNodeJSXDefault } from '../utils/render-tnode.js';
import '../utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isFunction';
import 'lodash/isObject';

var clickTypeEmitEventMap = {
  click: "click",
  dblclick: "dblclick",
  contextmenu: "rightclick"
};
var CalendarCellItem = defineComponent({
  name: "".concat(COMPONENT_NAME, "-cell"),
  inheritAttrs: false,
  props: {
    item: {
      type: Object,
      "default": function _default() {
        return null;
      }
    },
    fillWithZero: {
      type: Boolean,
      "default": void 0
    },
    theme: {
      type: String,
      "default": function _default() {
        return null;
      }
    },
    t: Function,
    global: Object,
    cell: Function
  },
  emits: ["click", "dblclick", "rightclick"],
  computed: {
    allowSlot: function allowSlot() {
      return this.theme === "full";
    },
    disabled: function disabled() {
      return this.item.mode === "month" && this.item.belongTo !== 0;
    },
    valueDisplay: function valueDisplay() {
      if (this.item.mode === "month") {
        var _ref, _this$fillWithZero;

        var dateNum = this.item.date.getDate();
        var fillZero = dateNum < 10 && ((_ref = (_this$fillWithZero = this.fillWithZero) !== null && _this$fillWithZero !== void 0 ? _this$fillWithZero : this.global.fillWithZero) !== null && _ref !== void 0 ? _ref : true);
        return fillZero ? "0".concat(dateNum) : dateNum;
      }

      var map = this.t(this.global.cellMonth).split(",");
      return map[this.item.date.getMonth().toString()];
    },
    cellCls: function cellCls() {
      var _ref2;

      var _this$item = this.item,
          mode = _this$item.mode,
          date = _this$item.date,
          formattedDate = _this$item.formattedDate,
          isCurrent = _this$item.isCurrent;
      var isNow = mode === "year" ? new Date().getMonth() === date.getMonth() : formattedDate === dayjs().format("YYYY-MM-DD");
      return ["".concat(prefix, "-calendar__table-body-cell"), (_ref2 = {}, _defineProperty(_ref2, "".concat(prefix, "-is-disabled"), this.disabled), _defineProperty(_ref2, "".concat(prefix, "-is-checked"), isCurrent), _defineProperty(_ref2, "".concat(COMPONENT_NAME, "__table-body-cell--now"), isNow), _ref2)];
    }
  },
  methods: {
    clickCell: function clickCell(e) {
      if (this.disabled) return;
      emitEvent(this, clickTypeEmitEventMap[e.type], e);
    }
  },
  render: function render() {
    var _this = this;

    var item = this.item,
        cellCls = this.cellCls,
        clickCell = this.clickCell,
        valueDisplay = this.valueDisplay,
        allowSlot = this.allowSlot;

    var defaultNode = function defaultNode() {
      return createVNode("span", null, [createVNode("div", {
        "class": "".concat(prefix, "-calendar__table-body-cell-display")
      }, [valueDisplay]), createVNode("div", {
        "class": "".concat(prefix, "-calendar__table-body-cell-content")
      }, [allowSlot && renderTNodeJSX(_this, "cellAppend", {
        params: item
      })])]);
    };

    return item && createVNode("div", {
      "class": cellCls,
      "onClick": clickCell,
      "ondblclick": clickCell,
      "oncontextmenu": clickCell
    }, [typeof this.cell === "function" ? this.cell(item) : renderTNodeJSXDefault(this, "cell", {
      defaultNode: defaultNode(),
      params: item
    })]);
  }
});

export { CalendarCellItem as default };
//# sourceMappingURL=calendar-cell.js.map
