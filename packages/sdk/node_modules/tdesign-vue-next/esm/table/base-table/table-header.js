/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import { defineComponent, createVNode, resolveComponent } from 'vue';
import TableCell from './table-cell.js';
import baseTableProps from '../base-table-props.js';
import { prefix } from '../../config.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/defineProperty';
import '../../popup/index.js';
import '../../popup/popup.js';
import '@babel/runtime/helpers/typeof';
import '@popperjs/core';
import '../../_chunks/dep-b66bfe36.js';
import '../../utils/classnames.js';
import '../../utils/dom.js';
import 'lodash/isString';
import '../../utils/easing.js';
import '../../popup/props.js';
import '../../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isFunction';
import 'lodash/isObject';
import '../../utils/set-style.js';
import '../../utils/event.js';
import '../../utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';
import '../../utils/map-props.js';
import 'lodash/kebabCase';
import '../../utils/withInstall.js';
import '../../popup/style';
import '../../popup/type.js';
import '../util/common.js';

var TableHeader = defineComponent({
  name: "".concat(prefix, "-table-header"),
  components: {
    TableCell: TableCell
  },
  props: {
    columns: baseTableProps.columns,
    bordered: baseTableProps.bordered
  },
  data: function data() {
    return {
      cacheRowMaxRowspan: []
    };
  },
  methods: {
    renderHeader: function renderHeader() {
      var _this = this;

      var bordered = this.bordered,
          cacheRowMaxRowspan = this.cacheRowMaxRowspan;
      var trPropsList = [];
      this.renderTr(this.columns, 0, trPropsList, true);
      return trPropsList.map(function (thPropsList, rowindex) {
        var currentRowMaxRowspan = cacheRowMaxRowspan[rowindex] || 1;
        return createVNode("tr", null, [thPropsList.map(function (_ref) {
          var column = _ref.column,
              rowspan = _ref.rowspan,
              colspan = _ref.colspan,
              index = _ref.index,
              hasChildren = _ref.hasChildren,
              isFirstColumn = _ref.isFirstColumn;
          var withBorder = bordered && index === 0 && !isFirstColumn;
          return _this.renderCell(column, hasChildren ? rowspan : currentRowMaxRowspan, colspan, index, withBorder);
        })]);
      });
    },
    renderTr: function renderTr(columns, currentRowIndex, trPropsList, isParentFirstColumn) {
      var _this2 = this,
          _trPropsList$currentR;

      var cacheRowMaxRowspan = this.cacheRowMaxRowspan;
      var currentRowThProps = [];

      if (typeof trPropsList[currentRowIndex] === "undefined") {
        trPropsList[currentRowIndex] = [];
      }

      if (typeof cacheRowMaxRowspan[currentRowIndex] === "undefined") {
        cacheRowMaxRowspan[currentRowIndex] = 1;
      }

      var colspan = 0;
      var rowspan = 1;
      columns.forEach(function (column, index) {
        var children = column.children;

        if (children !== null && children !== void 0 && children.length) {
          var isFirstColumn = isParentFirstColumn && index === 0;

          var _this2$renderTr = _this2.renderTr(children, currentRowIndex + 1, trPropsList, isFirstColumn),
              occupiedCol = _this2$renderTr.colspan,
              occupiedRow = _this2$renderTr.rowspan;

          colspan += occupiedCol;
          rowspan += occupiedRow;
          cacheRowMaxRowspan[currentRowIndex] = Math.max(rowspan, cacheRowMaxRowspan[currentRowIndex]);
          currentRowThProps[index] = {
            rowspan: 1,
            colspan: occupiedCol,
            column: column,
            index: index,
            hasChildren: true,
            isFirstColumn: index === 0 && isParentFirstColumn
          };
        }
      });
      columns.forEach(function (column, index) {
        var children = column.children;

        if (!children || (children === null || children === void 0 ? void 0 : children.length) === 0) {
          currentRowThProps[index] = {
            rowspan: rowspan,
            colspan: 1,
            column: column,
            index: index,
            hasChildren: false,
            isFirstColumn: index === 0 && isParentFirstColumn
          };
          colspan += 1;
        }
      });

      (_trPropsList$currentR = trPropsList[currentRowIndex]).push.apply(_trPropsList$currentR, currentRowThProps);

      return {
        colspan: colspan,
        rowspan: rowspan
      };
    },
    renderCell: function renderCell(column, rowspan, colspan, index, withBorder) {
      var _this3 = this;

      var title = column.title,
          render = column.render;
      var customData = {
        type: "title",
        func: "title"
      };
      var customRender;

      if (typeof title === "string") {
        var _this$$slots;

        if (typeof ((_this$$slots = this.$slots) === null || _this$$slots === void 0 ? void 0 : _this$$slots[title]) === "function") {
          customRender = function customRender(params) {
            return _this3.$slots[title](params);
          };
        } else {
          customRender = function customRender() {
            return title;
          };
        }
      } else if (typeof title === "function") {
        customRender = function customRender(h, params) {
          return title(h, {
            colIndex: params.colIndex,
            col: params.col
          });
        };
      } else if (typeof render === "function") {
        customRender = render;
        customData.func = "render";
      } else {
        customRender = function customRender() {
          return "";
        };
      }

      var cellData = {
        col: column,
        colIndex: index,
        customData: customData,
        customRender: customRender,
        type: "th",
        withBorder: withBorder
      };
      return createVNode(resolveComponent("table-cell"), {
        "cellData": cellData,
        "colspan": colspan,
        "rowspan": rowspan
      }, null);
    }
  },
  render: function render() {
    return createVNode("thead", null, [this.renderHeader()]);
  }
});

export { TableHeader as default };
//# sourceMappingURL=table-header.js.map
