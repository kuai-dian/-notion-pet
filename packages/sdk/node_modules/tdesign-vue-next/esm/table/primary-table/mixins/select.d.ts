import { VNode } from 'vue';
import { PrimaryTableCol } from '../../type';
declare const _default: import("vue").DefineComponent<{
    columns: {
        type: import("vue").PropType<PrimaryTableCol<import("../../type").TableRowData>[]>;
        default: () => PrimaryTableCol<import("../../type").TableRowData>[];
    };
    data: {
        type: import("vue").PropType<import("../../type").TableRowData[]>;
        default: () => import("../../type").TableRowData[];
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    selectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
}, unknown, unknown, {
    reRowKey(): string;
    selectColumn(): any;
    canSelectedRows(): Array<Record<string, any>>;
    isSelectedAll(): boolean;
    isSelectedSome(): boolean;
}, {
    isDisabled(row: Record<string, any>, rowIndex: number): boolean;
    getSelectColumns(columns: Array<PrimaryTableCol>): Array<PrimaryTableCol>;
    getSelectedHeader(): () => JSX.Element;
    renderSelectCell({ column, row, rowIndex }: Record<string, any>): VNode;
    handleSelectChange(record?: Record<string, any>): void;
    handleSelectAll(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "select-change"[], "select-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    columns: {
        type: import("vue").PropType<PrimaryTableCol<import("../../type").TableRowData>[]>;
        default: () => PrimaryTableCol<import("../../type").TableRowData>[];
    };
    data: {
        type: import("vue").PropType<import("../../type").TableRowData[]>;
        default: () => import("../../type").TableRowData[];
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    selectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
}>> & {
    "onSelect-change"?: (...args: any[]) => any;
}, {
    data: import("../../type").TableRowData[];
    columns: PrimaryTableCol<import("../../type").TableRowData>[];
    rowKey: string;
}>;
export default _default;
