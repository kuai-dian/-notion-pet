import { PropType } from 'vue';
import { TdPrimaryTableProps, TableRowData, TableTreeConfig } from '../type';
import { PrimaryTableCol } from '..';
import TableTreeStore, { KeysType } from './tree-store';
export declare const childreMap: Map<any, any>;
export interface GetChildrenDataReturnValue {
    allChildren: Array<any>;
    allChildrenKeys: Array<string | number>;
}
export declare function getChildrenData(treeDataMap: InstanceType<typeof TableTreeStore>['treeDataMap'], data: TableRowData, childrenKey: string, rowKey: string, r?: GetChildrenDataReturnValue): GetChildrenDataReturnValue;
export interface RemoveParams {
    selectedRowKeys: Array<string | number>;
    removeKeys: Array<string | number>;
}
export interface RemainData {
    data: Array<any>;
    keys: Array<string | number>;
}
export declare function removeChildrenKeys(p: RemoveParams, r?: RemainData): RemainData;
export interface GetKeyDataParams {
    treeDataMap: InstanceType<typeof TableTreeStore>['treeDataMap'];
    data: Array<any>;
    column: PrimaryTableCol;
    keys: KeysType;
}
export interface GetRowDataParams {
    treeDataMap: InstanceType<typeof TableTreeStore>['treeDataMap'];
    selectedRowKeys: Array<string | number>;
}
export declare function getRowDataByKeys(p: GetRowDataParams): import("..").TableRowState<TableRowData>[];
declare type SelectChangeParams = Parameters<TdPrimaryTableProps['onSelectChange']>;
declare const _default: import("vue").DefineComponent<{
    data: {
        type: PropType<TableRowData[]>;
        default: () => TableRowData[];
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    columns: {
        type: PropType<PrimaryTableCol<TableRowData>[]>;
        default: () => PrimaryTableCol<TableRowData>[];
    };
    tree: {
        type: PropType<TableTreeConfig>;
    };
}, unknown, {
    dataSource: TableRowData[];
    store: TableTreeStore<TableRowData>;
}, {
    childrenKey(): string;
    rowDataKeys(): KeysType;
}, {
    onInnerSelectChange(rowKeys: SelectChangeParams[0], extraData: SelectChangeParams[1]): void;
    handleSelectAll(extraData: SelectChangeParams[1]): void;
    handleSelect(rowKeys: SelectChangeParams[0], extraData: SelectChangeParams[1]): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:selectedRowKeys"[], "update:selectedRowKeys", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    data: {
        type: PropType<TableRowData[]>;
        default: () => TableRowData[];
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    columns: {
        type: PropType<PrimaryTableCol<TableRowData>[]>;
        default: () => PrimaryTableCol<TableRowData>[];
    };
    tree: {
        type: PropType<TableTreeConfig>;
    };
}>> & {
    "onUpdate:selectedRowKeys"?: (...args: any[]) => any;
}, {
    data: TableRowData[];
    columns: PrimaryTableCol<TableRowData>[];
    rowKey: string;
}>;
export default _default;
