import { InfoCircleFilledIcon } from 'tdesign-icons-vue-next';
import { PopupProps } from '../popup/index';
import { PopconfirmVisibleChangeContext } from './type';
declare type IconConstructor = typeof InfoCircleFilledIcon;
declare const _default: import("vue").DefineComponent<{
    cancelBtn: {
        type: import("vue").PropType<string | import("../common").TNode<any> | import("..").TdButtonProps>;
        default: string;
    };
    confirmBtn: {
        type: import("vue").PropType<string | import("../common").TNode<any> | import("..").TdButtonProps>;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    default: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    destroyOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    placement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
        default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        validator(val: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
    };
    popupProps: {
        type: import("vue").PropType<import("../popup/type").TdPopupProps>;
    };
    showArrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "danger" | "warning">;
        default: "default" | "danger" | "warning";
        validator(val: "default" | "danger" | "warning"): boolean;
    };
    triggerElement: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    visible: BooleanConstructor;
    defaultVisible: BooleanConstructor;
    onCancel: import("vue").PropType<(options: {
        e: MouseEvent;
    }) => void>;
    onConfirm: import("vue").PropType<(options: {
        e: MouseEvent;
    }) => void>;
    onVisibleChange: import("vue").PropType<(visible: boolean, context?: PopconfirmVisibleChangeContext) => void>;
}, unknown, {
    name: string;
    popupName: string;
}, {
    themeIcon(): IconConstructor;
    iconCls(): string;
    innerPopupProps(): PopupProps;
}, {
    cancelBtnAction(e: MouseEvent): void;
    confirmBtnAction(e: MouseEvent): void;
    renderIcon(): any;
    onPopupVisibleChange(val: boolean, context: PopconfirmVisibleChangeContext): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("cancel" | "close" | "visible-change" | "confirm")[], "cancel" | "close" | "confirm" | "visible-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    cancelBtn: {
        type: import("vue").PropType<string | import("../common").TNode<any> | import("..").TdButtonProps>;
        default: string;
    };
    confirmBtn: {
        type: import("vue").PropType<string | import("../common").TNode<any> | import("..").TdButtonProps>;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    default: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    destroyOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    placement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
        default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        validator(val: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
    };
    popupProps: {
        type: import("vue").PropType<import("../popup/type").TdPopupProps>;
    };
    showArrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "danger" | "warning">;
        default: "default" | "danger" | "warning";
        validator(val: "default" | "danger" | "warning"): boolean;
    };
    triggerElement: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    visible: BooleanConstructor;
    defaultVisible: BooleanConstructor;
    onCancel: import("vue").PropType<(options: {
        e: MouseEvent;
    }) => void>;
    onConfirm: import("vue").PropType<(options: {
        e: MouseEvent;
    }) => void>;
    onVisibleChange: import("vue").PropType<(visible: boolean, context?: PopconfirmVisibleChangeContext) => void>;
}>> & {
    "onVisible-change"?: (...args: any[]) => any;
    onClose?: (...args: any[]) => any;
    onConfirm?: (...args: any[]) => any;
    onCancel?: (...args: any[]) => any;
}, {
    visible: boolean;
    theme: "default" | "danger" | "warning";
    placement: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
    destroyOnClose: boolean;
    showArrow: boolean;
    defaultVisible: boolean;
    confirmBtn: string;
    cancelBtn: string;
}>;
export default _default;
