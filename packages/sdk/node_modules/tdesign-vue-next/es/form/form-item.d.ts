import { VNode } from 'vue';
import { Data, FormRule, TdFormItemProps, TdFormProps, ValueType, ValidateTriggerType, AllValidateResult } from './type';
import { ClassName, ScopedSlot, TNodeReturnValue, Styles } from '../common';
export declare type FormItemValidateResult<T extends Data = Data> = {
    [key in keyof T]: boolean | AllValidateResult[];
};
export declare const enum ValidateStatus {
    TO_BE_VALIDATED = "not",
    SUCCESS = "success",
    FAIL = "fail"
}
declare const _default: import("vue").DefineComponent<{
    for: {
        type: StringConstructor;
        default: string;
    };
    help: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
        default: string;
    };
    labelAlign: {
        type: import("vue").PropType<"left" | "top" | "right">;
        validator(val: "left" | "top" | "right"): boolean;
    };
    labelWidth: {
        type: import("vue").PropType<string | number>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: any;
    };
    rules: {
        type: import("vue").PropType<FormRule[]>;
        default: () => FormRule[];
    };
    statusIcon: {
        type: import("vue").PropType<boolean | import("../common").TNode<any>>;
        default: any;
    };
    successBorder: BooleanConstructor;
}, unknown, {
    errorList: any[];
    successList: any[];
    verifyStatus: ValidateStatus;
    resetValidating: boolean;
    needResetField: boolean;
    initialValue: any;
}, {
    classes(): ClassName;
    labelClasses(): (string | {
        [x: string]: any;
    })[];
    errorClasses(): string;
    contentClasses(): string[];
    contentStyle(): Styles;
    value(): ValueType;
    hasColon(): boolean;
    needRequiredMark(): boolean;
    innerRules(): FormRule[];
}, {
    validate<T>(trigger: ValidateTriggerType): Promise<FormItemValidateResult<T>>;
    getLabelContent(): TNodeReturnValue;
    getLabel(): TNodeReturnValue;
    renderTipsInfo(): VNode;
    getDefaultIcon(): TNodeReturnValue;
    getIcon(statusIcon: TdFormProps['statusIcon'] | TdFormItemProps['statusIcon'], slotStatusIcon: ScopedSlot): TNodeReturnValue;
    getSuffixIcon(): TNodeReturnValue;
    getEmptyValue(): ValueType;
    resetField(): void;
    resetHandler(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    for: {
        type: StringConstructor;
        default: string;
    };
    help: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
        default: string;
    };
    labelAlign: {
        type: import("vue").PropType<"left" | "top" | "right">;
        validator(val: "left" | "top" | "right"): boolean;
    };
    labelWidth: {
        type: import("vue").PropType<string | number>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: any;
    };
    rules: {
        type: import("vue").PropType<FormRule[]>;
        default: () => FormRule[];
    };
    statusIcon: {
        type: import("vue").PropType<boolean | import("../common").TNode<any>>;
        default: any;
    };
    successBorder: BooleanConstructor;
}>>, {
    name: string;
    label: string | import("../common").TNode<any>;
    help: string;
    for: string;
    rules: FormRule[];
    statusIcon: boolean | import("../common").TNode<any>;
    requiredMark: boolean;
    successBorder: boolean;
}>;
export default _default;
