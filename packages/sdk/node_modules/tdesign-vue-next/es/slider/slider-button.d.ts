declare const _default: import("vue").DefineComponent<{
    value: {
        type: NumberConstructor[];
        default: number;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    popupClass: {
        type: StringConstructor;
        default: string;
    };
    tooltipProps: {
        type: (ObjectConstructor | BooleanConstructor)[];
        default: boolean;
    };
}, unknown, {
    hovering: boolean;
    dragging: boolean;
    isClick: boolean;
    startX: number;
    startY: number;
    currentX: number;
    currentY: number;
    startPos: number;
    newPos: any;
    prevValue: number;
    showTooltip: boolean;
    trigger: string;
    showArrow: boolean;
    overlayStyle: any;
    overlayClassName: any;
    attach: string;
    popupVisible: boolean;
}, {
    placement(): any;
    rangeDiff(): number;
    formatValue(): any;
    disabled(): any;
    max(): any;
    min(): any;
    step(): any;
    precision(): any;
    currentPos(): string;
    enableFormat(): boolean;
    wrapperStyle(): {
        bottom: string;
        left?: undefined;
    } | {
        left: string;
        bottom?: undefined;
    };
}, {
    setTooltipProps(): void;
    showPopup(): void;
    hidePopup(): void;
    handleMouseEnter(): void;
    handleMouseLeave(): void;
    onButtonDown(event: MouseEvent | TouchEvent): void;
    onNativeKeyDown(e: KeyboardEvent): void;
    onKeyDown(state: 'sub' | 'add'): void;
    onDragStart(event: MouseEvent | TouchEvent): void;
    onDragging(e: MouseEvent | TouchEvent): void;
    onDragEnd(): void;
    setPosition(pos: number): void;
    empty(str: undefined | null | string): boolean;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "input"[], "input", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    value: {
        type: NumberConstructor[];
        default: number;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    popupClass: {
        type: StringConstructor;
        default: string;
    };
    tooltipProps: {
        type: (ObjectConstructor | BooleanConstructor)[];
        default: boolean;
    };
}>> & {
    onInput?: (...args: any[]) => any;
}, {
    value: number;
    vertical: boolean;
    popupClass: string;
    tooltipProps: boolean | Record<string, any>;
}>;
export default _default;
