/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, createVNode, mergeProps } from 'vue';
import isFunction from 'lodash/isFunction';
import { CloseCircleFilledIcon } from 'tdesign-icons-vue-next';
import { prefix } from '../../config.js';
import ClASSNAMES from '../../utils/classnames.js';
import getConfigReceiverMixins from '../../config-provider/config-receiver.js';
import mixins from '../../utils/mixins.js';
import { renderTNodeJSX } from '../../utils/render-tnode.js';
import { Tag } from '../../tag/index.js';
import { Loading } from '../../loading/index.js';
import { Input } from '../../input/index.js';
import FakeArrow from '../../common-components/fake-arrow.js';
import { getCloseIconClass, getFakeArrowIconClass, getCascaderInnerClasses, getCloseShow, getSingleContent, getMultipleContent, getPlaceholderShow, outerClickListenerEffect, handleRemoveTagEffect, closeIconClickEffect, innerContentClickEffect } from '../utils/inputContent.js';
import { getFullPathLabel } from '../utils/helper.js';
import props from '../props.js';
import '../../config-provider/zh_CN_config.js';
import '../../config-provider/type.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';
import '../../tag/tag.js';
import '../../tag/props.js';
import '../../utils/event.js';
import '../../utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';
import '../../tag/check-tag.js';
import '../../tag/check-tag-props.js';
import '../../utils/map-props.js';
import 'lodash/kebabCase';
import '../../utils/withInstall.js';
import './style/css.js';
import '../../tag/type.js';
import '../../loading/loading.js';
import '../../loading/icon/gradient.js';
import '../../_common/js/loading/circle-adapter.js';
import '../../_common/js/utils/set-style.js';
import '../../_common/js/utils/helper.js';
import '../../utils/dom.js';
import '../../_chunks/dep-b66bfe36.js';
import '../../utils/easing.js';
import '../../utils/transfer-dom.js';
import '../../loading/props.js';
import '../../loading/type.js';
import '../../loading/plugin.js';
import '../../input/addon.js';
import '../../input/input.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/typeof';
import '../../input/props.js';
import '../../input/input-group.js';
import '../../input/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(prefix, "-cascader");
var InputContent = defineComponent(_objectSpread(_objectSpread({}, mixins(getConfigReceiverMixins("cascader"))), {}, {
  name: "".concat(name, "-input-content"),
  components: {
    Tag: Tag,
    Input: Input,
    CloseCircleFilledIcon: CloseCircleFilledIcon
  },
  props: {
    cascaderContext: {
      type: Object
    },
    placeholder: props.placeholder,
    listeners: {
      type: Object
    },
    collapsedItems: props.collapsedItems
  },
  emits: ["change"],
  data: function data() {
    return {
      isHover: false
    };
  },
  computed: {
    closeIconClass: function closeIconClass() {
      return getCloseIconClass(prefix, ClASSNAMES, this.cascaderContext);
    },
    fakeArrowIconClass: function fakeArrowIconClass() {
      return getFakeArrowIconClass(prefix, ClASSNAMES, this.cascaderContext);
    },
    cascaderInnerClasses: function cascaderInnerClasses() {
      return getCascaderInnerClasses(prefix, ClASSNAMES, this.cascaderContext);
    },
    closeShow: function closeShow() {
      return getCloseShow(this.isHover, this.cascaderContext);
    },
    singleContent: function singleContent() {
      return getSingleContent(this.cascaderContext);
    },
    multipleContent: function multipleContent() {
      return getMultipleContent(this.cascaderContext);
    },
    showPlaceholder: function showPlaceholder() {
      return getPlaceholderShow(this.cascaderContext, this.singleContent, this.multipleContent);
    }
  },
  mounted: function mounted() {
    var _this = this;

    document.addEventListener("click", function (event) {
      _this.outerClickListenerFn(event);
    });
    setTimeout(function () {
      _this.getInputWidth();
    }, 0);
  },
  unmounted: function unmounted() {
    var _this2 = this;

    document.removeEventListener("click", function (event) {
      _this2.outerClickListenerFn(event);
    });
  },
  methods: {
    getInputWidth: function getInputWidth() {
      var _this$$refs$inputCont = this.$refs.inputContent.getBoundingClientRect(),
          width = _this$$refs$inputCont.width;

      var setInputWidth = this.cascaderContext.setInputWidth;
      setInputWidth(width);
    },
    outerClickListenerFn: function outerClickListenerFn(event) {
      return outerClickListenerEffect(this.$refs.inputContent, this.cascaderContext, event);
    },
    renderContent: function renderContent() {
      var placeholder = this.placeholder,
          showPlaceholder = this.showPlaceholder;
      var content = !showPlaceholder ? this.InnerContent() : createVNode("span", {
        "class": "".concat(prefix, "-cascader__placeholder")
      }, [placeholder || this.t(this.global.placeholder)]);
      return content;
    },
    InnerContent: function InnerContent() {
      var _this3 = this;

      var cascaderContext = this.cascaderContext,
          placeholder = this.placeholder,
          singleContent = this.singleContent,
          multipleContent = this.multipleContent,
          listeners = this.listeners,
          collapsedItems = this.collapsedItems;
      var multiple = cascaderContext.multiple,
          size = cascaderContext.size,
          disabled = cascaderContext.disabled,
          filterable = cascaderContext.filterable,
          setFilterActive = cascaderContext.setFilterActive,
          visible = cascaderContext.visible,
          inputVal = cascaderContext.inputVal,
          setInputVal = cascaderContext.setInputVal,
          minCollapsedNum = cascaderContext.minCollapsedNum,
          value = cascaderContext.value,
          showAllLevels = cascaderContext.showAllLevels;
      var _onFocus = listeners.onFocus,
          _onBlur = listeners.onBlur,
          onRemove = listeners.onRemove;

      var renderSelfTag = function renderSelfTag(node, index) {
        return createVNode(Tag, {
          "closable": !disabled,
          "key": index,
          "disabled": disabled,
          "onClose": function onClose(ctx) {
            ctx.e.stopPropagation();
            handleRemoveTagEffect(cascaderContext, node, onRemove);
          },
          "size": size
        }, {
          "default": function _default() {
            return [showAllLevels ? getFullPathLabel(node) : node.label];
          }
        });
      };

      var renderCollItems = function renderCollItems() {
        var tempList = [];
        multipleContent.forEach(function (node) {
          tempList.push(node.data);
        });
        return tempList;
      };

      var generalContent = !multiple ? createVNode("span", {
        "class": "".concat(prefix, "-cascader__content")
      }, [singleContent]) : createVNode("span", null, [minCollapsedNum > 0 && multipleContent.length > minCollapsedNum ? createVNode("span", null, [multipleContent.slice(0, minCollapsedNum).map(function (node, index) {
        return renderSelfTag(node, index);
      }), collapsedItems || this.$slots.collapsedItems ? renderTNodeJSX(this, "collapsedItems", {
        params: {
          value: renderCollItems(),
          collapsedSelectedItems: renderCollItems().slice(minCollapsedNum),
          count: renderCollItems().length - minCollapsedNum
        }
      }) : createVNode(Tag, {
        "size": size,
        "disabled": disabled
      }, {
        "default": function _default() {
          return ["+", multipleContent.length - minCollapsedNum];
        }
      })]) : multipleContent.map(function (node, index) {
        return renderSelfTag(node, index);
      })]);
      var inputPlaceholder = multiple ? multipleContent.map(function (node) {
        return node.label;
      }).join("\u3001") : singleContent;

      var filterContent = function filterContent() {
        return createVNode(Input, {
          "size": size,
          "placeholder": inputPlaceholder || placeholder || _this3.t(_this3.locale.placeholderText),
          "value": inputVal,
          "onChange": function onChange(value2) {
            setInputVal(value2);
            setFilterActive(!!value2);
          },
          "onFocus": function onFocus(v, context) {
            return isFunction(_onFocus) && _onFocus({
              value: value,
              e: context === null || context === void 0 ? void 0 : context.e
            });
          },
          "onBlur": function onBlur(v, context) {
            return isFunction(_onBlur) && _onBlur({
              value: value,
              e: context === null || context === void 0 ? void 0 : context.e
            });
          },
          "autofocus": visible
        }, null);
      };

      return filterable && visible ? filterContent() : generalContent;
    },
    renderSuffixIcon: function renderSuffixIcon() {
      var _this4 = this;

      var closeShow = this.closeShow,
          closeIconClass = this.closeIconClass,
          fakeArrowIconClass = this.fakeArrowIconClass,
          _this$cascaderContext = this.cascaderContext,
          size = _this$cascaderContext.size,
          visible = _this$cascaderContext.visible,
          disabled = _this$cascaderContext.disabled,
          loading = _this$cascaderContext.loading;

      var closeIconClick = function closeIconClick(context) {
        context.e.stopPropagation();
        closeIconClickEffect(_this4.cascaderContext);
      };

      if (loading) {
        return createVNode("span", {
          "class": "".concat(prefix, "-cascader__icon")
        }, [createVNode(Loading, {
          "size": "small"
        }, null)]);
      }

      if (closeShow) {
        return createVNode(CloseCircleFilledIcon, {
          "class": closeIconClass,
          "size": size,
          "onClick": closeIconClick
        }, null);
      }

      return createVNode(FakeArrow, {
        "overlayClassName": fakeArrowIconClass,
        "isActive": visible,
        "disabled": disabled
      }, null);
    }
  },
  render: function render() {
    var _this5 = this;

    var $attrs = this.$attrs,
        cascaderContext = this.cascaderContext;
    return createVNode("div", mergeProps({
      "ref": "inputContent",
      "class": this.cascaderInnerClasses
    }, $attrs, {
      "onMouseenter": function onMouseenter() {
        _this5.isHover = true;
      },
      "onMouseleave": function onMouseleave() {
        _this5.isHover = false;
      },
      "onClick": function onClick(e) {
        e.preventDefault();
        innerContentClickEffect(cascaderContext);
      }
    }), [this.renderContent(), this.renderSuffixIcon()]);
  }
}));

export { InputContent as default };
//# sourceMappingURL=InputContent.js.map
