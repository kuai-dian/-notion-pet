import { PropType } from 'vue';
import { TreeNode, CascaderContextType } from '../interface';
declare const _default: import("vue").DefineComponent<{
    empty: {
        type: PropType<string | import("../../common").TNode<any>>;
    };
    trigger: {
        type: PropType<"click" | "hover">;
        default: "click" | "hover";
        validator(val: "click" | "hover"): boolean;
    };
    onChange: PropType<(value: import("../type").CascaderValue<import("../../common").TreeOptionData>, context: import("../type").CascaderChangeContext<import("../../common").TreeOptionData>) => void>;
    cascaderContext: {
        type: PropType<CascaderContextType>;
    };
}, unknown, unknown, {
    panels(): TreeNode[][];
}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "change"[], "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    empty: {
        type: PropType<string | import("../../common").TNode<any>>;
    };
    trigger: {
        type: PropType<"click" | "hover">;
        default: "click" | "hover";
        validator(val: "click" | "hover"): boolean;
    };
    onChange: PropType<(value: import("../type").CascaderValue<import("../../common").TreeOptionData>, context: import("../type").CascaderChangeContext<import("../../common").TreeOptionData>) => void>;
    cascaderContext: {
        type: PropType<CascaderContextType>;
    };
}>> & {
    onChange?: (...args: any[]) => any;
}, {
    trigger: "click" | "hover";
}>;
export default _default;
