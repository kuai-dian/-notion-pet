/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import { defineComponent, createVNode } from 'vue';
import { prefix } from '../config.js';
import props from './props.js';
import { renderTNodeJSX } from '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isFunction';
import 'lodash/isObject';

var preName = "".concat(prefix, "-comment");
var _Comment = defineComponent({
  name: "TComment",
  props: props,
  methods: {
    renderReply: function renderReply() {
      var reply = renderTNodeJSX(this, "reply");
      return reply ? createVNode("div", {
        "class": "".concat(preName, "__reply")
      }, [reply]) : null;
    },
    renderActions: function renderActions() {
      var actions = renderTNodeJSX(this, "actions");
      return actions && actions.length ? createVNode("ul", {
        "class": "".concat(preName, "__actions")
      }, [actions.map(function (action, index) {
        return createVNode("li", {
          "key": "action-".concat(index)
        }, [action]);
      })]) : null;
    },
    renderQuote: function renderQuote() {
      var quote = renderTNodeJSX(this, "quote");
      return quote ? createVNode("div", {
        "class": "".concat(preName, "__quote")
      }, [quote]) : null;
    },
    renderAuthorDatetime: function renderAuthorDatetime() {
      var author = renderTNodeJSX(this, "author");
      var datetime = renderTNodeJSX(this, "datetime");
      return (author || datetime) && createVNode("div", {
        "class": "".concat(preName, "__author")
      }, [author && createVNode("span", {
        "class": "".concat(preName, "__name")
      }, [author]), datetime && createVNode("span", {
        "class": "".concat(preName, "__time")
      }, [datetime])]);
    },
    renderContent: function renderContent() {
      return createVNode("div", {
        "class": "".concat(preName, "__content")
      }, [this.renderAuthorDatetime(), createVNode("div", {
        "class": "".concat(preName, "__detail")
      }, [renderTNodeJSX(this, "content")]), this.renderQuote(), this.renderActions()]);
    },
    renderAvatar: function renderAvatar() {
      var avatar = renderTNodeJSX(this, "avatar");
      return avatar ? createVNode("div", {
        "class": "".concat(preName, "__avatar")
      }, [typeof avatar === "string" ? createVNode("img", {
        "src": avatar,
        "alt": "",
        "class": "".concat(preName, "__avatar-image")
      }, null) : avatar]) : null;
    }
  },
  render: function render() {
    return createVNode("div", {
      "class": preName
    }, [createVNode("div", {
      "class": "".concat(preName, "__inner")
    }, [this.renderAvatar(), this.renderContent()]), this.renderReply()]);
  }
});

export { _Comment as default };
//# sourceMappingURL=comment.js.map
