import { Styles } from '../common';
declare const _default: import("vue").DefineComponent<{
    alt: {
        type: StringConstructor;
        default: string;
    };
    hideOnLoadFailed: BooleanConstructor;
    icon: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    image: {
        type: StringConstructor;
        default: string;
    };
    shape: {
        type: import("vue").PropType<import("./type").ShapeEnum>;
        default: import("./type").ShapeEnum;
        validator(val: import("./type").ShapeEnum): boolean;
    };
    size: {
        type: StringConstructor;
        default: string;
    };
    onError: import("vue").PropType<() => void>;
}, {
    avatar: import("vue").Ref<HTMLElement>;
    avatarChild: import("vue").Ref<HTMLElement>;
    isImgExist: import("vue").Ref<boolean>;
    gap: import("vue").Ref<number>;
    sizeValue: import("vue").Ref<string>;
    scale: import("vue").Ref<string>;
    customAvatarSize: import("vue").ComputedRef<Styles>;
    customImageSize: import("vue").ComputedRef<Styles>;
    customCharacterSize: import("vue").ComputedRef<Styles>;
    isCustomSize: import("vue").ComputedRef<boolean>;
    handleImgLoadError: () => void;
    setScaleParams: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "error"[], "error", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    alt: {
        type: StringConstructor;
        default: string;
    };
    hideOnLoadFailed: BooleanConstructor;
    icon: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    image: {
        type: StringConstructor;
        default: string;
    };
    shape: {
        type: import("vue").PropType<import("./type").ShapeEnum>;
        default: import("./type").ShapeEnum;
        validator(val: import("./type").ShapeEnum): boolean;
    };
    size: {
        type: StringConstructor;
        default: string;
    };
    onError: import("vue").PropType<() => void>;
}>> & {
    onError?: (...args: any[]) => any;
}, {
    image: string;
    size: string;
    alt: string;
    shape: import("./type").ShapeEnum;
    hideOnLoadFailed: boolean;
}>;
export default _default;
