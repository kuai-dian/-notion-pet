/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, inject, ref, computed, onMounted, nextTick, onUpdated, createVNode } from 'vue';
import { useEmitEvent } from '../hooks/event.js';
import { prefix } from '../config.js';
import ClASSNAMES from '../utils/classnames.js';
import props from './props.js';
import { renderContent, renderTNodeJSX } from '../utils/render-tnode.js';
import '../utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isFunction';
import 'lodash/isObject';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(prefix, "-avatar");
var _Avatar = defineComponent({
  name: "TAvatar",
  props: props,
  emits: ["error"],
  setup: function setup(props2, _ref) {
    var emit = _ref.emit;
    var emitEvent = useEmitEvent(props2, emit);
    var avatarGroup = inject("avatarGroup", void 0);
    var avatar = ref(null);
    var avatarChild = ref(null);
    var isImgExist = ref(true);
    var gap = ref(4);
    var sizeValue = ref("");
    var scale = ref("");
    var isCustomSize = computed(function () {
      return sizeValue.value && !ClASSNAMES.SIZE[sizeValue.value];
    });
    var customAvatarSize = computed(function () {
      return isCustomSize.value ? {
        width: sizeValue.value,
        height: sizeValue.value,
        "font-size": "".concat(Number.parseInt(sizeValue.value, 10) / 2, "px")
      } : {};
    });
    var customImageSize = computed(function () {
      return isCustomSize.value ? {
        height: sizeValue.value,
        width: sizeValue.value
      } : {};
    });
    var customCharacterSize = computed(function () {
      return {
        transform: scale.value
      };
    });

    var handleImgLoadError = function handleImgLoadError() {
      var hideOnLoadFailed = props2.hideOnLoadFailed;
      isImgExist.value = !hideOnLoadFailed;
      emitEvent("error");
    };

    var setScaleParams = function setScaleParams() {
      var $avatar = avatar.value;
      var $avatarChild = avatarChild.value;
      var avatarWidth = $avatar === null || $avatar === void 0 ? void 0 : $avatar.offsetWidth;
      var avatarChildWidth = $avatarChild === null || $avatarChild === void 0 ? void 0 : $avatarChild.offsetWidth;

      if (gap.value * 2 < avatarWidth) {
        scale.value = avatarChildWidth > avatarWidth - gap.value * 2 ? "scale(".concat((avatarWidth - gap.value * 2) / avatarChildWidth, ")") : "scale(1)";
      }
    };

    onMounted(function () {
      sizeValue.value = props2.size || (avatarGroup === null || avatarGroup === void 0 ? void 0 : avatarGroup.size);
      nextTick(function () {
        setScaleParams();
      });
    });
    onUpdated(function () {
      nextTick(function () {
        setScaleParams();
      });
    });
    return {
      avatar: avatar,
      avatarChild: avatarChild,
      isImgExist: isImgExist,
      gap: gap,
      sizeValue: sizeValue,
      scale: scale,
      customAvatarSize: customAvatarSize,
      customImageSize: customImageSize,
      customCharacterSize: customCharacterSize,
      isCustomSize: isCustomSize,
      handleImgLoadError: handleImgLoadError,
      setScaleParams: setScaleParams
    };
  },
  render: function render() {
    var _ref2;

    var content = renderContent(this, "default", "content");
    var icon = renderTNodeJSX(this, "icon");
    var isIconOnly = icon && !content;
    var _this$$props = this.$props,
        shape = _this$$props.shape,
        image = _this$$props.image,
        alt = _this$$props.alt;
    var avatarClass = ["".concat(name), ClASSNAMES.SIZE[this.sizeValue], (_ref2 = {}, _defineProperty(_ref2, "".concat(name, "--circle"), shape === "circle"), _defineProperty(_ref2, "".concat(name, "--round"), shape === "round"), _defineProperty(_ref2, "".concat(name, "__icon"), !!isIconOnly), _ref2)];

    var _content = function () {
      return content;
    }();

    content = createVNode("span", {
      "ref": "avatarChild",
      "style": _objectSpread({}, this.customCharacterSize)
    }, [content]);

    if (icon) {
      content = [icon, !isIconOnly ? content : ""];
    }

    if (image && this.isImgExist) {
      content = createVNode("img", {
        "style": _objectSpread({}, this.customImageSize),
        "src": image,
        "alt": alt,
        "onError": this.handleImgLoadError
      }, null);
    }

    return createVNode("div", {
      "ref": "avatar",
      "class": avatarClass,
      "style": _objectSpread({}, this.customAvatarSize)
    }, [content]);
  }
});

export { _Avatar as default };
//# sourceMappingURL=avatar.js.map
