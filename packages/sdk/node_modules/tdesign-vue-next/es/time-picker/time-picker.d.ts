import dayjs from 'dayjs';
import { TimeInputEvent, InputTime, TimeInputType } from './interface';
import { PopupVisibleChangeContext } from '../popup';
import { EPickerCols } from './constant';
declare const _default: import("vue").DefineComponent<{
    allowInput: BooleanConstructor;
    clearable: BooleanConstructor;
    disabled: BooleanConstructor;
    disableTime: {
        type: import("vue").PropType<(h: number, m: number, s: number) => boolean>;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    hideDisabledTime: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    steps: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => number[];
    };
    value: {
        type: StringConstructor;
        default: string;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onBlur: import("vue").PropType<(context: {
        trigger: "hour" | "minute" | "second";
        input: string;
        value: string;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: string) => void>;
    onClose: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        trigger: "hour" | "minute" | "second";
        input: string;
        value: string;
        e: FocusEvent;
    }) => void>;
    onInput: import("vue").PropType<(context: {
        input: string;
        value: string;
        e: InputEvent;
    }) => void>;
    onOpen: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}, unknown, {
    els: any[];
    focus: boolean;
    isShowPanel: boolean;
    time: dayjs.Dayjs;
    inputTime: any;
    needClear: boolean;
}, {
    panelValue(): Array<dayjs.Dayjs>;
    textClassName(): string;
}, {
    inputChange(event: TimeInputEvent): void;
    onBlurDefault(e: Event, trigger: TimeInputType, index: number, input: number): void;
    onFocusDefault(e: Event, trigger: TimeInputType, index: number, input: number): void;
    panelVisibleChange(val: boolean, context?: PopupVisibleChangeContext): void;
    toggleInputMeridiem(): void;
    pickTime(col: EPickerCols, change: string | number, index: number, value: Record<string, any>): void;
    makeSure(): void;
    nowAction(): void;
    output(): void;
    setInputValue(val: dayjs.Dayjs | undefined): InputTime | undefined;
    dayjs2InputTime(val: dayjs.Dayjs): InputTime;
    clear(context: {
        e: MouseEvent;
    }): void;
    renderInput(): JSX.Element;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("open" | "input" | "blur" | "change" | "close" | "focus")[], "input" | "open" | "blur" | "change" | "close" | "focus", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    allowInput: BooleanConstructor;
    clearable: BooleanConstructor;
    disabled: BooleanConstructor;
    disableTime: {
        type: import("vue").PropType<(h: number, m: number, s: number) => boolean>;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    hideDisabledTime: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    steps: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => number[];
    };
    value: {
        type: StringConstructor;
        default: string;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onBlur: import("vue").PropType<(context: {
        trigger: "hour" | "minute" | "second";
        input: string;
        value: string;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: string) => void>;
    onClose: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        trigger: "hour" | "minute" | "second";
        input: string;
        value: string;
        e: FocusEvent;
    }) => void>;
    onInput: import("vue").PropType<(context: {
        input: string;
        value: string;
        e: InputEvent;
    }) => void>;
    onOpen: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}>> & {
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    onInput?: (...args: any[]) => any;
    onClose?: (...args: any[]) => any;
    onOpen?: (...args: any[]) => any;
}, {
    value: string;
    disabled: boolean;
    size: "small" | "medium" | "large";
    placeholder: string;
    format: string;
    defaultValue: string;
    steps: (string | number)[];
    clearable: boolean;
    hideDisabledTime: boolean;
    allowInput: boolean;
}>;
export default _default;
