import dayjs from 'dayjs';
import { TimeInputEvent, InputTime } from './interface';
import { PopupVisibleChangeContext } from '../popup';
import { EPickerCols } from './constant';
declare const _default: import("vue").DefineComponent<{
    allowInput: BooleanConstructor;
    clearable: BooleanConstructor;
    disabled: {
        type: import("vue").PropType<boolean | boolean[]>;
        default: boolean;
    };
    disableTime: {
        type: import("vue").PropType<(h: number, m: number, s: number, context: {
            partial: import("./type").TimeRangePickerPartial;
        }) => boolean>;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    hideDisabledTime: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: import("vue").PropType<string | string[]>;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    steps: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => number[];
    };
    value: {
        type: import("vue").PropType<import("./type").TimeRangeValue>;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TimeRangeValue>;
    };
    onBlur: import("vue").PropType<(context: {
        value: import("./type").TimeRangeValue;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").TimeRangeValue) => void>;
    onFocus: import("vue").PropType<(context: {
        value: import("./type").TimeRangeValue;
        e: FocusEvent;
    }) => void>;
    onInput: import("vue").PropType<(context: {
        input: string;
        value: import("./type").TimeRangeValue;
        e: InputEvent;
    }) => void>;
}, unknown, {
    els: any[];
    focus: boolean;
    isShowPanel: boolean;
    time: dayjs.Dayjs[];
    inputTime: InputTime[];
}, {
    panelValue(): Array<dayjs.Dayjs>;
    textClassName(): string;
}, {
    inputChange(event: TimeInputEvent): void;
    getFormatValues(): string[];
    onBlurDefault(e: Event): void;
    onFocusDefault(e: Event): void;
    panelVisibleChange(val: boolean, context?: PopupVisibleChangeContext): void;
    toggleInputMeridiem(index: number): void;
    pickTime(col: EPickerCols, change: string | number, index: number, value: Record<string, any>): void;
    makeSure(): void;
    updateInputTime(): void;
    clear(context: {
        e: MouseEvent;
    }): void;
    triggerUpdateValue(): void;
    renderInput(): JSX.Element;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("open" | "input" | "blur" | "change" | "click" | "close" | "focus")[], "input" | "open" | "blur" | "change" | "click" | "close" | "focus", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    allowInput: BooleanConstructor;
    clearable: BooleanConstructor;
    disabled: {
        type: import("vue").PropType<boolean | boolean[]>;
        default: boolean;
    };
    disableTime: {
        type: import("vue").PropType<(h: number, m: number, s: number, context: {
            partial: import("./type").TimeRangePickerPartial;
        }) => boolean>;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    hideDisabledTime: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: import("vue").PropType<string | string[]>;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    steps: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => number[];
    };
    value: {
        type: import("vue").PropType<import("./type").TimeRangeValue>;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TimeRangeValue>;
    };
    onBlur: import("vue").PropType<(context: {
        value: import("./type").TimeRangeValue;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").TimeRangeValue) => void>;
    onFocus: import("vue").PropType<(context: {
        value: import("./type").TimeRangeValue;
        e: FocusEvent;
    }) => void>;
    onInput: import("vue").PropType<(context: {
        input: string;
        value: import("./type").TimeRangeValue;
        e: InputEvent;
    }) => void>;
}>> & {
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    onInput?: (...args: any[]) => any;
    onClick?: (...args: any[]) => any;
    onClose?: (...args: any[]) => any;
    onOpen?: (...args: any[]) => any;
}, {
    disabled: boolean | boolean[];
    size: "small" | "medium" | "large";
    format: string;
    steps: (string | number)[];
    clearable: boolean;
    hideDisabledTime: boolean;
    allowInput: boolean;
}>;
export default _default;
