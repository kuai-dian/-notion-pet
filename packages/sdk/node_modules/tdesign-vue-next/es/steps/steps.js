/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, createVNode, resolveComponent, mergeProps } from 'vue';
import { prefix } from '../config.js';
import props from './props.js';
import _StepItem from './step-item.js';
import mixins from '../utils/mixins.js';
import getConfigReceiverMixins from '../config-provider/config-receiver.js';
import { emitEvent } from '../utils/event.js';
import { renderTNodeJSX } from '../utils/render-tnode.js';
import 'lodash/isFunction';
import 'tdesign-icons-vue-next';
import './step-item-props.js';
import '../config-provider/zh_CN_config.js';
import '../config-provider/type.js';
import '../utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(prefix, "-steps");
var _Steps = defineComponent(_objectSpread(_objectSpread({
  name: "TSteps"
}, mixins(getConfigReceiverMixins("datePicker"))), {}, {
  components: {
    TStepItem: _StepItem
  },
  provide: function provide() {
    return {
      steps: this
    };
  },
  props: _objectSpread({}, props),
  data: function data() {
    return {
      stepChildren: [],
      indexMap: {}
    };
  },
  computed: {
    baseClass: function baseClass() {
      if (this.direction) {
        console.warn("TDesign Steps Warn: `direction` is going to be deprecated. please use `layout` instead. ");
      }

      var layout = this.layout || this.direction || "horizontal";
      return [name, "".concat(name, "--").concat(layout), "".concat(name, "--").concat(this.handleTheme(), "-anchor"), _defineProperty({}, "".concat(name, "--").concat(this.sequence), layout === "vertical")];
    }
  },
  watch: {
    options: {
      immediate: true,
      handler: function handler() {
        var _this = this;

        if (!this.options) return;
        this.options.forEach(function (item, index) {
          if (item.value !== void 0) {
            _this.indexMap[item.value] = index;
          }
        });
      }
    }
  },
  methods: {
    getOptions: function getOptions() {
      var options;

      if (this.options && this.options.length) {
        options = this.options;
      } else {
        var nodes = this.$slots["default"] && this.$slots["default"](null);
        options = this.getOptionListBySlots(nodes);
      }

      return options;
    },
    getOptionListBySlots: function getOptionListBySlots(nodes) {
      var arr = [];
      nodes === null || nodes === void 0 ? void 0 : nodes.forEach(function (node) {
        var option = node === null || node === void 0 ? void 0 : node.props;
        option && arr.push(option);
      });
      return arr;
    },
    handleTheme: function handleTheme() {
      var theme = this.theme;
      var options = this.getOptions();
      options.forEach(function (item) {
        if ((item === null || item === void 0 ? void 0 : item.icon) !== void 0) {
          theme = "default";
        }
      });
      return theme;
    },
    handleStatus: function handleStatus(item, index) {
      if (item.status && item.status !== "default") return item.status;
      if (this.current === "FINISH") return "finish";
      if (item.value === void 0 && index < this.current) return "finish";

      if (item.value !== void 0) {
        var matchIndex = this.indexMap[this.current];

        if (matchIndex === void 0) {
          console.warn("TDesign Steps Warn: The current `value` is not exist.");
          return "default";
        }

        if (index < matchIndex) return "finish";
      }

      var key = item.value === void 0 ? index : item.value;
      if (key === this.current) return "process";
      return "default";
    },
    addItem: function addItem(item) {
      var index = this.stepChildren.length;
      item.index = index;
      this.stepChildren.push(item);
    },
    removeItem: function removeItem(item) {
      this.stepChildren = this.stepChildren.filter(function (t) {
        return t !== item;
      });
    },
    handleChange: function handleChange(cur, prev, e) {
      emitEvent(this, "change", cur, prev, {
        e: e
      });
    },
    renderContent: function renderContent() {
      var _this2 = this;

      var content = null;
      var options = this.getOptions();

      if (this.$slots["default"]) {
        var _content;

        content = renderTNodeJSX(this, "default");
        content = content.map(function (item) {
          if (item.children && Array.isArray(item.children)) return item.children;
          return item;
        }).flat().filter(function (item) {
          return item.type.name === "TStepItem";
        });
        (_content = content) === null || _content === void 0 ? void 0 : _content.forEach(function (item, index) {
          item.props.status = _this2.handleStatus(item.props, index);
        });
        return content;
      }

      content = options.map(function (item, index) {
        return createVNode(resolveComponent("t-step-item"), mergeProps(_objectSpread(_objectSpread({}, item), {}, {
          status: _this2.handleStatus(item, index)
        }), {
          "key": item.value || index
        }), null);
      });
      return content;
    }
  },
  render: function render() {
    var baseClass = this.baseClass,
        renderContent = this.renderContent;
    return createVNode("div", {
      "class": baseClass
    }, [renderContent()]);
  }
}));

export { _Steps as default };
//# sourceMappingURL=steps.js.map
