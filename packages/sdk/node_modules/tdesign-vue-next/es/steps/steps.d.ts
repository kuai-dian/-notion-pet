import { VNode } from 'vue';
import TStepItem from './step-item';
import { ClassName } from '../common';
import { TdStepsProps, TdStepItemProps } from './type';
declare const _default: import("vue").DefineComponent<{
    current: {
        type: import("vue").PropType<string | number>;
    };
    defaultCurrent: {
        type: import("vue").PropType<string | number>;
    };
    direction: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        validator(val: "horizontal" | "vertical"): boolean;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    options: {
        type: import("vue").PropType<TdStepItemProps[]>;
    };
    readonly: BooleanConstructor;
    sequence: {
        type: import("vue").PropType<"reverse" | "positive">;
        default: "reverse" | "positive";
        validator(val: "reverse" | "positive"): boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "dot">;
        default: "default" | "dot";
        validator(val: "default" | "dot"): boolean;
    };
    onChange: import("vue").PropType<(current: string | number, previous: string | number, context?: {
        e?: MouseEvent;
    }) => void>;
}, unknown, {
    stepChildren: any[];
    indexMap: {};
}, {
    baseClass(): ClassName;
}, {
    getOptions(): TdStepItemProps[];
    getOptionListBySlots(nodes: VNode[]): TdStepItemProps[];
    handleTheme(): "default" | "dot";
    handleStatus(item: TdStepItemProps, index: number): "error" | "default" | "finish" | "process";
    addItem(item: InstanceType<typeof TStepItem>): void;
    removeItem(item: InstanceType<typeof TStepItem>): void;
    handleChange(cur: TdStepsProps['current'], prev: TdStepsProps['current'], e: MouseEvent): void;
    renderContent(): any;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    current: {
        type: import("vue").PropType<string | number>;
    };
    defaultCurrent: {
        type: import("vue").PropType<string | number>;
    };
    direction: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        validator(val: "horizontal" | "vertical"): boolean;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    options: {
        type: import("vue").PropType<TdStepItemProps[]>;
    };
    readonly: BooleanConstructor;
    sequence: {
        type: import("vue").PropType<"reverse" | "positive">;
        default: "reverse" | "positive";
        validator(val: "reverse" | "positive"): boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "dot">;
        default: "default" | "dot";
        validator(val: "default" | "dot"): boolean;
    };
    onChange: import("vue").PropType<(current: string | number, previous: string | number, context?: {
        e?: MouseEvent;
    }) => void>;
}>>, {
    readonly: boolean;
    sequence: "reverse" | "positive";
    layout: "horizontal" | "vertical";
    theme: "default" | "dot";
}>;
export default _default;
