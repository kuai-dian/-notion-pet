import TreeNode from '../_common/js/tree/tree-node';
import { ClassName, TreeOptionData } from '../common';
import { TdTreeProps } from './type';
import { TreeNodeValue, TypeEventState, TreeNodeState, TypeTreeNodeModel, TypeTargetNode } from './interface';
declare const _default: import("vue").DefineComponent<{
    activable: BooleanConstructor;
    actived: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
    };
    defaultActived: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
    };
    activeMultiple: BooleanConstructor;
    checkable: BooleanConstructor;
    checkProps: {
        type: import("vue").PropType<import("..").TdCheckboxProps>;
    };
    checkStrictly: BooleanConstructor;
    data: {
        type: import("vue").PropType<TreeOptionData[]>;
        default: () => TreeOptionData[];
    };
    disableCheck: {
        type: import("vue").PropType<boolean | ((node: import("./type").TreeNodeModel<TreeOptionData>) => boolean)>;
        default: boolean;
    };
    disabled: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
        default: string;
    };
    expandAll: BooleanConstructor;
    expanded: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        default: () => import("./type").TreeNodeValue[];
    };
    defaultExpanded: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        default: () => import("./type").TreeNodeValue[];
    };
    expandLevel: {
        type: NumberConstructor;
        default: number;
    };
    expandMutex: BooleanConstructor;
    expandOnClickNode: BooleanConstructor;
    expandParent: BooleanConstructor;
    filter: {
        type: import("vue").PropType<(node: import("./type").TreeNodeModel<TreeOptionData>) => boolean>;
    };
    hover: BooleanConstructor;
    icon: {
        type: import("vue").PropType<boolean | import("../common").TNode<import("./type").TreeNodeModel<TreeOptionData>>>;
        default: boolean;
    };
    keys: {
        type: import("vue").PropType<import("./type").TreeKeysType>;
    };
    label: {
        type: import("vue").PropType<string | boolean | import("../common").TNode<import("./type").TreeNodeModel<TreeOptionData>>>;
        default: boolean;
    };
    lazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    line: {
        type: import("vue").PropType<boolean | import("../common").TNode<any>>;
        default: boolean;
    };
    load: {
        type: import("vue").PropType<(node: import("./type").TreeNodeModel<TreeOptionData>) => Promise<TreeOptionData[]>>;
    };
    operations: {
        type: import("vue").PropType<import("../common").TNode<import("./type").TreeNodeModel<TreeOptionData>>>;
    };
    transition: {
        type: BooleanConstructor;
        default: boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        default: () => import("./type").TreeNodeValue[];
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        default: () => import("./type").TreeNodeValue[];
    };
    valueMode: {
        type: import("vue").PropType<"all" | "parentFirst" | "onlyLeaf">;
        default: "all" | "parentFirst" | "onlyLeaf";
        validator(val: "all" | "parentFirst" | "onlyLeaf"): boolean;
    };
    onActive: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
        node: import("./type").TreeNodeModel<TreeOptionData>;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
        node: import("./type").TreeNodeModel<TreeOptionData>;
    }) => void>;
    onClick: import("vue").PropType<(context: {
        node: import("./type").TreeNodeModel<TreeOptionData>;
        e: MouseEvent;
    }) => void>;
    onExpand: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
        node: import("./type").TreeNodeModel<TreeOptionData>;
        e: MouseEvent;
    }) => void>;
    onLoad: import("vue").PropType<(context: {
        node: import("./type").TreeNodeModel<TreeOptionData>;
    }) => void>;
}, unknown, {
    store: any;
    nodesMap: any;
    mouseEvent: any;
    treeNodes: any[];
    treeScope: {
        checkProps: unknown;
        empty: string | import("../common").TNode<any>;
        icon: boolean | import("../common").TNode<import("./type").TreeNodeModel<TreeOptionData>>;
        label: string | boolean | import("../common").TNode<import("./type").TreeNodeModel<TreeOptionData>>;
        line: boolean | import("../common").TNode<any>;
        operations: import("../common").TNode<import("./type").TreeNodeModel<TreeOptionData>>;
        scopedSlots: any;
    };
    transitionCD: any;
}, {
    classList(): ClassName;
}, {
    renderItem(node: TreeNode): JSX.Element;
    getNodesMap(): any;
    updateNodesMap(): void;
    refresh(): void;
    updateStoreConfig(): void;
    updateExpanded(): void;
    build(): void;
    rebuild(list: TdTreeProps['data']): void;
    toggleActived(item: TypeTargetNode): TreeNodeValue[];
    setActived(item: TypeTargetNode, isActived: boolean): import("../cascader/interface").TreeNodeValue[];
    toggleExpanded(item: TypeTargetNode): TreeNodeValue[];
    setExpanded(item: TypeTargetNode, isExpanded: boolean): TreeNodeValue[];
    toggleChecked(item: TypeTargetNode): TreeNodeValue[];
    setChecked(item: TypeTargetNode, isChecked: boolean): TreeNodeValue[];
    handleLoad(info: TypeEventState): void;
    handleClick(state: TypeEventState): void;
    handleChange(state: TypeEventState): void;
    setItem(value: TreeNodeValue, options: TreeNodeState): void;
    getItem(value: TreeNodeValue): TypeTreeNodeModel;
    getItems(value?: TreeNodeValue): TypeTreeNodeModel[];
    appendTo(para?: TreeNodeValue, item?: TreeOptionData | TreeOptionData[]): void;
    insertBefore(value: TreeNodeValue, item: TreeOptionData): void;
    insertAfter(value: TreeNodeValue, item: TreeOptionData): void;
    remove(value?: TreeNodeValue): void;
    getIndex(value: TreeNodeValue): number;
    getParent(value: TreeNodeValue): TypeTreeNodeModel;
    getParents(value: TreeNodeValue): TypeTreeNodeModel[];
    getPath(value: TreeNodeValue): TypeTreeNodeModel[];
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    activable: BooleanConstructor;
    actived: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
    };
    defaultActived: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
    };
    activeMultiple: BooleanConstructor;
    checkable: BooleanConstructor;
    checkProps: {
        type: import("vue").PropType<import("..").TdCheckboxProps>;
    };
    checkStrictly: BooleanConstructor;
    data: {
        type: import("vue").PropType<TreeOptionData[]>;
        default: () => TreeOptionData[];
    };
    disableCheck: {
        type: import("vue").PropType<boolean | ((node: import("./type").TreeNodeModel<TreeOptionData>) => boolean)>;
        default: boolean;
    };
    disabled: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
        default: string;
    };
    expandAll: BooleanConstructor;
    expanded: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        default: () => import("./type").TreeNodeValue[];
    };
    defaultExpanded: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        default: () => import("./type").TreeNodeValue[];
    };
    expandLevel: {
        type: NumberConstructor;
        default: number;
    };
    expandMutex: BooleanConstructor;
    expandOnClickNode: BooleanConstructor;
    expandParent: BooleanConstructor;
    filter: {
        type: import("vue").PropType<(node: import("./type").TreeNodeModel<TreeOptionData>) => boolean>;
    };
    hover: BooleanConstructor;
    icon: {
        type: import("vue").PropType<boolean | import("../common").TNode<import("./type").TreeNodeModel<TreeOptionData>>>;
        default: boolean;
    };
    keys: {
        type: import("vue").PropType<import("./type").TreeKeysType>;
    };
    label: {
        type: import("vue").PropType<string | boolean | import("../common").TNode<import("./type").TreeNodeModel<TreeOptionData>>>;
        default: boolean;
    };
    lazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    line: {
        type: import("vue").PropType<boolean | import("../common").TNode<any>>;
        default: boolean;
    };
    load: {
        type: import("vue").PropType<(node: import("./type").TreeNodeModel<TreeOptionData>) => Promise<TreeOptionData[]>>;
    };
    operations: {
        type: import("vue").PropType<import("../common").TNode<import("./type").TreeNodeModel<TreeOptionData>>>;
    };
    transition: {
        type: BooleanConstructor;
        default: boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        default: () => import("./type").TreeNodeValue[];
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        default: () => import("./type").TreeNodeValue[];
    };
    valueMode: {
        type: import("vue").PropType<"all" | "parentFirst" | "onlyLeaf">;
        default: "all" | "parentFirst" | "onlyLeaf";
        validator(val: "all" | "parentFirst" | "onlyLeaf"): boolean;
    };
    onActive: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
        node: import("./type").TreeNodeModel<TreeOptionData>;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
        node: import("./type").TreeNodeModel<TreeOptionData>;
    }) => void>;
    onClick: import("vue").PropType<(context: {
        node: import("./type").TreeNodeModel<TreeOptionData>;
        e: MouseEvent;
    }) => void>;
    onExpand: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
        node: import("./type").TreeNodeModel<TreeOptionData>;
        e: MouseEvent;
    }) => void>;
    onLoad: import("vue").PropType<(context: {
        node: import("./type").TreeNodeModel<TreeOptionData>;
    }) => void>;
}>>, {
    data: TreeOptionData[];
    transition: boolean;
    value: import("./type").TreeNodeValue[];
    label: string | boolean | import("../common").TNode<import("./type").TreeNodeModel<TreeOptionData>>;
    line: boolean | import("../common").TNode<any>;
    disabled: boolean;
    expanded: import("./type").TreeNodeValue[];
    lazy: boolean;
    icon: boolean | import("../common").TNode<import("./type").TreeNodeModel<TreeOptionData>>;
    hover: boolean;
    defaultExpanded: import("./type").TreeNodeValue[];
    defaultValue: import("./type").TreeNodeValue[];
    expandMutex: boolean;
    empty: string | import("../common").TNode<any>;
    checkable: boolean;
    activable: boolean;
    expandAll: boolean;
    expandLevel: number;
    expandParent: boolean;
    activeMultiple: boolean;
    checkStrictly: boolean;
    valueMode: "all" | "parentFirst" | "onlyLeaf";
    disableCheck: boolean | ((node: import("./type").TreeNodeModel<TreeOptionData>) => boolean);
    expandOnClickNode: boolean;
}>;
export default _default;
