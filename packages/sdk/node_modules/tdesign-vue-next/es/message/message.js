/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, createVNode, h } from 'vue';
import { CloseIcon, InfoCircleFilledIcon, CheckCircleFilledIcon, ErrorCircleFilledIcon, HelpCircleFilledIcon } from 'tdesign-icons-vue-next';
import { Loading } from '../loading/index.js';
import { prefix } from '../config.js';
import { THEME_LIST } from './const.js';
import { renderTNodeJSX, renderContent } from '../utils/render-tnode.js';
import props from './props.js';
import { emitEvent } from '../utils/event.js';
import '../loading/loading.js';
import '@babel/runtime/helpers/slicedToArray';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../utils/classnames.js';
import '../utils/dom.js';
import '../_chunks/dep-b66bfe36.js';
import 'lodash/isString';
import '../utils/easing.js';
import '../utils/transfer-dom.js';
import '../loading/props.js';
import 'lodash/isEmpty';
import 'lodash/isFunction';
import 'lodash/isObject';
import '../utils/withInstall.js';
import './style/css.js';
import '../loading/type.js';
import '../loading/plugin.js';
import '../utils/helper.js';
import 'lodash/camelCase';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(prefix, "-message");
var _Message = defineComponent({
  name: "TMessage",
  props: _objectSpread({}, props),
  emits: ["duration-end", "click-close-btn"],
  data: function data() {
    return {
      timer: null
    };
  },
  computed: {
    classes: function classes() {
      var _this = this;

      var status = {};
      THEME_LIST.forEach(function (t) {
        status["".concat(prefix, "-is-").concat(t)] = _this.theme === t;
      });
      return [name, status, _defineProperty({}, "".concat(prefix, "-is-closable"), this.closeBtn || this.$slots.closeBtn)];
    }
  },
  created: function created() {
    this.duration && this.setTimer();
  },
  methods: {
    setTimer: function setTimer() {
      var _this2 = this;

      if (!this.duration) {
        return;
      }

      this.timer = Number(setTimeout(function () {
        _this2.clearTimer();

        emitEvent(_this2, "duration-end");
      }, this.duration));
    },
    clearTimer: function clearTimer() {
      this.duration && clearTimeout(this.timer);
    },
    close: function close(e) {
      emitEvent(this, "click-close-btn", e);
    },
    renderClose: function renderClose() {
      var defaultClose = createVNode(CloseIcon, null, null);

      return createVNode("span", {
        "class": "".concat(name, "__close"),
        "onClick": this.close
      }, [renderTNodeJSX(this, "closeBtn", defaultClose)]);
    },
    renderIcon: function renderIcon() {
      if (this.icon === false) return;
      if (typeof this.icon === "function") return this.icon(h);

      if (this.$slots.icon) {
        return this.$slots.icon(null);
      }

      var Icon = {
        info: InfoCircleFilledIcon,
        success: CheckCircleFilledIcon,
        warning: ErrorCircleFilledIcon,
        error: ErrorCircleFilledIcon,
        question: HelpCircleFilledIcon,
        loading: Loading
      }[this.theme];
      return createVNode(Icon, null, null);
    }
  },
  render: function render() {
    return createVNode("div", {
      "class": this.classes,
      "onMouseenter": this.clearTimer,
      "onMouseleave": this.setTimer
    }, [this.renderIcon(), renderContent(this, "default", "content"), this.renderClose()]);
  }
});

export { _Message as default };
//# sourceMappingURL=message.js.map
