import { VNode } from 'vue';
import { ChangeSource } from './type';
import { ClassName } from '../common';
declare type InputNumberEvent = {
    onInput?: (e: InputEvent) => void;
    onClick?: (e: MouseEvent) => void;
    onBlur?: (e: FocusEvent) => void;
    onFocus?: (e: FocusEvent) => void;
    onKeydown?: (e: KeyboardEvent) => void;
    onKeyup?: (e: KeyboardEvent) => void;
    onKeypress?: (e: KeyboardEvent) => void;
};
declare type ChangeContextEvent = InputEvent | MouseEvent | FocusEvent;
declare type InputNumberAttr = {
    disabled?: boolean;
    readonly?: any;
    autocomplete?: string;
    ref: string;
    placeholder: string;
};
declare const _default: import("vue").DefineComponent<{
    align: {
        type: import("vue").PropType<"center" | "left" | "right">;
        validator(val: "center" | "left" | "right"): boolean;
    };
    decimalPlaces: {
        type: NumberConstructor;
        default: any;
    };
    disabled: BooleanConstructor;
    format: {
        type: import("vue").PropType<(value: number) => string | number>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "success" | "warning">;
        validator(val: "error" | "success" | "warning"): boolean;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    theme: {
        type: import("vue").PropType<"normal" | "column" | "row">;
        default: "normal" | "column" | "row";
        validator(val: "normal" | "column" | "row"): boolean;
    };
    tips: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    value: {
        type: NumberConstructor;
        default: any;
    };
    defaultValue: {
        type: NumberConstructor;
        default: any;
    };
    onBlur: import("vue").PropType<(value: number, context: {
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: number, context: import("./type").ChangeContext) => void>;
    onEnter: import("vue").PropType<(value: number, context: {
        e: KeyboardEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: number, context: {
        e: FocusEvent;
    }) => void>;
    onKeydown: import("vue").PropType<(value: number, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeypress: import("vue").PropType<(value: number, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeyup: import("vue").PropType<(value: number, context: {
        e: KeyboardEvent;
    }) => void>;
}, unknown, {
    userInput: any;
    filterValue: any;
    isError: boolean;
    inputing: boolean;
}, {
    disabledReduce(): boolean;
    disabledAdd(): boolean;
    valueDecimalPlaces(): number;
    stepDecimalPlaces(): number;
    digitsNum(): number;
    reduceClasses(): (string | {
        [x: string]: boolean;
    })[];
    reduceEvents(): InputNumberEvent;
    addClasses(): ClassName;
    addEvents(): InputNumberEvent;
    cmptWrapClasses(): ClassName;
    inputWrapProps(): ClassName;
    inputClasses(): ClassName;
    inputEvents(): InputNumberEvent;
    inputAttrs(): InputNumberAttr;
    decreaseIcon(): VNode;
    increaseIcon(): VNode;
    displayValue(): number | string;
}, {
    handleAdd(e: MouseEvent): void;
    handleReduce(e: MouseEvent): void;
    handleInput(e: InputEvent): void;
    handleAction(value: number, actionType: ChangeSource, e: ChangeContextEvent): void;
    toValidStringNumber(s: string): string;
    toValidNumber(s: string): number;
    handleChange(value: number, ctx: {
        type: ChangeSource;
        e: ChangeContextEvent;
    }): void;
    handleBlur(e: FocusEvent): Promise<void>;
    handleFocus(e: FocusEvent): void;
    handleKeydownEnter(e: KeyboardEvent): void;
    handleKeydown(e: KeyboardEvent): void;
    handleKeyup(e: KeyboardEvent): void;
    handleKeypress(e: KeyboardEvent): void;
    handleStartInput(): void;
    handleEndInput(e: FocusEvent): void;
    updateValue(v: number): void;
    handleInputError(visible: boolean): void;
    isValid(v: string): boolean;
    isValidNumber(v: number): boolean;
    empty(v: string): boolean;
    clearInput(): void;
    clearFilterValue(): void;
    multiE(s: string): boolean;
    multiDot(s: string): boolean;
    multiNegative(s: string): boolean;
    toDecimalPlaces(value: number): number;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "keydown" | "keypress" | "keyup" | "update:value" | "keydown-enter")[], "blur" | "change" | "focus" | "keydown" | "keypress" | "keyup" | "update:value" | "keydown-enter", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    align: {
        type: import("vue").PropType<"center" | "left" | "right">;
        validator(val: "center" | "left" | "right"): boolean;
    };
    decimalPlaces: {
        type: NumberConstructor;
        default: any;
    };
    disabled: BooleanConstructor;
    format: {
        type: import("vue").PropType<(value: number) => string | number>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "success" | "warning">;
        validator(val: "error" | "success" | "warning"): boolean;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    theme: {
        type: import("vue").PropType<"normal" | "column" | "row">;
        default: "normal" | "column" | "row";
        validator(val: "normal" | "column" | "row"): boolean;
    };
    tips: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    value: {
        type: NumberConstructor;
        default: any;
    };
    defaultValue: {
        type: NumberConstructor;
        default: any;
    };
    onBlur: import("vue").PropType<(value: number, context: {
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: number, context: import("./type").ChangeContext) => void>;
    onEnter: import("vue").PropType<(value: number, context: {
        e: KeyboardEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: number, context: {
        e: FocusEvent;
    }) => void>;
    onKeydown: import("vue").PropType<(value: number, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeypress: import("vue").PropType<(value: number, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeyup: import("vue").PropType<(value: number, context: {
        e: KeyboardEvent;
    }) => void>;
}>> & {
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    onKeydown?: (...args: any[]) => any;
    onKeypress?: (...args: any[]) => any;
    onKeyup?: (...args: any[]) => any;
    "onUpdate:value"?: (...args: any[]) => any;
    "onKeydown-enter"?: (...args: any[]) => any;
}, {
    max: number;
    value: number;
    disabled: boolean;
    size: "small" | "medium" | "large";
    step: number;
    placeholder: string;
    min: number;
    theme: "normal" | "column" | "row";
    defaultValue: number;
    decimalPlaces: number;
}>;
export default _default;
