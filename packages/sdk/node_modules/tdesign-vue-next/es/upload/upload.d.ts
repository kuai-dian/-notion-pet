import { VNode } from 'vue';
import { ClassName, SlotReturnValue } from '../common';
import { HTMLInputEvent, SuccessContext, InnerProgressContext, UploadRemoveOptions, FlowRemoveContext } from './interface';
import { UploadChangeContext, UploadFile, UploadRemoveContext, RequestMethodResponse, SizeLimitObj } from './type';
declare const _default: import("vue").DefineComponent<{
    accept: {
        type: StringConstructor;
        default: string;
    };
    action: {
        type: StringConstructor;
        default: string;
    };
    autoUpload: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeUpload: {
        type: import("vue").PropType<(file: File | UploadFile) => boolean | Promise<boolean>>;
    };
    data: {
        type: import("vue").PropType<Record<string, any> | ((file: File) => Record<string, any>)>;
    };
    default: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    disabled: BooleanConstructor;
    draggable: BooleanConstructor;
    files: {
        type: import("vue").PropType<UploadFile[]>;
    };
    defaultFiles: {
        type: import("vue").PropType<UploadFile[]>;
    };
    format: {
        type: import("vue").PropType<(file: File) => UploadFile>;
    };
    formatResponse: {
        type: import("vue").PropType<(response: any, context: import("./type").FormatResponseContext) => import("./type").ResponseType>;
    };
    headers: {
        type: import("vue").PropType<{
            [key: string]: string;
        }>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    method: {
        type: import("vue").PropType<"POST" | "GET" | "PUT" | "OPTION">;
        default: "POST" | "GET" | "PUT" | "OPTION";
        validator(val: "POST" | "GET" | "PUT" | "OPTION"): boolean;
    };
    multiple: BooleanConstructor;
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    requestMethod: {
        type: import("vue").PropType<(files: UploadFile) => Promise<RequestMethodResponse>>;
    };
    showUploadProgress: {
        type: BooleanConstructor;
        default: boolean;
    };
    sizeLimit: {
        type: import("vue").PropType<number | SizeLimitObj>;
    };
    theme: {
        type: import("vue").PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
        default: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow";
        validator(val: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow"): boolean;
    };
    tips: {
        type: StringConstructor;
        default: string;
    };
    trigger: {
        type: import("vue").PropType<string | import("../common").TNode<import("./type").TriggerContext>>;
    };
    useMockProgress: {
        type: BooleanConstructor;
        default: boolean;
    };
    withCredentials: BooleanConstructor;
    onCancelUpload: import("vue").PropType<() => void>;
    onChange: import("vue").PropType<(value: UploadFile[], context: UploadChangeContext) => void>;
    onDragenter: import("vue").PropType<(context: {
        e: DragEvent;
    }) => void>;
    onDragleave: import("vue").PropType<(context: {
        e: DragEvent;
    }) => void>;
    onFail: import("vue").PropType<(options: {
        e: ProgressEvent<EventTarget>;
        file: UploadFile;
    }) => void>;
    onPreview: import("vue").PropType<(options: {
        file: UploadFile;
        e: MouseEvent;
    }) => void>;
    onProgress: import("vue").PropType<(options: import("./type").ProgressContext) => void>;
    onRemove: import("vue").PropType<(context: UploadRemoveContext) => void>;
    onSuccess: import("vue").PropType<(context: import("./type").SuccessContext) => void>;
}, unknown, {
    dragActive: boolean;
    loadingFile: UploadFile;
    toUploadFiles: any[];
    errorMsg: string;
    showImageViewDialog: boolean;
    showImageViewUrl: string;
    xhrReq: XMLHttpRequest;
}, {
    showTips(): boolean;
    showCustomDisplay(): boolean;
    showSingleDisplay(): boolean;
    showImgCard(): boolean;
    singleDraggable(): boolean;
    showUploadList(): boolean;
    showImgDialog(): boolean;
    showErrorMsg(): boolean;
    tipsClasses(): ClassName;
    errorClasses(): ClassName;
}, {
    emitChangeEvent(files: Array<UploadFile>, ctx: UploadChangeContext): void;
    emitRemoveEvent(ctx: UploadRemoveContext): void;
    handlePreviewImg(event: MouseEvent, file?: UploadFile): void;
    handleChange(event: HTMLInputEvent): void;
    handleDragChange(files: FileList): void;
    handleSingleRemove(e: MouseEvent): void;
    handleFileInputRemove(e: MouseEvent): void;
    handleMultipleRemove(options: UploadRemoveOptions): void;
    handleListRemove(context: FlowRemoveContext): void;
    uploadFiles(files: FileList): void;
    upload(file: UploadFile): Promise<void>;
    handleMockProgress(file: UploadFile): void;
    handleRequestMethod(file: UploadFile): void;
    handleRequestMethodResponse(res: RequestMethodResponse): boolean;
    multipleUpload(files: Array<UploadFile>): void;
    onError(options: {
        event?: ProgressEvent;
        file: UploadFile;
        response?: any;
        resFormatted?: boolean;
    }): void;
    handleProgress({ event, file, percent, type }: InnerProgressContext): void;
    handleSuccess({ event, file, response }: SuccessContext): void;
    handlePreview({ file, event }: {
        file?: UploadFile;
        event: ProgressEvent;
    }): {
        file: UploadFile;
        event: ProgressEvent<EventTarget>;
    };
    triggerUpload(): void;
    handleDragenter(e: DragEvent): void;
    handleDragleave(e: DragEvent): void;
    handleBeforeUpload(file: File | UploadFile): Promise<boolean>;
    handleSizeLimit(fileSize: number): boolean;
    cancelUpload(): void;
    cancelPreviewImgDialog(): void;
    getDefaultTrigger(): JSX.Element;
    renderInput(): JSX.Element;
    renderSingleDisplay(triggerElement: SlotReturnValue): JSX.Element;
    renderDraggerTrigger(): JSX.Element;
    renderTrigger(): any;
    renderCustom(triggerElement: VNode): JSX.Element;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    accept: {
        type: StringConstructor;
        default: string;
    };
    action: {
        type: StringConstructor;
        default: string;
    };
    autoUpload: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeUpload: {
        type: import("vue").PropType<(file: File | UploadFile) => boolean | Promise<boolean>>;
    };
    data: {
        type: import("vue").PropType<Record<string, any> | ((file: File) => Record<string, any>)>;
    };
    default: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    disabled: BooleanConstructor;
    draggable: BooleanConstructor;
    files: {
        type: import("vue").PropType<UploadFile[]>;
    };
    defaultFiles: {
        type: import("vue").PropType<UploadFile[]>;
    };
    format: {
        type: import("vue").PropType<(file: File) => UploadFile>;
    };
    formatResponse: {
        type: import("vue").PropType<(response: any, context: import("./type").FormatResponseContext) => import("./type").ResponseType>;
    };
    headers: {
        type: import("vue").PropType<{
            [key: string]: string;
        }>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    method: {
        type: import("vue").PropType<"POST" | "GET" | "PUT" | "OPTION">;
        default: "POST" | "GET" | "PUT" | "OPTION";
        validator(val: "POST" | "GET" | "PUT" | "OPTION"): boolean;
    };
    multiple: BooleanConstructor;
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    requestMethod: {
        type: import("vue").PropType<(files: UploadFile) => Promise<RequestMethodResponse>>;
    };
    showUploadProgress: {
        type: BooleanConstructor;
        default: boolean;
    };
    sizeLimit: {
        type: import("vue").PropType<number | SizeLimitObj>;
    };
    theme: {
        type: import("vue").PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
        default: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow";
        validator(val: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow"): boolean;
    };
    tips: {
        type: StringConstructor;
        default: string;
    };
    trigger: {
        type: import("vue").PropType<string | import("../common").TNode<import("./type").TriggerContext>>;
    };
    useMockProgress: {
        type: BooleanConstructor;
        default: boolean;
    };
    withCredentials: BooleanConstructor;
    onCancelUpload: import("vue").PropType<() => void>;
    onChange: import("vue").PropType<(value: UploadFile[], context: UploadChangeContext) => void>;
    onDragenter: import("vue").PropType<(context: {
        e: DragEvent;
    }) => void>;
    onDragleave: import("vue").PropType<(context: {
        e: DragEvent;
    }) => void>;
    onFail: import("vue").PropType<(options: {
        e: ProgressEvent<EventTarget>;
        file: UploadFile;
    }) => void>;
    onPreview: import("vue").PropType<(options: {
        file: UploadFile;
        e: MouseEvent;
    }) => void>;
    onProgress: import("vue").PropType<(options: import("./type").ProgressContext) => void>;
    onRemove: import("vue").PropType<(context: UploadRemoveContext) => void>;
    onSuccess: import("vue").PropType<(context: import("./type").SuccessContext) => void>;
}>>, {
    max: number;
    name: string;
    action: string;
    method: "POST" | "GET" | "PUT" | "OPTION";
    draggable: boolean;
    disabled: boolean;
    multiple: boolean;
    placeholder: string;
    accept: string;
    theme: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow";
    tips: string;
    autoUpload: boolean;
    showUploadProgress: boolean;
    withCredentials: boolean;
    useMockProgress: boolean;
}>;
export default _default;
