/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, createVNode } from 'vue';
import { TimeFilledIcon, CheckCircleFilledIcon, ErrorCircleFilledIcon, DeleteIcon, BrowseIcon } from 'tdesign-icons-vue-next';
import { prefix } from '../config.js';
import { Button } from '../button/index.js';
import { Loading } from '../loading/index.js';
import { UPLOAD_NAME, abridgeName, returnFileSize } from './util.js';
import props from './props.js';
import '../button/button.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../utils/classnames.js';
import '../button/props.js';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isFunction';
import 'lodash/isObject';
import '../utils/ripple.js';
import '../utils/set-style.js';
import '../loading/loading.js';
import '@babel/runtime/helpers/slicedToArray';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../utils/dom.js';
import '../_chunks/dep-b66bfe36.js';
import '../utils/easing.js';
import '../utils/transfer-dom.js';
import '../loading/props.js';
import '../utils/withInstall.js';
import './style/css.js';
import '../loading/type.js';
import '../loading/plugin.js';
import '../button/type.js';

var FlowList = defineComponent({
  name: "TUploadFlowList",
  components: {
    TButton: Button,
    TLoading: Loading,
    TimeFilledIcon: TimeFilledIcon,
    CheckCircleFilledIcon: CheckCircleFilledIcon,
    ErrorCircleFilledIcon: ErrorCircleFilledIcon,
    DeleteIcon: DeleteIcon,
    BrowseIcon: BrowseIcon
  },
  props: {
    showUploadProgress: props.showUploadProgress,
    files: Array,
    toUploadFiles: Array,
    placeholder: String,
    autoUpload: Boolean,
    remove: Function,
    upload: Function,
    cancel: Function,
    display: {
      type: String,
      validator: function validator(val) {
        return ["file-flow", "image-flow"].includes(val);
      }
    }
  },
  emits: ["dragleave", "change", "dragenter", "imgPreview"],
  data: function data() {
    return {
      dragActive: false,
      target: null
    };
  },
  computed: {
    showInitial: function showInitial() {
      var isWatingEmpty = !this.waitingUploadFiles || !this.waitingUploadFiles.length;
      return (!this.files || !this.files.length) && isWatingEmpty;
    },
    waitingUploadFiles: function waitingUploadFiles() {
      var _this = this;

      var list = [];
      this.toUploadFiles.forEach(function (item) {
        var r = _this.files.filter(function (t) {
          return t.name === item.name;
        });

        if (!r.length) {
          list.push(item);
        }
      });
      return list;
    },
    listFiles: function listFiles() {
      if (!this.files || !this.files.length) return this.toUploadFiles;
      return this.files.concat(this.waitingUploadFiles);
    },
    failedList: function failedList() {
      return this.toUploadFiles.filter(function (file) {
        return file.status === "fail";
      });
    },
    processList: function processList() {
      return this.toUploadFiles.filter(function (file) {
        return file.status === "progress";
      });
    },
    isUploading: function isUploading() {
      return !!this.processList.length;
    },
    allowUpload: function allowUpload() {
      return Boolean(this.waitingUploadFiles && this.waitingUploadFiles.length) && !this.isUploading;
    },
    uploadText: function uploadText() {
      if (this.isUploading) return "\u4E0A\u4F20\u4E2D...";
      return this.failedList && this.failedList.length ? "\u91CD\u65B0\u4E0A\u4F20" : "\u5F00\u59CB\u4E0A\u4F20";
    }
  },
  methods: {
    renderStatus: function renderStatus(file) {
      var status = null;

      switch (file.status) {
        case "success":
          status = createVNode("div", {
            "class": "".concat(UPLOAD_NAME, "__flow-status")
          }, [createVNode(CheckCircleFilledIcon, null, null), createVNode("span", null, ["\u4E0A\u4F20\u6210\u529F"])]);
          break;

        case "fail":
          status = createVNode("div", {
            "class": "".concat(UPLOAD_NAME, "__flow-status")
          }, [createVNode(ErrorCircleFilledIcon, null, null), createVNode("span", null, ["\u4E0A\u4F20\u5931\u8D25"])]);
          break;

        case "progress":
          this.showUploadProgress && (status = createVNode("div", {
            "class": "".concat(UPLOAD_NAME, "__flow-status")
          }, [createVNode(Loading, null, null), createVNode("span", null, ["\u4E0A\u4F20\u4E2D ", Math.min(file.percent, 99), "%"])]));
          break;

        case "waiting":
          status = createVNode("div", {
            "class": "".concat(UPLOAD_NAME, "__flow-status")
          }, [createVNode(TimeFilledIcon, null, null), createVNode("span", null, ["\u5F85\u4E0A\u4F20"])]);
          break;

        default:
          break;
      }

      return status;
    },
    handleDrop: function handleDrop(event) {
      event.preventDefault();
      this.$emit("change", event.dataTransfer.files);
      this.$emit("dragleave", event);
      this.dragActive = false;
    },
    handleDragenter: function handleDragenter(event) {
      this.target = event.target;
      event.preventDefault();
      this.$emit("dragenter", event);
      this.dragActive = true;
    },
    handleDragleave: function handleDragleave(event) {
      if (this.target !== event.target) return;
      event.preventDefault();
      this.$emit("dragleave", event);
      this.dragActive = false;
    },
    handleDragover: function handleDragover(event) {
      event.preventDefault();
    },
    onViewClick: function onViewClick(event, file) {
      this.$emit("imgPreview", event, file);
    },
    renderDrager: function renderDrager() {
      return createVNode("div", {
        "class": "".concat(UPLOAD_NAME, "__flow-empty"),
        "onDrop": this.handleDrop,
        "onDragenter": this.handleDragenter,
        "onDragover": this.handleDragover,
        "onDragleave": this.handleDragleave
      }, [this.dragActive ? "\u91CA\u653E\u9F20\u6807" : "\u70B9\u51FB\u4E0A\u65B9\u201C\u9009\u62E9\u6587\u4EF6\u201D\u6216\u5C06\u6587\u4EF6\u62D6\u62FD\u5230\u6B64\u533A\u57DF"]);
    },
    renderFileList: function renderFileList() {
      var _this2 = this;

      return createVNode("table", {
        "class": "".concat(UPLOAD_NAME, "__flow-table")
      }, [createVNode("tr", null, [createVNode("th", null, ["\u6587\u4EF6\u540D"]), createVNode("th", null, ["\u5927\u5C0F"]), createVNode("th", null, ["\u72B6\u6001"]), createVNode("th", null, ["\u64CD\u4F5C"])]), this.showInitial && createVNode("tr", null, [createVNode("td", {
        "colspan": 4
      }, [this.renderDrager()])]), this.listFiles.map(function (file, index) {
        return createVNode("tr", null, [createVNode("td", null, [abridgeName(file.name, 7, 10)]), createVNode("td", null, [returnFileSize(file.size)]), createVNode("td", null, [_this2.renderStatus(file)]), createVNode("td", null, [createVNode("span", {
          "class": "".concat(UPLOAD_NAME, "__flow-button"),
          "onClick": function onClick(e) {
            return _this2.remove({
              e: e,
              index: index,
              file: file
            });
          }
        }, ["\u5220\u9664"])])]);
      })]);
    },
    renderImgList: function renderImgList() {
      var _this3 = this;

      return createVNode("div", {
        "class": "".concat(UPLOAD_NAME, "__flow-card-area")
      }, [this.showInitial && this.renderDrager(), !!this.listFiles.length && createVNode("ul", {
        "class": "".concat(UPLOAD_NAME, "__card clearfix")
      }, [this.listFiles.map(function (file, index) {
        return createVNode("li", {
          "class": "".concat(UPLOAD_NAME, "__card-item")
        }, [createVNode("div", {
          "class": ["".concat(UPLOAD_NAME, "__card-content"), _defineProperty({}, "".concat(prefix, "-is-bordered"), file.status !== "waiting")]
        }, [file.status === "fail" && createVNode("div", {
          "class": "".concat(UPLOAD_NAME, "__card-status-wrap")
        }, [createVNode(ErrorCircleFilledIcon, null, null), createVNode("p", null, ["\u4E0A\u4F20\u5931\u8D25"])]), file.status === "progress" && createVNode("div", {
          "class": "".concat(UPLOAD_NAME, "__card-status-wrap")
        }, [createVNode(Loading, null, null), createVNode("p", null, ["\u4E0A\u4F20\u4E2D ", Math.min(file.percent, 99)])]), (["waiting", "success"].includes(file.status) || !file.status && file.url) && createVNode("img", {
          "class": "".concat(UPLOAD_NAME, "__card-image"),
          "src": file.url || "//tdesign.gtimg.com/tdesign-default-img.png"
        }, null), createVNode("div", {
          "class": "".concat(UPLOAD_NAME, "__card-mask")
        }, [file.url && createVNode("span", {
          "class": "".concat(UPLOAD_NAME, "__card-mask-item")
        }, [createVNode(BrowseIcon, {
          "onClick": function onClick(_ref2) {
            var e = _ref2.e;
            return _this3.onViewClick(e, file);
          }
        }, null), createVNode("span", {
          "class": "".concat(UPLOAD_NAME, "__card-mask-item-divider")
        }, null)]), createVNode("span", {
          "class": "".concat(UPLOAD_NAME, "__card-mask-item"),
          "onClick": function onClick(e) {
            return _this3.remove({
              e: e,
              index: index,
              file: file
            });
          }
        }, [createVNode(DeleteIcon, null, null)])])]), createVNode("p", {
          "class": "".concat(UPLOAD_NAME, "__card-name")
        }, [abridgeName(file.name)])]);
      })])]);
    }
  },
  render: function render() {
    var _this4 = this;

    return createVNode("div", {
      "class": ["".concat(UPLOAD_NAME, "__flow"), "".concat(UPLOAD_NAME, "__flow-").concat(this.display)]
    }, [createVNode("div", {
      "class": "".concat(UPLOAD_NAME, "__flow-op")
    }, [this.$slots["default"] && this.$slots["default"](null), createVNode("small", {
      "class": "".concat(prefix, "-size-s ").concat(UPLOAD_NAME, "__flow-placeholder")
    }, [this.placeholder])]), this.display === "file-flow" && this.renderFileList(), this.display === "image-flow" && this.renderImgList(), createVNode("div", {
      "class": "".concat(UPLOAD_NAME, "__flow-bottom")
    }, [createVNode(Button, {
      "theme": "default",
      "onClick": this.cancel
    }, {
      "default": function _default() {
        return ["\u53D6\u6D88"];
      }
    }), createVNode(Button, {
      "disabled": !this.allowUpload,
      "theme": "primary",
      "onClick": function onClick(e) {
        return _this4.upload(_this4.waitingUploadFiles, e);
      }
    }, {
      "default": function _default() {
        return [_this4.uploadText];
      }
    })])]);
  }
});

export { FlowList as default };
//# sourceMappingURL=flow-list.js.map
