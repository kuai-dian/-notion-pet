import { TransferListType, TransferItemOption, CheckedOptions, TransferValue, EmptyType, TransferListOptionBase, TargetParams, SearchEvent, SearchOption } from './interface';
import { PageInfo, TdPaginationProps } from '../pagination/type';
import { TNode } from '../common';
declare type DataType = {
    SOURCE: TransferListType;
    TARGET: TransferListType;
};
declare const _default: import("vue").DefineComponent<{
    checkboxProps: {
        type: import("vue").PropType<import("..").TdCheckboxProps>;
    };
    checked: {
        type: import("vue").PropType<TransferValue[]>;
        default: () => TransferValue[];
    };
    defaultChecked: {
        type: import("vue").PropType<TransferValue[]>;
        default: () => TransferValue[];
    };
    data: {
        type: import("vue").PropType<import("./type").DataOption[]>;
        default: () => import("./type").DataOption[];
    };
    direction: {
        type: import("vue").PropType<"both" | "left" | "right">;
        default: "both" | "left" | "right";
        validator(val: "both" | "left" | "right"): boolean;
    };
    disabled: {
        type: import("vue").PropType<boolean | boolean[]>;
        default: boolean;
    };
    empty: {
        type: import("vue").PropType<EmptyType | EmptyType[]>;
        default: string;
    };
    footer: {
        type: import("vue").PropType<(string | TNode<any>)[] | TNode<{
            type: TransferListType;
        }>>;
    };
    keys: {
        type: import("vue").PropType<import("../common").KeysType>;
    };
    operation: {
        type: import("vue").PropType<(string | TNode<any>)[] | TNode<{
            direction: "left" | "right";
        }>>;
    };
    pagination: {
        type: import("vue").PropType<TdPaginationProps | TdPaginationProps[]>;
    };
    search: {
        type: import("vue").PropType<SearchOption | SearchOption[]>;
        default: boolean;
    };
    showCheckAll: {
        type: import("vue").PropType<boolean | boolean[]>;
        default: boolean;
    };
    targetSort: {
        type: import("vue").PropType<"push" | "unshift" | "original">;
        default: "push" | "unshift" | "original";
        validator(val: "push" | "unshift" | "original"): boolean;
    };
    title: {
        type: import("vue").PropType<import("./type").TitleType[] | TNode<{
            type: TransferListType;
        }>>;
        default: () => import("./type").TitleType[] | TNode<{
            type: TransferListType;
        }>;
    };
    transferItem: {
        type: import("vue").PropType<TNode<import("./type").TransferItem<import("./type").DataOption>>>;
    };
    value: {
        type: import("vue").PropType<TransferValue[]>;
        default: () => TransferValue[];
    };
    defaultValue: {
        type: import("vue").PropType<TransferValue[]>;
        default: () => TransferValue[];
    };
    onChange: import("vue").PropType<(targetValue: TransferValue[], context: TargetParams) => void>;
    onCheckedChange: import("vue").PropType<(options: CheckedOptions) => void>;
    onPageChange: import("vue").PropType<(page: PageInfo, context: {
        type: TransferListType;
    }) => void>;
    onScroll: import("vue").PropType<(options: {
        e: Event;
        bottomDistance: number;
        type: TransferListType;
    }) => void>;
    onSearch: import("vue").PropType<(options: import("./type").SearchContext) => void>;
}, unknown, DataType, {
    isTreeMode(): boolean;
    leftButtonDisabled(): boolean;
    rightButtonDisabled(): boolean;
    transferData(): Array<TransferItemOption>;
    sourceList(): Array<TransferItemOption>;
    targetList(): Array<TransferItemOption>;
    checkedValue(): TransferListOptionBase<TransferValue[]>;
    hasFooter(): boolean;
    showPagination(): boolean;
    showSearch(): boolean;
    footerOption(): TransferListOptionBase<string | Function>;
    emptyOption(): TransferListOptionBase<EmptyType>;
    searchOption(): TransferListOptionBase<SearchOption>;
    checkAllOption(): TransferListOptionBase<boolean>;
    disabledOption(): TransferListOptionBase<boolean>;
    titleOption(): TransferListOptionBase<string | TNode>;
    paginationOption(): TransferListOptionBase<TdPaginationProps>;
}, {
    transferTo(toDirection: TransferListType): void;
    transferToRight(): void;
    transferToLeft(): void;
    handleCheckedChange(val: Array<TransferValue>, listType: TransferListType): void;
    filterMethod(transferList: Array<TransferItemOption>, targetValueList: Array<TransferValue>, needMatch: boolean): Array<TransferItemOption>;
    handleScroll(e: Event, listType: TransferListType): void;
    handleSearch(e: SearchEvent): void;
    handlePageChange(pageInfo: PageInfo, listType: TransferListType): void;
    renderTransferList(listType: TransferListType): JSX.Element;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "scroll" | "search" | "update:value" | "checked-change" | "checkChange" | "page-change" | "update:checked")[], "search" | "change" | "scroll" | "update:value" | "checked-change" | "checkChange" | "page-change" | "update:checked", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    checkboxProps: {
        type: import("vue").PropType<import("..").TdCheckboxProps>;
    };
    checked: {
        type: import("vue").PropType<TransferValue[]>;
        default: () => TransferValue[];
    };
    defaultChecked: {
        type: import("vue").PropType<TransferValue[]>;
        default: () => TransferValue[];
    };
    data: {
        type: import("vue").PropType<import("./type").DataOption[]>;
        default: () => import("./type").DataOption[];
    };
    direction: {
        type: import("vue").PropType<"both" | "left" | "right">;
        default: "both" | "left" | "right";
        validator(val: "both" | "left" | "right"): boolean;
    };
    disabled: {
        type: import("vue").PropType<boolean | boolean[]>;
        default: boolean;
    };
    empty: {
        type: import("vue").PropType<EmptyType | EmptyType[]>;
        default: string;
    };
    footer: {
        type: import("vue").PropType<(string | TNode<any>)[] | TNode<{
            type: TransferListType;
        }>>;
    };
    keys: {
        type: import("vue").PropType<import("../common").KeysType>;
    };
    operation: {
        type: import("vue").PropType<(string | TNode<any>)[] | TNode<{
            direction: "left" | "right";
        }>>;
    };
    pagination: {
        type: import("vue").PropType<TdPaginationProps | TdPaginationProps[]>;
    };
    search: {
        type: import("vue").PropType<SearchOption | SearchOption[]>;
        default: boolean;
    };
    showCheckAll: {
        type: import("vue").PropType<boolean | boolean[]>;
        default: boolean;
    };
    targetSort: {
        type: import("vue").PropType<"push" | "unshift" | "original">;
        default: "push" | "unshift" | "original";
        validator(val: "push" | "unshift" | "original"): boolean;
    };
    title: {
        type: import("vue").PropType<import("./type").TitleType[] | TNode<{
            type: TransferListType;
        }>>;
        default: () => import("./type").TitleType[] | TNode<{
            type: TransferListType;
        }>;
    };
    transferItem: {
        type: import("vue").PropType<TNode<import("./type").TransferItem<import("./type").DataOption>>>;
    };
    value: {
        type: import("vue").PropType<TransferValue[]>;
        default: () => TransferValue[];
    };
    defaultValue: {
        type: import("vue").PropType<TransferValue[]>;
        default: () => TransferValue[];
    };
    onChange: import("vue").PropType<(targetValue: TransferValue[], context: TargetParams) => void>;
    onCheckedChange: import("vue").PropType<(options: CheckedOptions) => void>;
    onPageChange: import("vue").PropType<(page: PageInfo, context: {
        type: TransferListType;
    }) => void>;
    onScroll: import("vue").PropType<(options: {
        e: Event;
        bottomDistance: number;
        type: TransferListType;
    }) => void>;
    onSearch: import("vue").PropType<(options: import("./type").SearchContext) => void>;
}>> & {
    onChange?: (...args: any[]) => any;
    onScroll?: (...args: any[]) => any;
    "onUpdate:value"?: (...args: any[]) => any;
    "onChecked-change"?: (...args: any[]) => any;
    onSearch?: (...args: any[]) => any;
    onCheckChange?: (...args: any[]) => any;
    "onPage-change"?: (...args: any[]) => any;
    "onUpdate:checked"?: (...args: any[]) => any;
}, {
    search: boolean;
    data: import("./type").DataOption[];
    direction: "both" | "left" | "right";
    value: TransferValue[];
    title: import("./type").TitleType[] | TNode<{
        type: TransferListType;
    }>;
    disabled: boolean | boolean[];
    checked: TransferValue[];
    defaultValue: TransferValue[];
    defaultChecked: TransferValue[];
    empty: EmptyType | EmptyType[];
    showCheckAll: boolean | boolean[];
    targetSort: "push" | "unshift" | "original";
}>;
export default _default;
