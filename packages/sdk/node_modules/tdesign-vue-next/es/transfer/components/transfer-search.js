/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _typeof from '@babel/runtime/helpers/typeof';
import { defineComponent, createVNode, mergeProps } from 'vue';
import { SearchIcon } from 'tdesign-icons-vue-next';
import { prefix } from '../../config.js';
import { Input } from '../../input/index.js';
import '../../input/addon.js';
import '@babel/runtime/helpers/defineProperty';
import '../../input/input.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../../utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';
import '../../config-provider/config-receiver.js';
import '../../config-provider/zh_CN_config.js';
import '../../config-provider/type.js';
import '../../utils/mixins.js';
import '../../utils/classnames.js';
import '../../input/props.js';
import '../../utils/event.js';
import '../../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isFunction';
import 'lodash/isObject';
import '../../input/input-group.js';
import '../../utils/map-props.js';
import 'lodash/kebabCase';
import '../../utils/withInstall.js';
import './style/css.js';
import '../../input/type.js';

var Search = defineComponent({
  name: "TTransferSearch",
  props: {
    value: {
      type: String,
      "default": ""
    },
    search: {
      type: [Boolean, Object],
      "default": false
    },
    placeholder: {
      type: String,
      "default": ""
    }
  },
  emits: ["change"],
  methods: {
    handleChange: function handleChange(value, changeCtx) {
      this.$emit("change", {
        value: value,
        e: changeCtx.e
      });
    }
  },
  render: function render() {
    var value = this.value,
        search = this.search,
        placeholder = this.placeholder;
    var inputProps = _typeof(search) === "object" ? search : {
      clearable: true
    };
    return createVNode("div", {
      "class": "".concat(prefix, "-transfer__search-wrapper")
    }, [createVNode(Input, mergeProps(inputProps, {
      "defaultValue": value,
      "onChange": this.handleChange,
      "placeholder": placeholder
    }), {
      "default": function _default() {
        return [createVNode(SearchIcon, {
          "slot": "suffix-icon"
        }, null)];
      }
    })]);
  }
});

export { Search as default };
//# sourceMappingURL=transfer-search.js.map
