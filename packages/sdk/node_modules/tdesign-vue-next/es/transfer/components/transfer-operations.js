/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { isVNode, defineComponent, createVNode, resolveComponent } from 'vue';
import { ChevronRightIcon, ChevronLeftIcon } from 'tdesign-icons-vue-next';
import { prefix } from '../../config.js';
import { Button } from '../../button/index.js';
import '../../button/button.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/defineProperty';
import '../../utils/classnames.js';
import '../../loading/index.js';
import '../../loading/loading.js';
import '../../loading/icon/gradient.js';
import '../../_common/js/loading/circle-adapter.js';
import '../../_common/js/utils/set-style.js';
import '../../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../../utils/dom.js';
import '../../_chunks/dep-b66bfe36.js';
import 'lodash/isString';
import '../../utils/easing.js';
import '../../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isFunction';
import 'lodash/isObject';
import '../../utils/transfer-dom.js';
import '../../loading/props.js';
import '../../utils/withInstall.js';
import './style/css.js';
import '../../loading/type.js';
import '../../loading/plugin.js';
import '../../button/props.js';
import '../../utils/ripple.js';
import '../../utils/set-style.js';
import '../../button/type.js';

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}

var TransferOperations = defineComponent({
  name: "TTransferOperations",
  components: {
    TButton: Button
  },
  props: {
    leftDisabled: {
      type: Boolean,
      required: true
    },
    rightDisabled: {
      type: Boolean,
      required: true
    },
    operation: {
      type: [String, Array, Function, Boolean]
    }
  },
  emits: ["moveToRight", "moveToLeft"],
  methods: {
    moveToRight: function moveToRight() {
      this.$emit("moveToRight");
    },
    moveToLeft: function moveToLeft() {
      this.$emit("moveToLeft");
    },
    getIconRight: function getIconRight() {
      return createVNode(ChevronRightIcon, null, null);
    },
    getIconLeft: function getIconLeft() {
      return createVNode(ChevronLeftIcon, null, null);
    },
    getIcon: function getIcon(direction) {
      if (typeof this.operation === "function") {
        return null;
      }

      if (direction === "right" && this.operation && typeof this.operation[0] === "function") {
        return null;
      }

      if (direction === "left" && this.operation && typeof this.operation[1] === "function") {
        return null;
      }

      if (this.$slots.operation) {
        return null;
      }

      return direction === "left" ? this.getIconLeft : this.getIconRight;
    },
    _renderButton: function _renderButton(h, direction) {
      if (typeof this.$slots.operation === "function") {
        return this.$slots.operation({
          direction: direction
        });
      }

      if (typeof this.operation === "function") {
        var renderContent2 = this.operation;
        return renderContent2(h, {
          direction: direction
        });
      }

      var renderContent;

      if (Array.isArray(this.operation)) {
        var _this$operation = _slicedToArray(this.operation, 2),
            left = _this$operation[0],
            right = _this$operation[1];

        renderContent = direction === "right" ? right : left;
      } else {
        renderContent = "";
      }

      return renderContent;
    }
  },
  render: function render(h) {
    var _slot, _slot2;

    var _this$$props = this.$props,
        leftDisabled = _this$$props.leftDisabled,
        rightDisabled = _this$$props.rightDisabled;
    return createVNode("div", {
      "class": "".concat(prefix, "-transfer__operations")
    }, [createVNode(resolveComponent("t-button"), {
      "variant": rightDisabled ? "outline" : "base",
      "key": rightDisabled ? "right-outline" : "right-base",
      "disabled": rightDisabled,
      "onClick": this.moveToRight,
      "icon": this.getIcon("right")
    }, _isSlot(_slot = this._renderButton(h, "right")) ? _slot : {
      "default": function _default() {
        return [_slot];
      }
    }), createVNode(resolveComponent("t-button"), {
      "variant": leftDisabled ? "outline" : "base",
      "key": rightDisabled ? "left-outline" : "left-base",
      "disabled": leftDisabled,
      "onClick": this.moveToLeft,
      "icon": this.getIcon("left")
    }, _isSlot(_slot2 = this._renderButton(h, "left")) ? _slot2 : {
      "default": function _default() {
        return [_slot2];
      }
    })]);
  }
});

export { TransferOperations as default };
//# sourceMappingURL=transfer-operations.js.map
