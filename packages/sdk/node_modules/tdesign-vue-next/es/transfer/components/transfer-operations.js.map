{"version":3,"file":"transfer-operations.js","sources":["../../../src/transfer/components/transfer-operations.tsx"],"sourcesContent":["import { defineComponent, createElementVNode, PropType } from 'vue';\nimport { ChevronRightIcon, ChevronLeftIcon } from 'tdesign-icons-vue-next';\nimport { prefix } from '../../config';\nimport TButton from '../../button';\nimport { TNode } from '../../common';\n\nexport default defineComponent({\n  name: 'TTransferOperations',\n  components: {\n    TButton,\n  },\n  props: {\n    // 控制左按钮的禁用与否\n    leftDisabled: {\n      type: Boolean,\n      required: true,\n    },\n    // 控制右按钮的禁用与否\n    rightDisabled: {\n      type: Boolean,\n      required: true,\n    },\n    operation: {\n      type: [String, Array, Function, Boolean] as PropType<\n        Array<string | TNode> | TNode<{ direction: 'left' | 'right' }>\n      >,\n    },\n  },\n  emits: ['moveToRight', 'moveToLeft'],\n  methods: {\n    moveToRight() {\n      this.$emit('moveToRight');\n    },\n    moveToLeft() {\n      this.$emit('moveToLeft');\n    },\n    getIconRight() {\n      return <ChevronRightIcon />;\n    },\n    getIconLeft() {\n      return <ChevronLeftIcon />;\n    },\n    getIcon(direction: 'left' | 'right') {\n      if (typeof this.operation === 'function') {\n        return null;\n      }\n      if (direction === 'right' && this.operation && typeof this.operation[0] === 'function') {\n        return null;\n      }\n      if (direction === 'left' && this.operation && typeof this.operation[1] === 'function') {\n        return null;\n      }\n\n      if (this.$slots.operation) {\n        return null;\n      }\n\n      return direction === 'left' ? this.getIconLeft : this.getIconRight;\n    },\n    // right:去右边，left:去左边\n    _renderButton(h: typeof createElementVNode, direction: 'left' | 'right') {\n      if (typeof this.$slots.operation === 'function') {\n        return this.$slots.operation({\n          direction,\n        });\n      }\n      if (typeof this.operation === 'function') {\n        const renderContent = this.operation;\n        return renderContent(h as any, { direction });\n      }\n      let renderContent: string | TNode;\n      if (Array.isArray(this.operation)) {\n        const [left, right] = this.operation;\n        renderContent = direction === 'right' ? right : left;\n      } else {\n        renderContent = '';\n      }\n      return renderContent;\n    },\n  },\n  render(h: any) {\n    const { leftDisabled, rightDisabled } = this.$props;\n    return (\n      <div class={`${prefix}-transfer__operations`}>\n        <t-button\n          variant={rightDisabled ? 'outline' : 'base'}\n          key={rightDisabled ? 'right-outline' : 'right-base'}\n          disabled={rightDisabled}\n          onClick={this.moveToRight}\n          icon={this.getIcon('right')}\n        >\n          {this._renderButton(h, 'right')}\n        </t-button>\n        <t-button\n          variant={leftDisabled ? 'outline' : 'base'}\n          key={rightDisabled ? 'left-outline' : 'left-base'}\n          disabled={leftDisabled}\n          onClick={this.moveToLeft}\n          icon={this.getIcon('left')}\n        >\n          {this._renderButton(h, 'left')}\n        </t-button>\n      </div>\n    );\n  },\n});\n"],"names":["defineComponent","name","components","TButton","props","leftDisabled","type","Boolean","required","rightDisabled","operation","String","Array","Function","emits","methods","moveToRight","$emit","moveToLeft","getIconRight","getIconLeft","getIcon","direction","$slots","_renderButton","h","renderContent2","renderContent","isArray","left","right","render","$props","prefix"],"mappings":"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"}