/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { isVNode, defineComponent, createVNode, mergeProps } from 'vue';
import { ChevronRightIcon } from 'tdesign-icons-vue-next';
import { prefix } from '../config.js';
import props from './breadcrumb-item-props.js';
import { Tooltip } from '../tooltip/index.js';
import { isNodeOverflow } from '../utils/dom.js';
import { emitEvent } from '../utils/event.js';
import { getPropsApiByEvent } from '../utils/helper.js';
import '../tooltip/tooltip.js';
import '../tooltip/props.js';
import '../popup/props.js';
import '../popup/index.js';
import '../popup/popup.js';
import '@babel/runtime/helpers/typeof';
import '@popperjs/core';
import '../_chunks/dep-b66bfe36.js';
import '../utils/classnames.js';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isFunction';
import 'lodash/isObject';
import '../utils/set-style.js';
import '../utils/map-props.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/kebabCase';
import '../utils/withInstall.js';
import './style/css.js';
import '../popup/type.js';
import '../utils/easing.js';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';
import '../tooltip/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}

var separatorClass = "".concat(prefix, "-breadcrumb__separator");
var disableClass = "".concat(prefix, "-disabled");
var linkClass = "".concat(prefix, "-link");
var maxLengthClass = "".concat(prefix, "-breadcrumb__inner");
var textFlowClass = "".concat(prefix, "-breadcrumb--text-overflow");
var EVENT_NAME_WITH_KEBAB = ["click"];
var localTBreadcrumbOrigin = {
  separator: "",
  theme: "light",
  $slots: {
    separator: ""
  },
  maxItemWidth: void 0
};

var isEventProps = function isEventProps(propName) {
  var pre = /on[A-Z].+/;
  return pre.test(propName);
};

var _BreadcrumbItem = defineComponent({
  name: "TBreadcrumbItem",
  components: {
    Tooltip: Tooltip
  },
  inject: ["tBreadcrumb"],
  props: _objectSpread({}, props),
  emits: ["click"],
  data: function data() {
    return {
      localTBreadcrumb: localTBreadcrumbOrigin,
      themeClassName: "",
      $router: null,
      isCutOff: false
    };
  },
  computed: {
    maxWithStyle: function maxWithStyle() {
      var localTBreadcrumb = this.localTBreadcrumb;
      var maxItemWidth = localTBreadcrumb.maxItemWidth;
      var maxWith = this.maxWidth || maxItemWidth || "120";
      return {
        maxWidth: "".concat(maxWith, "px")
      };
    }
  },
  watch: {
    tBreadcrumb: {
      immediate: true,
      handler: function handler(v) {
        this.localTBreadcrumb = v;
      }
    }
  },
  created: function created() {
    var tBreadcrumb = this.localTBreadcrumb;
    this.themeClassName = tBreadcrumb.theme;
  },
  mounted: function mounted() {
    this.isCutOff = isNodeOverflow(this.$refs.breadcrumbText);
  },
  beforeUpdate: function beforeUpdate() {
    this.isCutOff = isNodeOverflow(this.$refs.breadcrumbText);
  },
  methods: {
    bindEvent: function bindEvent(e) {
      if (!this.href || !this.disabled) {
        e.preventDefault();
        var to = this.to;
        var router = this.router || this.$router;

        if (to && router) {
          this.replace ? router.replace(to) : router.push(to);
        }
      }
    }
  },
  render: function render() {
    var _this = this;

    var localTBreadcrumb = this.localTBreadcrumb,
        maxWithStyle = this.maxWithStyle;
    var separatorPropContent = localTBreadcrumb.separator;
    var separatorSlot = localTBreadcrumb.$slots.separator;

    var separatorContent = separatorPropContent || separatorSlot || createVNode(ChevronRightIcon, {
      color: "rgba(0,0,0,.3)"
    }, null);

    var itemClass = ["".concat(prefix, "-breadcrumb__item"), this.themeClassName];
    var textClass = [textFlowClass];

    if (this.disabled) {
      textClass.push(disableClass);
    }

    var listeners = {};
    EVENT_NAME_WITH_KEBAB.forEach(function (eventName) {
      listeners[getPropsApiByEvent(eventName)] = function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        emitEvent.apply(void 0, [_this, eventName].concat(args));
      };
    });

    var textContent = createVNode("span", mergeProps({
      "ref": "breadcrumbText"
    }, {
      "class": maxLengthClass,
      style: maxWithStyle
    }), [this.$slots["default"]()]);

    var itemContent = createVNode("span", _objectSpread({
      "class": textClass
    }, listeners), [textContent]);

    if ((this.href || this.to) && !this.disabled) {
      textClass.push(linkClass);
      itemContent = createVNode("a", mergeProps({
        "class": textClass,
        "href": this.href,
        "target": this.target
      }, listeners, {
        "onClick": this.bindEvent
      }), [textContent]);
    }

    return createVNode("div", mergeProps({
      "class": itemClass
    }, this.$attrs), [this.isCutOff ? createVNode(Tooltip, {
      "content": function content() {
        return _this.$slots["default"]();
      }
    }, _isSlot(itemContent) ? itemContent : {
      "default": function _default() {
        return [itemContent];
      }
    }) : itemContent, createVNode("span", {
      "class": separatorClass
    }, [typeof separatorContent === "function" ? separatorContent() : separatorContent])]);
  }
});

export { EVENT_NAME_WITH_KEBAB, _BreadcrumbItem as default };
//# sourceMappingURL=breadcrumb-item.js.map
