import { ComponentPublicInstance } from 'vue';
import { BaseTableCol, RenderType, TdPrimaryTableProps } from '../type';
export declare type CustomRenderName = 'title' | 'cell' | 'render';
export declare type CustomData = {
    type: RenderType;
    func: CustomRenderName;
};
export interface TdInstance extends ComponentPublicInstance {
    cellData?: {
        type: string;
        col: BaseTableCol;
        colIndex: number;
        row?: Record<string, any>;
        rowIndex?: number;
        customData: CustomData;
        customRender: () => void;
    };
}
export interface CellParams {
    col: BaseTableCol;
    colIndex: number;
    row?: Record<string, any>;
    rowIndex?: number;
    record?: Record<string, any>;
}
export interface CellData {
    type: string;
    col: BaseTableCol;
    colIndex: number;
    row?: Record<string, any>;
    rowIndex?: number;
    customData: CustomData;
    customRender: () => void;
    withBorder?: boolean;
    withoutBorder?: boolean;
}
export declare const EVENT_NAME_WITH_KEBAB: string[];
export declare const ExpandProps: {
    expandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    expandedRow: {
        type: import("vue").PropType<import("../../common").TNode<{
            row: import("../type").TableRowData;
            index: number;
        }>>;
    };
};
export declare type RenderExpandRow = {
    row: any;
    rows: any;
    rowIndex: number;
    columns: TdPrimaryTableProps['columns'];
};
