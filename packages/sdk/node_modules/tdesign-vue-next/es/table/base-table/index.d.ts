import { VNode } from 'vue';
import { ClassName } from '../../common';
import { DataType, BaseTableCol } from '../type';
declare const _default: import("vue").DefineComponent<Readonly<import("vue").ComponentPropsOptions<{
    [x: string]: unknown;
}>>, {
    scrollType: any;
    rowHeight: any;
    trs: Map<any, any>;
    bufferSize: any;
    scrollBody: any;
    scrollHeight: import("vue").ComputedRef<any>;
    visibleData: import("vue").Ref<any[]>;
    translateY: import("vue").ComputedRef<any>;
    handleRowMounted: () => void;
    handleVirtualScroll: () => void;
}, {
    scrollableToLeft: boolean;
    scrollableToRight: boolean;
    scrollBarWidth: number;
    defaultCurrent: number;
    defaultPageSize: number;
    useFixedHeader: boolean;
}, {
    current(): number;
    pageSize(): number;
    dataSource(): Array<DataType>;
    flattedColumns(): Array<BaseTableCol>;
    isEmpty(): boolean;
    hasFixedColumns(): boolean;
    hasPagination(): boolean;
    isLoading(): boolean;
    tableHeight(): number | string;
    fixedHeader(): boolean;
    commonClass(): ClassName;
    usePadding(): boolean;
}, {
    checkScrollableToLeftOrRight(): void;
    addWindowResizeEventListener(): void;
    renderHeader(): VNode;
    renderBody(): VNode;
    renderEmptyTable(): VNode;
    renderPagination(): VNode;
    renderTableWithFixedHeader(): Array<VNode>;
    renderLoadingContent(): VNode;
    renderFooter(): JSX.Element;
    handleScroll(e: WheelEvent): void;
    checkMaxHeight(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<readonly string[] | import("vue").ExtractPropTypes<Readonly<import("vue").ComponentObjectPropsOptions<{
    [x: string]: unknown;
}>>>> & {
    [x: string & `on${string}`]: (...args: any[]) => any;
}, {
    [x: number]: string;
} | {}>;
export default _default;
