import { TdPrimaryTableProps, TableRowState, TableRowValue, PrimaryTableCellParams, TableRowData, TableTreeConfig } from '../type';
import TableTreeStore, { KeysType } from './tree-store';
declare const _default: import("vue").DefineComponent<{
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    data: {
        type: import("vue").PropType<TableRowData[]>;
        default: () => TableRowData[];
    };
    columns: {
        type: import("vue").PropType<import("../type").PrimaryTableCol<TableRowData>[]>;
        default: () => import("../type").PrimaryTableCol<TableRowData>[];
    };
    tree: {
        type: import("vue").PropType<TableTreeConfig>;
    };
}, unknown, {
    store: TableTreeStore<TableRowData>;
    dataSource: any[];
}, {
    rowDataKeys(): KeysType;
    childrenKey(): string;
    columnsSource(): TdPrimaryTableProps['columns'];
}, {
    getTreeNodeStyle(level: number): {
        paddingLeft: string;
    };
    toggleExpandData(p: PrimaryTableCellParams<TableRowData>): void;
    setData<T>(key: TableRowValue, newRowData: T): void;
    getData(key: TableRowValue): TableRowState;
    remove(key: TableRowValue): void;
    appendTo<T_1>(key: TableRowValue, newData: T_1): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    data: {
        type: import("vue").PropType<TableRowData[]>;
        default: () => TableRowData[];
    };
    columns: {
        type: import("vue").PropType<import("../type").PrimaryTableCol<TableRowData>[]>;
        default: () => import("../type").PrimaryTableCol<TableRowData>[];
    };
    tree: {
        type: import("vue").PropType<TableTreeConfig>;
    };
}>>, {
    data: TableRowData[];
    columns: import("../type").PrimaryTableCol<TableRowData>[];
    rowKey: string;
}>;
export default _default;
