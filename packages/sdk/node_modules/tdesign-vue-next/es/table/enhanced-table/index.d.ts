declare const _default: import("vue").DefineComponent<{
    tree: {
        type: import("vue").PropType<import("../type").TableTreeConfig>;
    };
    asyncLoading: {
        type: import("vue").PropType<"loading" | import("../../common").TNode<any> | "load-more">;
    };
    columns: {
        type: import("vue").PropType<import("../type").PrimaryTableCol<import("../type").TableRowData>[]>;
        default: () => import("../type").PrimaryTableCol<import("../type").TableRowData>[];
    };
    dragSort: BooleanConstructor;
    expandedRow: {
        type: import("vue").PropType<import("../../common").TNode<{
            row: import("../type").TableRowData;
            index: number;
        }>>;
    };
    expandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    expandIcon: {
        type: import("vue").PropType<import("../../common").TNode<import("../type").ExpandArrowRenderParams<import("../type").TableRowData>>>;
        default: boolean;
    };
    expandOnRowClick: BooleanConstructor;
    filterIcon: {
        type: import("vue").PropType<import("../../common").TNode<any>>;
    };
    filterRow: {
        type: import("vue").PropType<string | import("../../common").TNode<any>>;
    };
    filterValue: {
        type: import("vue").PropType<import("../type").FilterValue>;
    };
    defaultFilterValue: {
        type: import("vue").PropType<import("../type").FilterValue>;
    };
    multipleSort: BooleanConstructor;
    selectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    defaultSelectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    showColumnController: BooleanConstructor;
    showDragCol: BooleanConstructor;
    sort: {
        type: import("vue").PropType<import("../type").TableSort>;
    };
    defaultSort: {
        type: import("vue").PropType<import("../type").TableSort>;
    };
    sortOnRowDraggable: BooleanConstructor;
    onAsyncLoadingClick: import("vue").PropType<(context: {
        status: "loading" | "load-more";
    }) => void>;
    onCellClick: import("vue").PropType<(context: import("../type").PrimaryTableCellEventContext<import("../type").TableRowData>) => void>;
    onChange: import("vue").PropType<(data: import("../type").TableChangeData, context: import("../type").TableChangeContext<import("../type").TableRowData[]>) => void>;
    onDataChange: import("vue").PropType<(data: import("../type").TableRowData[]) => void>;
    onDragSort: import("vue").PropType<(context: import("../type").DragSortContext<import("../type").TableRowData>) => void>;
    onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("../type").ExpandOptions<import("../type").TableRowData>) => void>;
    onFilterChange: import("vue").PropType<(filterValue: import("../type").FilterValue, context: {
        col?: import("../type").PrimaryTableCol<import("../type").TableRowData>;
    }) => void>;
    onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("../type").SelectOptions<import("../type").TableRowData>) => void>;
    onSortChange: import("vue").PropType<(sort: import("../type").TableSort, options: import("../type").SortOptions<import("../type").TableRowData>) => void>;
    bordered: BooleanConstructor;
    data: {
        type: import("vue").PropType<import("../type").TableRowData[]>;
        default: () => import("../type").TableRowData[];
    };
    disableDataSort: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | import("../../common").TNode<any>>;
        default: string;
    };
    firstFullRow: {
        type: import("vue").PropType<string | import("../../common").TNode<any>>;
    };
    height: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    hover: BooleanConstructor;
    lastFullRow: {
        type: import("vue").PropType<string | import("../../common").TNode<any>>;
    };
    loading: {
        type: import("vue").PropType<boolean | import("../../common").TNode<any>>;
        default: boolean;
    };
    maxHeight: {
        type: import("vue").PropType<string | number>;
    };
    pagination: {
        type: import("vue").PropType<import("../..").TdPaginationProps>;
    };
    rowClassName: {
        type: import("vue").PropType<import("../../common").ClassName | ((params: {
            row: import("../type").TableRowData;
            rowIndex: number;
        }) => import("../../common").ClassName)>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<(params: import("../type").RowspanAndColspanParams<import("../type").TableRowData>) => import("../type").RowspanColspan>;
    };
    scroll: {
        type: import("vue").PropType<import("../type").TableScroll>;
    };
    size: {
        type: import("vue").PropType<import("../../common").SizeEnum>;
        default: import("../../common").SizeEnum;
        validator(val: import("../../common").SizeEnum): boolean;
    };
    stripe: BooleanConstructor;
    tableLayout: {
        type: import("vue").PropType<"fixed" | "auto">;
        default: "fixed" | "auto";
        validator(val: "fixed" | "auto"): boolean;
    };
    topContent: {
        type: import("vue").PropType<string | import("../../common").TNode<any>>;
    };
    verticalAlign: {
        type: import("vue").PropType<"top" | "bottom" | "middle">;
        default: "top" | "bottom" | "middle";
        validator(val: "top" | "bottom" | "middle"): boolean;
    };
    onPageChange: import("vue").PropType<(pageInfo: import("../..").PageInfo, newDataSource: import("../type").TableRowData[]) => void>;
    onRowClick: import("vue").PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowDbClick: import("vue").PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowHover: import("vue").PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowMousedown: import("vue").PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowMouseenter: import("vue").PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowMouseleave: import("vue").PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowMouseup: import("vue").PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onScrollX: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollY: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
}, unknown, {
    dataSource: any[];
}, {
    childrenKey(): string;
}, {}, import("vue").DefineComponent<{
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    data: {
        type: import("vue").PropType<import("../type").TableRowData[]>;
        default: () => import("../type").TableRowData[];
    };
    columns: {
        type: import("vue").PropType<import("../type").PrimaryTableCol<import("../type").TableRowData>[]>;
        default: () => import("../type").PrimaryTableCol<import("../type").TableRowData>[];
    };
    tree: {
        type: import("vue").PropType<import("../type").TableTreeConfig>;
    };
}, unknown, {
    store: import("./tree-store").default<import("../type").TableRowData>;
    dataSource: any[];
}, {
    rowDataKeys(): import("./tree-store").KeysType;
    childrenKey(): string;
    columnsSource(): import("../type").PrimaryTableCol<import("../type").TableRowData>[];
}, {
    getTreeNodeStyle(level: number): {
        paddingLeft: string;
    };
    toggleExpandData(p: import("../type").PrimaryTableCellParams<import("../type").TableRowData>): void;
    setData<T>(key: import("../type").TableRowValue, newRowData: T): void;
    getData(key: import("../type").TableRowValue): import("../type").TableRowState<import("../type").TableRowData>;
    remove(key: import("../type").TableRowValue): void;
    appendTo<T_1>(key: import("../type").TableRowValue, newData: T_1): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    data: {
        type: import("vue").PropType<import("../type").TableRowData[]>;
        default: () => import("../type").TableRowData[];
    };
    columns: {
        type: import("vue").PropType<import("../type").PrimaryTableCol<import("../type").TableRowData>[]>;
        default: () => import("../type").PrimaryTableCol<import("../type").TableRowData>[];
    };
    tree: {
        type: import("vue").PropType<import("../type").TableTreeConfig>;
    };
}>>, {
    data: import("../type").TableRowData[];
    columns: import("../type").PrimaryTableCol<import("../type").TableRowData>[];
    rowKey: string;
}> | import("vue").DefineComponent<{
    data: {
        type: import("vue").PropType<import("../type").TableRowData[]>;
        default: () => import("../type").TableRowData[];
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    columns: {
        type: import("vue").PropType<import("../type").PrimaryTableCol<import("../type").TableRowData>[]>;
        default: () => import("../type").PrimaryTableCol<import("../type").TableRowData>[];
    };
    tree: {
        type: import("vue").PropType<import("../type").TableTreeConfig>;
    };
}, unknown, {
    dataSource: import("../type").TableRowData[];
    store: import("./tree-store").default<import("../type").TableRowData>;
}, {
    childrenKey(): string;
    rowDataKeys(): import("./tree-store").KeysType;
}, {
    onInnerSelectChange(rowKeys: (string | number)[], extraData: import("../type").SelectOptions<import("../type").TableRowData>): void;
    handleSelectAll(extraData: import("../type").SelectOptions<import("../type").TableRowData>): void;
    handleSelect(rowKeys: (string | number)[], extraData: import("../type").SelectOptions<import("../type").TableRowData>): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:selectedRowKeys"[], "update:selectedRowKeys", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    data: {
        type: import("vue").PropType<import("../type").TableRowData[]>;
        default: () => import("../type").TableRowData[];
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    columns: {
        type: import("vue").PropType<import("../type").PrimaryTableCol<import("../type").TableRowData>[]>;
        default: () => import("../type").PrimaryTableCol<import("../type").TableRowData>[];
    };
    tree: {
        type: import("vue").PropType<import("../type").TableTreeConfig>;
    };
}>> & {
    "onUpdate:selectedRowKeys"?: (...args: any[]) => any;
}, {
    data: import("../type").TableRowData[];
    columns: import("../type").PrimaryTableCol<import("../type").TableRowData>[];
    rowKey: string;
}>, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    tree: {
        type: import("vue").PropType<import("../type").TableTreeConfig>;
    };
    asyncLoading: {
        type: import("vue").PropType<"loading" | import("../../common").TNode<any> | "load-more">;
    };
    columns: {
        type: import("vue").PropType<import("../type").PrimaryTableCol<import("../type").TableRowData>[]>;
        default: () => import("../type").PrimaryTableCol<import("../type").TableRowData>[];
    };
    dragSort: BooleanConstructor;
    expandedRow: {
        type: import("vue").PropType<import("../../common").TNode<{
            row: import("../type").TableRowData;
            index: number;
        }>>;
    };
    expandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    expandIcon: {
        type: import("vue").PropType<import("../../common").TNode<import("../type").ExpandArrowRenderParams<import("../type").TableRowData>>>;
        default: boolean;
    };
    expandOnRowClick: BooleanConstructor;
    filterIcon: {
        type: import("vue").PropType<import("../../common").TNode<any>>;
    };
    filterRow: {
        type: import("vue").PropType<string | import("../../common").TNode<any>>;
    };
    filterValue: {
        type: import("vue").PropType<import("../type").FilterValue>;
    };
    defaultFilterValue: {
        type: import("vue").PropType<import("../type").FilterValue>;
    };
    multipleSort: BooleanConstructor;
    selectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    defaultSelectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    showColumnController: BooleanConstructor;
    showDragCol: BooleanConstructor;
    sort: {
        type: import("vue").PropType<import("../type").TableSort>;
    };
    defaultSort: {
        type: import("vue").PropType<import("../type").TableSort>;
    };
    sortOnRowDraggable: BooleanConstructor;
    onAsyncLoadingClick: import("vue").PropType<(context: {
        status: "loading" | "load-more";
    }) => void>;
    onCellClick: import("vue").PropType<(context: import("../type").PrimaryTableCellEventContext<import("../type").TableRowData>) => void>;
    onChange: import("vue").PropType<(data: import("../type").TableChangeData, context: import("../type").TableChangeContext<import("../type").TableRowData[]>) => void>;
    onDataChange: import("vue").PropType<(data: import("../type").TableRowData[]) => void>;
    onDragSort: import("vue").PropType<(context: import("../type").DragSortContext<import("../type").TableRowData>) => void>;
    onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("../type").ExpandOptions<import("../type").TableRowData>) => void>;
    onFilterChange: import("vue").PropType<(filterValue: import("../type").FilterValue, context: {
        col?: import("../type").PrimaryTableCol<import("../type").TableRowData>;
    }) => void>;
    onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("../type").SelectOptions<import("../type").TableRowData>) => void>;
    onSortChange: import("vue").PropType<(sort: import("../type").TableSort, options: import("../type").SortOptions<import("../type").TableRowData>) => void>;
    bordered: BooleanConstructor;
    data: {
        type: import("vue").PropType<import("../type").TableRowData[]>;
        default: () => import("../type").TableRowData[];
    };
    disableDataSort: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | import("../../common").TNode<any>>;
        default: string;
    };
    firstFullRow: {
        type: import("vue").PropType<string | import("../../common").TNode<any>>;
    };
    height: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    hover: BooleanConstructor;
    lastFullRow: {
        type: import("vue").PropType<string | import("../../common").TNode<any>>;
    };
    loading: {
        type: import("vue").PropType<boolean | import("../../common").TNode<any>>;
        default: boolean;
    };
    maxHeight: {
        type: import("vue").PropType<string | number>;
    };
    pagination: {
        type: import("vue").PropType<import("../..").TdPaginationProps>;
    };
    rowClassName: {
        type: import("vue").PropType<import("../../common").ClassName | ((params: {
            row: import("../type").TableRowData;
            rowIndex: number;
        }) => import("../../common").ClassName)>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<(params: import("../type").RowspanAndColspanParams<import("../type").TableRowData>) => import("../type").RowspanColspan>;
    };
    scroll: {
        type: import("vue").PropType<import("../type").TableScroll>;
    };
    size: {
        type: import("vue").PropType<import("../../common").SizeEnum>;
        default: import("../../common").SizeEnum;
        validator(val: import("../../common").SizeEnum): boolean;
    };
    stripe: BooleanConstructor;
    tableLayout: {
        type: import("vue").PropType<"fixed" | "auto">;
        default: "fixed" | "auto";
        validator(val: "fixed" | "auto"): boolean;
    };
    topContent: {
        type: import("vue").PropType<string | import("../../common").TNode<any>>;
    };
    verticalAlign: {
        type: import("vue").PropType<"top" | "bottom" | "middle">;
        default: "top" | "bottom" | "middle";
        validator(val: "top" | "bottom" | "middle"): boolean;
    };
    onPageChange: import("vue").PropType<(pageInfo: import("../..").PageInfo, newDataSource: import("../type").TableRowData[]) => void>;
    onRowClick: import("vue").PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowDbClick: import("vue").PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowHover: import("vue").PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowMousedown: import("vue").PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowMouseenter: import("vue").PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowMouseleave: import("vue").PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onRowMouseup: import("vue").PropType<(context: import("../type").RowEventContext<import("../type").TableRowData>) => void>;
    onScrollX: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollY: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
}>>, {
    data: import("../type").TableRowData[];
    height: string | number;
    columns: import("../type").PrimaryTableCol<import("../type").TableRowData>[];
    tableLayout: "fixed" | "auto";
    verticalAlign: "top" | "bottom" | "middle";
    loading: boolean | import("../../common").TNode<any>;
    size: import("../../common").SizeEnum;
    hover: boolean;
    empty: string | import("../../common").TNode<any>;
    bordered: boolean;
    dragSort: boolean;
    stripe: boolean;
    disableDataSort: boolean;
    rowKey: string;
    expandedRowKeys: (string | number)[];
    defaultExpandedRowKeys: (string | number)[];
    expandIcon: import("../../common").TNode<import("../type").ExpandArrowRenderParams<import("../type").TableRowData>>;
    sortOnRowDraggable: boolean;
    expandOnRowClick: boolean;
    multipleSort: boolean;
    showColumnController: boolean;
    showDragCol: boolean;
}>;
export default _default;
