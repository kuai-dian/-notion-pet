/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, h, createVNode } from 'vue';
import isFunction from 'lodash/isFunction';
import { ChevronRightCircleIcon } from 'tdesign-icons-vue-next';
import mixins from '../../utils/mixins.js';
import getConfigReceiverMixins from '../../config-provider/config-receiver.js';
import { prefix } from '../../config.js';
import primaryTableProps from '../primary-table-props.js';
import { renderTNodeJSX } from '../../utils/render-tnode.js';
import { emitEvent } from '../../utils/event.js';
import '../../config-provider/zh_CN_config.js';
import '../../config-provider/type.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';
import '../../utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var ExpandBox = defineComponent(_objectSpread(_objectSpread({}, mixins(getConfigReceiverMixins("table"))), {}, {
  name: "".concat(prefix, "-expand-box"),
  components: {
    ChevronRightCircleIcon: ChevronRightCircleIcon
  },
  props: {
    expanded: {
      type: Boolean,
      "default": false
    },
    row: {
      type: Object
    },
    rowIndex: {
      type: Number
    },
    expandIcon: primaryTableProps.expandIcon
  },
  emits: ["click"],
  methods: {
    getDefaultIcon: function getDefaultIcon() {
      return isFunction(this.global.expandIcon) ? this.global.expandIcon(h) : createVNode(ChevronRightCircleIcon, null, null);
    },
    getExpandIcon: function getExpandIcon(expanded) {
      var style = {
        transition: "transform .2s",
        display: "flex",
        "align-items": "center"
      };
      var icon = renderTNodeJSX(this, "expandIcon", {
        params: {
          row: this.row,
          index: this.rowIndex
        },
        defaultNode: this.getDefaultIcon()
      });

      if (expanded) {
        style.transform = "rotate(90deg)";
      }

      if (!icon) return false;
      return createVNode("span", {
        "style": style
      }, [icon]);
    },
    handleClick: function handleClick(e) {
      emitEvent(this, "click", e);
    }
  },
  render: function render() {
    var expanded = this.expanded;
    var icon = this.getExpandIcon(expanded);
    if (!icon) return null;
    return createVNode("span", {
      "class": "".concat(prefix, "-table__expand-box"),
      "onClick": this.handleClick
    }, [icon]);
  }
}));

export { ExpandBox as default };
//# sourceMappingURL=expand-box.js.map
