import { VNode } from 'vue';
import { TdPrimaryTableProps } from '../../type';
declare const _default: import("vue").DefineComponent<{
    expandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    expandedRow: {
        type: import("vue").PropType<import("../../../common").TNode<{
            row: import("../../type").TableRowData;
            index: number;
        }>>;
    };
    data: {
        type: import("vue").PropType<import("../../type").TableRowData[]>;
        default: () => import("../../type").TableRowData[];
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
}, unknown, unknown, {
    reRowKey(): string;
}, {
    getExpandRowHandler(): TdPrimaryTableProps['expandedRow'];
    getExpandColumns(columns: import("../../type").PrimaryTableCol<import("../../type").TableRowData>[]): import("../../type").PrimaryTableCol<import("../../type").TableRowData>[];
    renderExpandIconCell({ row, rowIndex }: Record<string, any>): VNode;
    renderExpandedRow(params: Parameters<TdPrimaryTableProps['expandedRow']>[1]): ReturnType<TdPrimaryTableProps['expandedRow']>;
    handleExpandChange(record?: Record<string, any>): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "expand-change"[], "expand-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    expandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    expandedRow: {
        type: import("vue").PropType<import("../../../common").TNode<{
            row: import("../../type").TableRowData;
            index: number;
        }>>;
    };
    data: {
        type: import("vue").PropType<import("../../type").TableRowData[]>;
        default: () => import("../../type").TableRowData[];
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
}>> & {
    "onExpand-change"?: (...args: any[]) => any;
}, {
    data: import("../../type").TableRowData[];
    rowKey: string;
    expandedRowKeys: (string | number)[];
}>;
export default _default;
