import { PrimaryTableCol, RowEventContext } from '../type';
import { PageInfo } from '../../pagination/type';
declare const _default: import("vue").DefineComponent<{
    asyncLoading: {
        type: import("vue").PropType<"loading" | import("../../common").TNode<any> | "load-more">;
    };
    columns: {
        type: import("vue").PropType<PrimaryTableCol<import("../type").TableRowData>[]>;
        default: () => PrimaryTableCol<import("../type").TableRowData>[];
    };
    dragSort: BooleanConstructor;
    expandedRow: {
        type: import("vue").PropType<import("../../common").TNode<{
            row: import("../type").TableRowData;
            index: number;
        }>>;
    };
    expandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    expandIcon: {
        type: import("vue").PropType<import("../../common").TNode<import("../type").ExpandArrowRenderParams<import("../type").TableRowData>>>;
        default: boolean;
    };
    expandOnRowClick: BooleanConstructor;
    filterIcon: {
        type: import("vue").PropType<import("../../common").TNode<any>>;
    };
    filterRow: {
        type: import("vue").PropType<string | import("../../common").TNode<any>>;
    };
    filterValue: {
        type: import("vue").PropType<import("../type").FilterValue>;
    };
    defaultFilterValue: {
        type: import("vue").PropType<import("../type").FilterValue>;
    };
    multipleSort: BooleanConstructor;
    selectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    defaultSelectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    showColumnController: BooleanConstructor;
    showDragCol: BooleanConstructor;
    sort: {
        type: import("vue").PropType<import("../type").TableSort>;
    };
    defaultSort: {
        type: import("vue").PropType<import("../type").TableSort>;
    };
    sortOnRowDraggable: BooleanConstructor;
    onAsyncLoadingClick: import("vue").PropType<(context: {
        status: "loading" | "load-more";
    }) => void>;
    onCellClick: import("vue").PropType<(context: import("../type").PrimaryTableCellEventContext<import("../type").TableRowData>) => void>;
    onChange: import("vue").PropType<(data: import("../type").TableChangeData, context: import("../type").TableChangeContext<import("../type").TableRowData[]>) => void>;
    onDataChange: import("vue").PropType<(data: import("../type").TableRowData[]) => void>;
    onDragSort: import("vue").PropType<(context: import("../type").DragSortContext<import("../type").TableRowData>) => void>;
    onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("../type").ExpandOptions<import("../type").TableRowData>) => void>;
    onFilterChange: import("vue").PropType<(filterValue: import("../type").FilterValue, context: {
        col?: PrimaryTableCol<import("../type").TableRowData>;
    }) => void>;
    onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("../type").SelectOptions<import("../type").TableRowData>) => void>;
    onSortChange: import("vue").PropType<(sort: import("../type").TableSort, options: import("../type").SortOptions<import("../type").TableRowData>) => void>;
    bordered: BooleanConstructor;
    data: {
        type: import("vue").PropType<import("../type").TableRowData[]>;
        default: () => import("../type").TableRowData[];
    };
    disableDataSort: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | import("../../common").TNode<any>>;
        default: string;
    };
    firstFullRow: {
        type: import("vue").PropType<string | import("../../common").TNode<any>>;
    };
    height: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    hover: BooleanConstructor;
    lastFullRow: {
        type: import("vue").PropType<string | import("../../common").TNode<any>>;
    };
    loading: {
        type: import("vue").PropType<boolean | import("../../common").TNode<any>>;
        default: boolean;
    };
    maxHeight: {
        type: import("vue").PropType<string | number>;
    };
    pagination: {
        type: import("vue").PropType<import("../../pagination/type").TdPaginationProps>;
    };
    rowClassName: {
        type: import("vue").PropType<import("../../common").ClassName | ((params: {
            row: import("../type").TableRowData;
            rowIndex: number;
        }) => import("../../common").ClassName)>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<(params: import("../type").RowspanAndColspanParams<import("../type").TableRowData>) => import("../type").RowspanColspan>;
    };
    scroll: {
        type: import("vue").PropType<import("../type").TableScroll>;
    };
    size: {
        type: import("vue").PropType<import("../../common").SizeEnum>;
        default: import("../../common").SizeEnum;
        validator(val: import("../../common").SizeEnum): boolean;
    };
    stripe: BooleanConstructor;
    tableLayout: {
        type: import("vue").PropType<"fixed" | "auto">;
        default: "fixed" | "auto";
        validator(val: "fixed" | "auto"): boolean;
    };
    topContent: {
        type: import("vue").PropType<string | import("../../common").TNode<any>>;
    };
    verticalAlign: {
        type: import("vue").PropType<"top" | "bottom" | "middle">;
        default: "top" | "bottom" | "middle";
        validator(val: "top" | "bottom" | "middle"): boolean;
    };
    onPageChange: import("vue").PropType<(pageInfo: PageInfo, newDataSource: import("../type").TableRowData[]) => void>;
    onRowClick: import("vue").PropType<(context: RowEventContext<import("../type").TableRowData>) => void>;
    onRowDbClick: import("vue").PropType<(context: RowEventContext<import("../type").TableRowData>) => void>;
    onRowHover: import("vue").PropType<(context: RowEventContext<import("../type").TableRowData>) => void>;
    onRowMousedown: import("vue").PropType<(context: RowEventContext<import("../type").TableRowData>) => void>;
    onRowMouseenter: import("vue").PropType<(context: RowEventContext<import("../type").TableRowData>) => void>;
    onRowMouseleave: import("vue").PropType<(context: RowEventContext<import("../type").TableRowData>) => void>;
    onRowMouseup: import("vue").PropType<(context: RowEventContext<import("../type").TableRowData>) => void>;
    onScrollX: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollY: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
}, unknown, unknown, {
    rehandleColumns(): Array<PrimaryTableCol>;
}, {
    renderLastFullRow(): any;
}, import("vue").DefineComponent<{
    expandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    expandedRow: {
        type: import("vue").PropType<import("../../common").TNode<{
            row: import("../type").TableRowData;
            index: number;
        }>>;
    };
    data: {
        type: import("vue").PropType<import("../type").TableRowData[]>;
        default: () => import("../type").TableRowData[];
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
}, unknown, unknown, {
    reRowKey(): string;
}, {
    getExpandRowHandler(): import("../../common").TNode<{
        row: import("../type").TableRowData;
        index: number;
    }>;
    getExpandColumns(columns: PrimaryTableCol<import("../type").TableRowData>[]): PrimaryTableCol<import("../type").TableRowData>[];
    renderExpandIconCell({ row, rowIndex }: Record<string, any>): import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
    renderExpandedRow(params: {
        row: import("../type").TableRowData;
        index: number;
    }): import("vue").VNodeChild;
    handleExpandChange(record?: Record<string, any>): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "expand-change"[], "expand-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    expandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    expandedRow: {
        type: import("vue").PropType<import("../../common").TNode<{
            row: import("../type").TableRowData;
            index: number;
        }>>;
    };
    data: {
        type: import("vue").PropType<import("../type").TableRowData[]>;
        default: () => import("../type").TableRowData[];
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
}>> & {
    "onExpand-change"?: (...args: any[]) => any;
}, {
    data: import("../type").TableRowData[];
    rowKey: string;
    expandedRowKeys: (string | number)[];
}> | import("vue").DefineComponent<{
    columns: {
        type: import("vue").PropType<PrimaryTableCol<import("../type").TableRowData>[]>;
        default: () => PrimaryTableCol<import("../type").TableRowData>[];
    };
    data: {
        type: import("vue").PropType<import("../type").TableRowData[]>;
        default: () => import("../type").TableRowData[];
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    selectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
}, unknown, unknown, {
    reRowKey(): string;
    selectColumn(): any;
    canSelectedRows(): Record<string, any>[];
    isSelectedAll(): boolean;
    isSelectedSome(): boolean;
}, {
    isDisabled(row: Record<string, any>, rowIndex: number): boolean;
    getSelectColumns(columns: PrimaryTableCol<import("../type").TableRowData>[]): PrimaryTableCol<import("../type").TableRowData>[];
    getSelectedHeader(): () => JSX.Element;
    renderSelectCell({ column, row, rowIndex }: Record<string, any>): import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
    handleSelectChange(record?: Record<string, any>): void;
    handleSelectAll(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "select-change"[], "select-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    columns: {
        type: import("vue").PropType<PrimaryTableCol<import("../type").TableRowData>[]>;
        default: () => PrimaryTableCol<import("../type").TableRowData>[];
    };
    data: {
        type: import("vue").PropType<import("../type").TableRowData[]>;
        default: () => import("../type").TableRowData[];
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    selectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
}>> & {
    "onSelect-change"?: (...args: any[]) => any;
}, {
    data: import("../type").TableRowData[];
    columns: PrimaryTableCol<import("../type").TableRowData>[];
    rowKey: string;
}> | import("vue").DefineComponent<{
    data: {
        type: import("vue").PropType<import("../type").TableRowData[]>;
        default: () => import("../type").TableRowData[];
    };
    columns: {
        type: import("vue").PropType<PrimaryTableCol<import("../type").TableRowData>[]>;
        default: () => PrimaryTableCol<import("../type").TableRowData>[];
    };
    sort: {
        type: import("vue").PropType<import("../type").TableSort>;
    };
    multipleSort: BooleanConstructor;
}, unknown, {
    sorterFuncMap: {};
}, {
    sortArray(): import("../type").SortInfo[];
    sortMap(): Record<string, import("../type").SortInfo & {
        index: number;
    }>;
    localDataSort(): boolean;
}, {
    handleDataSort(): import("../type").TableRowData[];
    needSort(column: PrimaryTableCol<import("../type").TableRowData>): boolean;
    getNextSortOrder(currentSortOrder: import("../type").SortType, sortType: import("../type").SortType): import("../type").SortType;
    handleSortHeaderClick(col: PrimaryTableCol<import("../type").TableRowData>): void;
    getSortColumn(colKey: string): PrimaryTableCol<import("../type").TableRowData>;
    getSortOrder(descending: boolean): "desc" | "asc";
    getNextDescending(current: import("../type").SortInfo, col: PrimaryTableCol<import("../type").TableRowData>): boolean;
    getSingleNextSort(col: PrimaryTableCol<import("../type").TableRowData>): import("../type").SortInfo;
    getMultipleNextSort(col: PrimaryTableCol<import("../type").TableRowData>): import("../type").SortInfo[];
    getSorterColumns(columns: PrimaryTableCol<import("../type").TableRowData>[]): PrimaryTableCol<import("../type").TableRowData>[];
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "data-change" | "sort-change")[], "change" | "data-change" | "sort-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    data: {
        type: import("vue").PropType<import("../type").TableRowData[]>;
        default: () => import("../type").TableRowData[];
    };
    columns: {
        type: import("vue").PropType<PrimaryTableCol<import("../type").TableRowData>[]>;
        default: () => PrimaryTableCol<import("../type").TableRowData>[];
    };
    sort: {
        type: import("vue").PropType<import("../type").TableSort>;
    };
    multipleSort: BooleanConstructor;
}>> & {
    onChange?: (...args: any[]) => any;
    "onData-change"?: (...args: any[]) => any;
    "onSort-change"?: (...args: any[]) => any;
}, {
    data: import("../type").TableRowData[];
    columns: PrimaryTableCol<import("../type").TableRowData>[];
    multipleSort: boolean;
}> | import("vue").DefineComponent<{}, {}, {
    draggingRowCurrentIndex: number;
    currentRowData: any;
}, {
    dragging(): boolean;
}, {
    onDragStart({ index, row }: import("./mixins/row-draggable").RowDragEventArgs): void;
    onDragOver({ index: overIndex, row, targetElm }: import("./mixins/row-draggable").RowDragEventArgs): void;
    addDragEndListener(): void;
    emitChange(current: import("../type").TableRowData, target: import("../type").TableRowData, currentIndex: number, targetIndex: number): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "drag-sort"[], "drag-sort", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>> & {
    "onDrag-sort"?: (...args: any[]) => any;
}, {}> | import("vue").DefineComponent<{
    columns: {
        type: import("vue").PropType<PrimaryTableCol<import("../type").TableRowData>[]>;
        default: () => PrimaryTableCol<import("../type").TableRowData>[];
    };
    pagination: {
        type: import("vue").PropType<import("../../pagination/type").TdPaginationProps>;
    };
    filterValue: {
        type: import("vue").PropType<import("../type").FilterValue>;
    };
    filterIcon: {
        type: import("vue").PropType<import("../../common").TNode<any>>;
    };
    data: {
        type: import("vue").PropType<import("../type").TableRowData[]>;
        default: () => import("../type").TableRowData[];
    };
    filterRow: {
        type: import("vue").PropType<string | import("../../common").TNode<any>>;
    };
}, unknown, {
    tableWidth: number;
    innerFilterValue: import("../type").FilterValue;
    filterPopupVisible: {};
}, {
    fixedLeftColumn(): boolean;
    hasFilterCondition(): boolean;
}, {
    updateTableWidth(): void;
    onFilterPopupVisibleChange(visible: boolean, colKey: string): void;
    renderFirstFilterRow(): JSX.Element;
    getFilterResultContent(): string;
    onInnerFilterChange(val: any, column: PrimaryTableCol<import("../type").TableRowData>): void;
    emitFilterChange(filterValue: import("../type").FilterValue, column?: PrimaryTableCol<import("../type").TableRowData>): void;
    onReset(column: PrimaryTableCol<import("../type").TableRowData>): void;
    onResetAll(): void;
    onConfirm(column: PrimaryTableCol<import("../type").TableRowData>): void;
    getBottomButtons(column: PrimaryTableCol<import("../type").TableRowData>): JSX.Element;
    getFilterContent(column: PrimaryTableCol<import("../type").TableRowData>): JSX.Element;
    getFilterColumns(columns: PrimaryTableCol<import("../type").TableRowData>[]): PrimaryTableCol<import("../type").TableRowData>[];
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("filter" | "filter-change")[], "filter" | "filter-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    columns: {
        type: import("vue").PropType<PrimaryTableCol<import("../type").TableRowData>[]>;
        default: () => PrimaryTableCol<import("../type").TableRowData>[];
    };
    pagination: {
        type: import("vue").PropType<import("../../pagination/type").TdPaginationProps>;
    };
    filterValue: {
        type: import("vue").PropType<import("../type").FilterValue>;
    };
    filterIcon: {
        type: import("vue").PropType<import("../../common").TNode<any>>;
    };
    data: {
        type: import("vue").PropType<import("../type").TableRowData[]>;
        default: () => import("../type").TableRowData[];
    };
    filterRow: {
        type: import("vue").PropType<string | import("../../common").TNode<any>>;
    };
}>> & {
    onFilter?: (...args: any[]) => any;
    "onFilter-change"?: (...args: any[]) => any;
}, {
    data: import("../type").TableRowData[];
    columns: PrimaryTableCol<import("../type").TableRowData>[];
}> | import("vue").DefineComponent<{
    columns: {
        type: import("vue").PropType<PrimaryTableCol<import("../type").TableRowData>[]>;
        default: () => PrimaryTableCol<import("../type").TableRowData>[];
    };
    showColumns: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, {
    showColumnKeys: string[];
    showColumnCheckboxKeys: string[];
    isShowColumnsDlg: boolean;
}, {
    showColumnCheckboxOpts(): Record<string, any>[];
    isAllShowColumns(): boolean;
    isSomeShowColumns(): boolean;
}, {
    getShowColumns(columns: PrimaryTableCol<import("../type").TableRowData>[]): PrimaryTableCol<import("../type").TableRowData>[];
    renderShowColumnsDlgFooter(): import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
    renderShowColumnsDlg(): import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
    renderShowColumns(): import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
    handleClickAllShowColumns(): void;
    handleConfirmShowColumnsDlg(): void;
    handleCancelShowColumnsDlg(): void;
    updateColumns(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    columns: {
        type: import("vue").PropType<PrimaryTableCol<import("../type").TableRowData>[]>;
        default: () => PrimaryTableCol<import("../type").TableRowData>[];
    };
    showColumns: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    columns: PrimaryTableCol<import("../type").TableRowData>[];
    showColumns: boolean;
}> | import("vue").DefineComponent<{
    asyncLoading: {
        type: import("vue").PropType<"loading" | import("../../common").TNode<any> | "load-more">;
    };
}, unknown, {
    pullDownLoading: boolean;
}, {
    classes(): import("../../common").ClassName;
}, {
    onLoadClick(): void;
    renderAsyncLoadingRow(): import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    asyncLoading: {
        type: import("vue").PropType<"loading" | import("../../common").TNode<any> | "load-more">;
    };
}>>, {}>, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    asyncLoading: {
        type: import("vue").PropType<"loading" | import("../../common").TNode<any> | "load-more">;
    };
    columns: {
        type: import("vue").PropType<PrimaryTableCol<import("../type").TableRowData>[]>;
        default: () => PrimaryTableCol<import("../type").TableRowData>[];
    };
    dragSort: BooleanConstructor;
    expandedRow: {
        type: import("vue").PropType<import("../../common").TNode<{
            row: import("../type").TableRowData;
            index: number;
        }>>;
    };
    expandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    expandIcon: {
        type: import("vue").PropType<import("../../common").TNode<import("../type").ExpandArrowRenderParams<import("../type").TableRowData>>>;
        default: boolean;
    };
    expandOnRowClick: BooleanConstructor;
    filterIcon: {
        type: import("vue").PropType<import("../../common").TNode<any>>;
    };
    filterRow: {
        type: import("vue").PropType<string | import("../../common").TNode<any>>;
    };
    filterValue: {
        type: import("vue").PropType<import("../type").FilterValue>;
    };
    defaultFilterValue: {
        type: import("vue").PropType<import("../type").FilterValue>;
    };
    multipleSort: BooleanConstructor;
    selectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    defaultSelectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    showColumnController: BooleanConstructor;
    showDragCol: BooleanConstructor;
    sort: {
        type: import("vue").PropType<import("../type").TableSort>;
    };
    defaultSort: {
        type: import("vue").PropType<import("../type").TableSort>;
    };
    sortOnRowDraggable: BooleanConstructor;
    onAsyncLoadingClick: import("vue").PropType<(context: {
        status: "loading" | "load-more";
    }) => void>;
    onCellClick: import("vue").PropType<(context: import("../type").PrimaryTableCellEventContext<import("../type").TableRowData>) => void>;
    onChange: import("vue").PropType<(data: import("../type").TableChangeData, context: import("../type").TableChangeContext<import("../type").TableRowData[]>) => void>;
    onDataChange: import("vue").PropType<(data: import("../type").TableRowData[]) => void>;
    onDragSort: import("vue").PropType<(context: import("../type").DragSortContext<import("../type").TableRowData>) => void>;
    onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("../type").ExpandOptions<import("../type").TableRowData>) => void>;
    onFilterChange: import("vue").PropType<(filterValue: import("../type").FilterValue, context: {
        col?: PrimaryTableCol<import("../type").TableRowData>;
    }) => void>;
    onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("../type").SelectOptions<import("../type").TableRowData>) => void>;
    onSortChange: import("vue").PropType<(sort: import("../type").TableSort, options: import("../type").SortOptions<import("../type").TableRowData>) => void>;
    bordered: BooleanConstructor;
    data: {
        type: import("vue").PropType<import("../type").TableRowData[]>;
        default: () => import("../type").TableRowData[];
    };
    disableDataSort: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | import("../../common").TNode<any>>;
        default: string;
    };
    firstFullRow: {
        type: import("vue").PropType<string | import("../../common").TNode<any>>;
    };
    height: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    hover: BooleanConstructor;
    lastFullRow: {
        type: import("vue").PropType<string | import("../../common").TNode<any>>;
    };
    loading: {
        type: import("vue").PropType<boolean | import("../../common").TNode<any>>;
        default: boolean;
    };
    maxHeight: {
        type: import("vue").PropType<string | number>;
    };
    pagination: {
        type: import("vue").PropType<import("../../pagination/type").TdPaginationProps>;
    };
    rowClassName: {
        type: import("vue").PropType<import("../../common").ClassName | ((params: {
            row: import("../type").TableRowData;
            rowIndex: number;
        }) => import("../../common").ClassName)>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<(params: import("../type").RowspanAndColspanParams<import("../type").TableRowData>) => import("../type").RowspanColspan>;
    };
    scroll: {
        type: import("vue").PropType<import("../type").TableScroll>;
    };
    size: {
        type: import("vue").PropType<import("../../common").SizeEnum>;
        default: import("../../common").SizeEnum;
        validator(val: import("../../common").SizeEnum): boolean;
    };
    stripe: BooleanConstructor;
    tableLayout: {
        type: import("vue").PropType<"fixed" | "auto">;
        default: "fixed" | "auto";
        validator(val: "fixed" | "auto"): boolean;
    };
    topContent: {
        type: import("vue").PropType<string | import("../../common").TNode<any>>;
    };
    verticalAlign: {
        type: import("vue").PropType<"top" | "bottom" | "middle">;
        default: "top" | "bottom" | "middle";
        validator(val: "top" | "bottom" | "middle"): boolean;
    };
    onPageChange: import("vue").PropType<(pageInfo: PageInfo, newDataSource: import("../type").TableRowData[]) => void>;
    onRowClick: import("vue").PropType<(context: RowEventContext<import("../type").TableRowData>) => void>;
    onRowDbClick: import("vue").PropType<(context: RowEventContext<import("../type").TableRowData>) => void>;
    onRowHover: import("vue").PropType<(context: RowEventContext<import("../type").TableRowData>) => void>;
    onRowMousedown: import("vue").PropType<(context: RowEventContext<import("../type").TableRowData>) => void>;
    onRowMouseenter: import("vue").PropType<(context: RowEventContext<import("../type").TableRowData>) => void>;
    onRowMouseleave: import("vue").PropType<(context: RowEventContext<import("../type").TableRowData>) => void>;
    onRowMouseup: import("vue").PropType<(context: RowEventContext<import("../type").TableRowData>) => void>;
    onScrollX: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollY: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
}>> & {
    [x: string & `on${string}`]: (...args: any[]) => any;
}, {
    data: import("../type").TableRowData[];
    height: string | number;
    columns: PrimaryTableCol<import("../type").TableRowData>[];
    tableLayout: "fixed" | "auto";
    verticalAlign: "top" | "bottom" | "middle";
    loading: boolean | import("../../common").TNode<any>;
    size: import("../../common").SizeEnum;
    hover: boolean;
    empty: string | import("../../common").TNode<any>;
    bordered: boolean;
    dragSort: boolean;
    stripe: boolean;
    disableDataSort: boolean;
    rowKey: string;
    expandedRowKeys: (string | number)[];
    defaultExpandedRowKeys: (string | number)[];
    expandIcon: import("../../common").TNode<import("../type").ExpandArrowRenderParams<import("../type").TableRowData>>;
    sortOnRowDraggable: boolean;
    expandOnRowClick: boolean;
    multipleSort: boolean;
    showColumnController: boolean;
    showDragCol: boolean;
}>;
export default _default;
