/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, reactive, h, createApp } from 'vue';
import _Loading from './loading.js';
import { prefix } from '../config.js';
import { getAttach, removeClass } from '../utils/dom.js';
import '@babel/runtime/helpers/slicedToArray';
import './icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../utils/classnames.js';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isFunction';
import 'lodash/isObject';
import '../utils/transfer-dom.js';
import './props.js';
import '../_chunks/dep-b66bfe36.js';
import '../utils/easing.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var lockClass = "".concat(prefix, "-loading--lock");
var fullScreenLoadingInstance = null;

function createLoading(props) {
  var component = defineComponent({
    setup: function setup() {
      var loadingOptions = reactive(props);
      return {
        loadingOptions: loadingOptions
      };
    },
    render: function render() {
      return h(_Loading, _objectSpread({}, this.loadingOptions));
    }
  });
  var attach = getAttach(props.attach);
  var loading = createApp(component).mount(document.createElement("div"));

  if (attach) {
    attach.appendChild(loading.$el);
  } else {
    console.error("attach is not exist");
  }

  var loadingInstance = {
    hide: function hide() {
      loading.loading = false;
      loading.$el.parentNode.removeChild(loading.$el);
    }
  };
  return loadingInstance;
}

function produceLoading(props) {
  if (props === true) {
    fullScreenLoadingInstance = createLoading({
      fullscreen: true,
      loading: true,
      attach: "body"
    });
    return fullScreenLoadingInstance;
  }

  removeClass(document.body, lockClass);

  if (props === false) {
    removeClass(document.body, lockClass);
    fullScreenLoadingInstance.hide();
    fullScreenLoadingInstance = null;
    return;
  }

  return createLoading(props);
}

var LoadingPlugin = produceLoading;

LoadingPlugin.install = function (app) {
  app.config.globalProperties.$loading = produceLoading;
};

export { LoadingPlugin as default };
//# sourceMappingURL=plugin.js.map
