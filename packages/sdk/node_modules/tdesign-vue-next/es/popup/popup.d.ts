import { PopupVisibleChangeContext } from './type';
import { ClassName, Styles } from '../common';
declare const triggers: readonly ["click", "hover", "focus", "context-menu"];
declare const _default: import("vue").DefineComponent<{
    expandAnimation: {
        type: BooleanConstructor;
    };
    attach: {
        type: import("vue").PropType<import("../common").AttachNode>;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    default: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    destroyOnClose: BooleanConstructor;
    disabled: BooleanConstructor;
    overlayClassName: {
        type: import("vue").PropType<ClassName>;
    };
    overlayStyle: {
        type: import("vue").PropType<Styles | ((trigger: HTMLElement) => Styles)>;
    };
    placement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
        default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        validator(val: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
    };
    showArrow: BooleanConstructor;
    trigger: {
        type: import("vue").PropType<"click" | "focus" | "context-menu" | "hover">;
        default: "click" | "focus" | "context-menu" | "hover";
        validator(val: "click" | "focus" | "context-menu" | "hover"): boolean;
    };
    triggerElement: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    visible: BooleanConstructor;
    defaultVisible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onVisibleChange: import("vue").PropType<(visible: boolean, context: PopupVisibleChangeContext) => void>;
}, unknown, {
    name: string;
    currentPlacement: string;
    popperElm: any;
    referenceElm: any;
    resizeSensor: any;
    popper: any;
    timeout: any;
    refOverlayElm: any;
    hasDocumentEvent: boolean;
    offEvents: any[];
}, {
    overlayClasses(): ClassName;
    hasTrigger(): Record<typeof triggers[number], boolean>;
}, {
    createPopper(): void;
    updatePopper(): void;
    updateOverlayStyle(): void;
    setOverlayStyle(styles: Styles): void;
    destroyPopper(el: HTMLElement): void;
    handleToggle(context: PopupVisibleChangeContext): void;
    handleOpen(context: Pick<PopupVisibleChangeContext, 'trigger'>, openParent?: boolean): void;
    handleClose(context: Pick<PopupVisibleChangeContext, 'trigger'>, closeParent?: boolean): void;
    handleDocumentClick(e: Event): void;
    emitPopVisible(val: boolean, context: PopupVisibleChangeContext): void;
    getContentElm(el: HTMLElement): HTMLElement;
    resetExpandStyles(el: HTMLElement): void;
    beforeEnter(el: HTMLElement): void;
    enter(el: HTMLElement): void;
    leave(el: HTMLElement): void;
    beforeLeave(el: HTMLElement): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "visible-change"[], "visible-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    expandAnimation: {
        type: BooleanConstructor;
    };
    attach: {
        type: import("vue").PropType<import("../common").AttachNode>;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    default: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    destroyOnClose: BooleanConstructor;
    disabled: BooleanConstructor;
    overlayClassName: {
        type: import("vue").PropType<ClassName>;
    };
    overlayStyle: {
        type: import("vue").PropType<Styles | ((trigger: HTMLElement) => Styles)>;
    };
    placement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
        default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        validator(val: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
    };
    showArrow: BooleanConstructor;
    trigger: {
        type: import("vue").PropType<"click" | "focus" | "context-menu" | "hover">;
        default: "click" | "focus" | "context-menu" | "hover";
        validator(val: "click" | "focus" | "context-menu" | "hover"): boolean;
    };
    triggerElement: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    visible: BooleanConstructor;
    defaultVisible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onVisibleChange: import("vue").PropType<(visible: boolean, context: PopupVisibleChangeContext) => void>;
}>> & {
    "onVisible-change"?: (...args: any[]) => any;
}, {
    visible: boolean;
    disabled: boolean;
    attach: import("../common").AttachNode;
    placement: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
    trigger: "click" | "focus" | "context-menu" | "hover";
    expandAnimation: boolean;
    destroyOnClose: boolean;
    showArrow: boolean;
    defaultVisible: boolean;
}>;
export default _default;
