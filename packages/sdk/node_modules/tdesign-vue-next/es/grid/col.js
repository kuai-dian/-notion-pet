/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { isVNode, defineComponent, inject, computed, createVNode } from 'vue';
import { prefix } from '../config.js';
import props from './col-props.js';
import { renderTNodeJSX } from '../utils/render-tnode.js';
import { useRowSize, getColClasses, parseFlex, calcColPadding } from './common.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isFunction';
import 'lodash/isObject';
import '../utils/responsive.js';
import '../hooks/event.js';
import '../utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}

var name = "".concat(prefix, "-col");
var _Col = defineComponent({
  name: "TCol",
  inject: ["rowContext"],
  props: _objectSpread({}, props),
  setup: function setup(props2) {
    var rowContext = inject("rowContext", /* @__PURE__ */Object.create(null));
    var size = useRowSize();
    var colClasses = computed(function () {
      return getColClasses(name, props2);
    });
    var colStyle = computed(function () {
      var colStyle2 = {};
      var flex = props2.flex;
      flex && (colStyle2.flex = parseFlex(flex));

      if (rowContext) {
        var rowGutter = rowContext.gutter;
        Object.assign(colStyle2, calcColPadding(rowGutter, size.value));
      }

      return colStyle2;
    });
    return {
      size: size,
      colClasses: colClasses,
      colStyle: colStyle
    };
  },
  render: function render() {
    var _slot;

    var colStyle = this.colStyle,
        TAG = this.tag,
        colClasses = this.colClasses;
    return createVNode(TAG, {
      "class": colClasses,
      "style": colStyle
    }, _isSlot(_slot = renderTNodeJSX(this, "default")) ? _slot : {
      "default": function _default() {
        return [_slot];
      }
    });
  }
});

export { _Col as default };
//# sourceMappingURL=col.js.map
