declare const _default: import("vue").DefineComponent<{
    block: BooleanConstructor;
    content: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    default: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    disabled: BooleanConstructor;
    ghost: BooleanConstructor;
    icon: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    loading: BooleanConstructor;
    shape: {
        type: import("vue").PropType<"square" | "round" | "circle" | "rectangle">;
        default: "square" | "round" | "circle" | "rectangle";
        validator(val: "square" | "round" | "circle" | "rectangle"): boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "success" | "primary" | "danger" | "warning">;
        default: "default" | "success" | "primary" | "danger" | "warning";
        validator(val: "default" | "success" | "primary" | "danger" | "warning"): boolean;
    };
    type: {
        type: import("vue").PropType<"button" | "reset" | "submit">;
        default: "button" | "reset" | "submit";
        validator(val: "button" | "reset" | "submit"): boolean;
    };
    variant: {
        type: import("vue").PropType<"outline" | "base" | "text" | "dashed">;
        default: "outline" | "base" | "text" | "dashed";
        validator(val: "outline" | "base" | "text" | "dashed"): boolean;
    };
    onClick: import("vue").PropType<(e: MouseEvent) => void>;
}, {
    isDisabled: import("vue").ComputedRef<boolean>;
    mergeTheme: import("vue").ComputedRef<"default" | "success" | "primary" | "danger" | "warning">;
    buttonClass: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    block: BooleanConstructor;
    content: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    default: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    disabled: BooleanConstructor;
    ghost: BooleanConstructor;
    icon: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    loading: BooleanConstructor;
    shape: {
        type: import("vue").PropType<"square" | "round" | "circle" | "rectangle">;
        default: "square" | "round" | "circle" | "rectangle";
        validator(val: "square" | "round" | "circle" | "rectangle"): boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "success" | "primary" | "danger" | "warning">;
        default: "default" | "success" | "primary" | "danger" | "warning";
        validator(val: "default" | "success" | "primary" | "danger" | "warning"): boolean;
    };
    type: {
        type: import("vue").PropType<"button" | "reset" | "submit">;
        default: "button" | "reset" | "submit";
        validator(val: "button" | "reset" | "submit"): boolean;
    };
    variant: {
        type: import("vue").PropType<"outline" | "base" | "text" | "dashed">;
        default: "outline" | "base" | "text" | "dashed";
        validator(val: "outline" | "base" | "text" | "dashed"): boolean;
    };
    onClick: import("vue").PropType<(e: MouseEvent) => void>;
}>>, {
    type: "button" | "reset" | "submit";
    block: boolean;
    loading: boolean;
    disabled: boolean;
    size: import("../common").SizeEnum;
    shape: "square" | "round" | "circle" | "rectangle";
    theme: "default" | "success" | "primary" | "danger" | "warning";
    variant: "outline" | "base" | "text" | "dashed";
    ghost: boolean;
}>;
export default _default;
