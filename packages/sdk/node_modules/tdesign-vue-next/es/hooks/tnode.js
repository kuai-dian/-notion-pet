/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import { getCurrentInstance, h } from 'vue';
import isEmpty from 'lodash/isEmpty';
import isFunction from 'lodash/isFunction';
import { getParams, getDefaultNode } from '../utils/render-tnode.js';
import 'lodash/isString';
import 'lodash/isObject';

var useTNodeJSX = function useTNodeJSX(name, options) {
  var params = getParams(options);
  var defaultNode = getDefaultNode(options);
  var instance = getCurrentInstance();
  var propsNode;

  if (Object.keys(instance).includes(name)) {
    propsNode = instance[name];
  }

  if (propsNode === false) return;

  if (instance.slots[name]) {
    return instance.slots[name](params);
  }

  if (isFunction(propsNode)) return propsNode(h, params);

  if (propsNode === true && defaultNode) {
    return defaultNode;
  }

  return propsNode;
};
var useTNodeDefault = function useTNodeDefault(name, options) {
  var defaultNode = getDefaultNode(options);
  return useTNodeJSX(name, options) || defaultNode;
};
var useContent = function useContent(name1, name2, options) {
  var params = getParams(options);
  var defaultNode = getDefaultNode(options);
  var toParams = params ? {
    params: params
  } : void 0;
  var node1 = useTNodeJSX(name1, toParams);
  var node2 = useTNodeJSX(name2, toParams);
  var res = isEmpty(node1) ? node2 : node1;
  return isEmpty(res) ? defaultNode : res;
};

export { useContent, useTNodeDefault, useTNodeJSX };
//# sourceMappingURL=tnode.js.map
