import { ComponentPublicInstance, ComponentOptions } from 'vue';
declare type VueMixin = ComponentPublicInstance | ComponentOptions<never>;
export declare type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;
export declare type ExtractInstance<T> = T extends ComponentPublicInstance<infer V> ? V : T extends ComponentOptions<infer V> ? V : never;
export declare type MixedVueConstructor<Mixins extends VueMixin[]> = Mixins extends (infer T)[] ? ComponentPublicInstance<UnionToIntersection<ExtractInstance<T>> & ComponentPublicInstance> : never;
declare function mixins<Mixins extends VueMixin[]>(...mixins: Mixins): MixedVueConstructor<Mixins>;
export default mixins;
