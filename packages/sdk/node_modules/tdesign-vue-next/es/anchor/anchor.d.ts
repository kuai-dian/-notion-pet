import { ComponentPublicInstance } from 'vue';
import { ANCHOR_CONTAINER } from './utils';
export interface Anchor extends ComponentPublicInstance {
    scrollContainer: ANCHOR_CONTAINER;
    handleScrollLock: boolean;
}
declare const _default: import("vue").DefineComponent<{
    affixProps: {
        type: import("vue").PropType<import("../affix").TdAffixProps>;
    };
    bounds: {
        type: NumberConstructor;
        default: number;
    };
    container: {
        type: import("vue").PropType<import("../common").ScrollContainer>;
        default: () => () => Window & typeof globalThis;
    };
    cursor: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    targetOffset: {
        type: NumberConstructor;
        default: number;
    };
    onChange: import("vue").PropType<(currentLink: string, prevLink: string) => void>;
    onClick: import("vue").PropType<(link: {
        href: string;
        title: string;
        e: MouseEvent;
    }) => void>;
}, unknown, {
    links: string[];
    active: string;
    scrollContainer: ANCHOR_CONTAINER;
    activeLineStyle: {
        top: string;
        height: string;
        opacity: number;
    };
}, {}, {
    getScrollContainer(): void;
    getAnchorTarget(link: string): HTMLElement;
    registerLink(link: string): void;
    unregisterLink(link: string): void;
    setCurrentActiveLink(link: string): Promise<void>;
    updateActiveLine(): void;
    emitChange(currentLink: string, prevLink: string): void;
    handleLinkClick(link: {
        href: string;
        title: string;
    }): void;
    handleScrollTo(link: string): Promise<void>;
    handleScroll(): void;
    renderCursor(): string | true | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | import("../common").SlotReturnArray;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "click")[], "change" | "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    affixProps: {
        type: import("vue").PropType<import("../affix").TdAffixProps>;
    };
    bounds: {
        type: NumberConstructor;
        default: number;
    };
    container: {
        type: import("vue").PropType<import("../common").ScrollContainer>;
        default: () => () => Window & typeof globalThis;
    };
    cursor: {
        type: import("vue").PropType<import("../common").TNode<any>>;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    targetOffset: {
        type: NumberConstructor;
        default: number;
    };
    onChange: import("vue").PropType<(currentLink: string, prevLink: string) => void>;
    onClick: import("vue").PropType<(link: {
        href: string;
        title: string;
        e: MouseEvent;
    }) => void>;
}>> & {
    onChange?: (...args: any[]) => any;
    onClick?: (...args: any[]) => any;
}, {
    size: "small" | "medium" | "large";
    container: import("../common").ScrollContainer;
    bounds: number;
    targetOffset: number;
}>;
export default _default;
