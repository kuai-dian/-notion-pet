import { TdDialogProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    attach: {
        type: PropType<import("../common").AttachNode>;
        default: string;
    };
    body: {
        type: PropType<string | import("../common").TNode<any>>;
        default: string;
    };
    cancelBtn: {
        type: PropType<string | import("../common").TNode<any> | import("..").TdButtonProps>;
        default: string;
    };
    closeBtn: {
        type: PropType<string | boolean | import("../common").TNode<any>>;
        default: boolean;
    };
    closeOnEscKeydown: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    confirmBtn: {
        type: PropType<string | import("../common").TNode<any> | import("..").TdButtonProps>;
        default: string;
    };
    default: {
        type: PropType<string | import("../common").TNode<any>>;
    };
    destroyOnClose: BooleanConstructor;
    draggable: BooleanConstructor;
    footer: {
        type: PropType<boolean | import("../common").TNode<any>>;
        default: boolean;
    };
    header: {
        type: PropType<string | boolean | import("../common").TNode<any>>;
        default: boolean;
    };
    mode: {
        type: PropType<"normal" | "modal" | "modeless">;
        default: "normal" | "modal" | "modeless";
        validator(val: TdDialogProps['mode']): boolean;
    };
    placement: {
        type: PropType<"center" | "top">;
        default: "center" | "top";
        validator(val: TdDialogProps['placement']): boolean;
    };
    preventScrollThrough: {
        type: BooleanConstructor;
        default: boolean;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: PropType<"default" | "success" | "danger" | "warning" | "info">;
        default: "default" | "success" | "danger" | "warning" | "info";
        validator(val: TdDialogProps['theme']): boolean;
    };
    top: {
        type: PropType<string | number>;
    };
    visible: BooleanConstructor;
    defaultVisible: BooleanConstructor;
    width: {
        type: PropType<string | number>;
    };
    zIndex: {
        type: NumberConstructor;
    };
    onCancel: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClose: PropType<(context: import("./type").DialogCloseContext) => void>;
    onCloseBtnClick: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClosed: PropType<() => void>;
    onConfirm: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onEscKeydown: PropType<(context: {
        e: KeyboardEvent;
    }) => void>;
    onOpened: PropType<() => void>;
    onOverlayClick: PropType<(context: {
        e: MouseEvent;
    }) => void>;
};
export default _default;
