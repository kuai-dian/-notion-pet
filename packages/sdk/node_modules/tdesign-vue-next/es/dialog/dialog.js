/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, Transition, createVNode, withDirectives, resolveDirective, resolveComponent, vShow } from 'vue';
import { CloseIcon, InfoCircleFilledIcon, CheckCircleFilledIcon, ErrorCircleFilledIcon } from 'tdesign-icons-vue-next';
import { prefix } from '../config.js';
import { Button } from '../button/index.js';
import ActionMixin from './actions.js';
import props from './props.js';
import { renderContent, renderTNodeJSX } from '../utils/render-tnode.js';
import TransferDom from '../utils/transfer-dom.js';
import { emitEvent } from '../utils/event.js';
import mixins from '../utils/mixins.js';
import { addClass, removeClass } from '../utils/dom.js';
import getConfigReceiverMixins from '../config-provider/config-receiver.js';
import '../button/button.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../utils/classnames.js';
import '../loading/index.js';
import '../loading/loading.js';
import '@babel/runtime/helpers/slicedToArray';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../loading/props.js';
import '../utils/withInstall.js';
import './style/css.js';
import '../loading/type.js';
import '../loading/plugin.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isFunction';
import 'lodash/isObject';
import '../_chunks/dep-b66bfe36.js';
import '../utils/easing.js';
import '../button/props.js';
import '../utils/ripple.js';
import '../utils/set-style.js';
import '../button/type.js';
import '@babel/runtime/helpers/typeof';
import '../utils/helper.js';
import 'lodash/camelCase';
import '../config-provider/zh_CN_config.js';
import '../config-provider/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(prefix, "-dialog");
var lockClass = "".concat(prefix, "-dialog--lock");

function GetCSSValue(v) {
  return Number.isNaN(Number(v)) ? v : "".concat(Number(v), "px");
}

function InitDragEvent(dragBox) {
  var target = dragBox;
  target.addEventListener("mousedown", function (targetEvent) {
    var disX = targetEvent.clientX - target.offsetLeft;
    var disY = targetEvent.clientY - target.offsetTop;

    function mouseMoverHandler(documentEvent) {
      var left = documentEvent.clientX - disX;
      var top = documentEvent.clientY - disY;
      target.style.left = "".concat(left, "px");
      target.style.top = "".concat(top, "px");
    }

    function mouseUpHandler() {
      document.removeEventListener("mousemove", mouseMoverHandler);
      document.removeEventListener("mouseup", mouseUpHandler);
    }

    document.addEventListener("mousemove", mouseMoverHandler);
    document.addEventListener("mouseup", mouseUpHandler);
    document.addEventListener("dragend", mouseUpHandler);
  });
}

var _Dialog = defineComponent(_objectSpread(_objectSpread({}, mixins(ActionMixin, getConfigReceiverMixins("dialog"))), {}, {
  name: "TDialog",
  components: {
    CloseIcon: CloseIcon,
    InfoCircleFilledIcon: InfoCircleFilledIcon,
    CheckCircleFilledIcon: CheckCircleFilledIcon,
    ErrorCircleFilledIcon: ErrorCircleFilledIcon,
    TButton: Button,
    Transition: Transition
  },
  directives: {
    TransferDom: TransferDom,
    draggable: function draggable(el, binding) {
      if (el && binding && binding.value) {
        InitDragEvent(el);
      }
    }
  },
  props: _objectSpread({}, props),
  emits: ["esc-keydown", "update:visible", "overlay-click", "close-btn-click", "cancel", "confirm", "opened", "closed", "close"],
  data: function data() {
    return {
      scrollWidth: 0
    };
  },
  computed: {
    isModal: function isModal() {
      return this.mode === "modal";
    },
    isModeless: function isModeless() {
      return this.mode === "modeless";
    },
    maskClass: function maskClass() {
      return ["".concat(name, "__mask"), !this.showOverlay && "".concat(prefix, "-is-hidden")];
    },
    dialogClass: function dialogClass() {
      var dialogClass = ["".concat(name), "".concat(name, "--default"), "".concat(name, "--").concat(this.placement), "".concat(name, "__modal-").concat(this.theme)];

      if (["modeless", "modal"].includes(this.mode)) {
        dialogClass.push("".concat(name, "--fixed"));
      }

      return dialogClass;
    },
    dialogStyle: function dialogStyle() {
      var top = this.top,
          placement = this.placement;
      var topStyle = {};

      if (top) {
        var topValue = GetCSSValue(top);
        topStyle = {
          top: topValue,
          transform: "translate(-50%, 0)",
          transformOrigin: "25% 25%",
          maxHeight: "calc(100% - ".concat(topValue, ")")
        };
      } else if (placement === "top") {
        topStyle = {
          maxHeight: "calc(100% - 20%)"
        };
      }

      return _objectSpread({
        width: GetCSSValue(this.width)
      }, topStyle);
    }
  },
  watch: {
    visible: function visible(value) {
      if (value) {
        var scrollWidth = this.scrollWidth;

        if (scrollWidth > 0) {
          var bodyCssText = "position: relative;width: calc(100% - ".concat(scrollWidth, "px);");
          document.body.style.cssText = bodyCssText;
        }

        addClass(document.body, lockClass);
      } else {
        document.body.style.cssText = "";
        removeClass(document.body, lockClass);
      }

      this.addKeyboardEvent(value);
    }
  },
  mounted: function mounted() {
    this.scrollWidth = window.innerWidth - document.body.offsetWidth;
  },
  beforeUnmount: function beforeUnmount() {
    this.addKeyboardEvent(false);
  },
  methods: {
    addKeyboardEvent: function addKeyboardEvent(status) {
      if (status) {
        document.addEventListener("keydown", this.keyboardEvent);
      } else {
        document.removeEventListener("keydown", this.keyboardEvent);
      }
    },
    keyboardEvent: function keyboardEvent(e) {
      if (e.code === "Escape") {
        emitEvent(this, "esc-keydown", {
          e: e
        });

        if (this.closeOnEscKeydown) {
          this.emitCloseEvent({
            trigger: "esc",
            e: e
          });
        }
      }
    },
    overlayAction: function overlayAction(e) {
      emitEvent(this, "overlay-click", {
        e: e
      });

      if (this.closeOnOverlayClick) {
        this.emitCloseEvent({
          trigger: "overlay",
          e: e
        });
      }
    },
    closeBtnAcion: function closeBtnAcion(e) {
      emitEvent(this, "close-btn-click", {
        e: e
      });
      this.emitCloseEvent({
        trigger: "close-btn",
        e: e
      });
    },
    cancelBtnAction: function cancelBtnAction(e) {
      emitEvent(this, "cancel", {
        e: e
      });
      this.emitCloseEvent({
        trigger: "cancel",
        e: e
      });
    },
    confirmBtnAction: function confirmBtnAction(e) {
      emitEvent(this, "confirm", {
        e: e
      });
    },
    afterEnter: function afterEnter() {
      emitEvent(this, "opened");
    },
    afterLeave: function afterLeave() {
      emitEvent(this, "closed");
    },
    emitCloseEvent: function emitCloseEvent(context) {
      emitEvent(this, "close", context);
      emitEvent(this, "update:visible", false);
    },
    hasEventOn: function hasEventOn(name2) {
      var _this$_events;

      var eventFuncs = (_this$_events = this["_events"]) === null || _this$_events === void 0 ? void 0 : _this$_events[name2];
      return !!(eventFuncs !== null && eventFuncs !== void 0 && eventFuncs.length);
    },
    getIcon: function getIcon() {
      var icon = {
        info: createVNode(InfoCircleFilledIcon, {
          "class": "t-is-info"
        }, null),
        warning: createVNode(ErrorCircleFilledIcon, {
          "class": "t-is-warning"
        }, null),
        danger: createVNode(ErrorCircleFilledIcon, {
          "class": "t-is-error"
        }, null),
        success: createVNode(CheckCircleFilledIcon, {
          "class": "t-is-success"
        }, null)
      };
      return icon[this.theme];
    },
    renderDialog: function renderDialog() {
      var defaultHeader = createVNode("h5", {
        "class": "title"
      }, null);

      var defaultCloseBtn = createVNode(CloseIcon, null, null);

      var body = renderContent(this, "default", "body");

      var defaultFooter = createVNode("div", null, [this.getCancelBtn({
        cancelBtn: this.cancelBtn,
        globalCancel: this.global.cancel,
        className: "".concat(prefix, "-dialog__cancel")
      }), this.getConfirmBtn({
        theme: this.theme,
        confirmBtn: this.confirmBtn,
        globalConfirm: this.global.confirm,
        globalConfirmBtnTheme: this.global.confirmBtnTheme,
        className: "".concat(prefix, "-dialog__confirm")
      })]);

      var bodyClassName = this.theme === "default" ? "".concat(name, "__body") : "".concat(name, "__body__icon");
      return withDirectives(createVNode("div", {
        "key": "dialog",
        "class": this.dialogClass,
        "style": this.dialogStyle
      }, [createVNode("div", {
        "class": "".concat(name, "__header")
      }, [this.getIcon(), renderTNodeJSX(this, "header", defaultHeader)]), createVNode("span", {
        "class": "".concat(name, "__close"),
        "onClick": this.closeBtnAcion
      }, [renderTNodeJSX(this, "closeBtn", defaultCloseBtn)]), createVNode("div", {
        "class": bodyClassName
      }, [body]), createVNode("div", {
        "class": "".concat(name, "__footer")
      }, [renderTNodeJSX(this, "footer", defaultFooter)])]), [[resolveDirective("draggable"), this.isModeless && this.draggable]]);
    }
  },
  render: function render() {
    var _this = this;

    var maskView = this.isModal && createVNode("div", {
      "key": "mask",
      "class": this.maskClass,
      "onClick": this.overlayAction
    }, null);

    var dialogView = this.renderDialog();
    var view = [maskView, dialogView];
    var ctxStyle = {
      zIndex: this.zIndex
    };
    var ctxClass = ["".concat(name, "__ctx"), {
      "t-dialog__ctx--fixed": this.mode === "modal"
    }];
    return createVNode(resolveComponent("transition"), {
      "duration": 300,
      "name": "".concat(name, "-zoom__vue"),
      "onAfterEnter": this.afterEnter,
      "onAfterLeave": this.afterLeave
    }, {
      "default": function _default() {
        return [(!_this.destroyOnClose || _this.visible) && withDirectives(createVNode("div", {
          "class": ctxClass,
          "style": ctxStyle
        }, [view]), [[vShow, _this.visible], [resolveDirective("transfer-dom"), _this.attach]])];
      }
    });
  }
}));

export { _Dialog as default };
//# sourceMappingURL=dialog.js.map
