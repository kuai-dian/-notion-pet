/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _typeof from '@babel/runtime/helpers/typeof';
import { defineComponent, createVNode, mergeProps } from 'vue';
import isString from 'lodash/isString';
import _isObject from 'lodash/isObject';
import { renderTNodeJSX } from '../utils/render-tnode.js';
import { Button } from '../button/index.js';
import 'lodash/isEmpty';
import 'lodash/isFunction';
import '../button/button.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../config.js';
import '../utils/classnames.js';
import '../loading/index.js';
import '../loading/loading.js';
import '@babel/runtime/helpers/slicedToArray';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../utils/dom.js';
import '../_chunks/dep-b66bfe36.js';
import '../utils/easing.js';
import '../utils/transfer-dom.js';
import '../loading/props.js';
import '../utils/withInstall.js';
import './style/css.js';
import '../loading/type.js';
import '../loading/plugin.js';
import '../button/props.js';
import '../utils/ripple.js';
import '../utils/set-style.js';
import '../button/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var ActionMixin = defineComponent({
  methods: {
    getConfirmBtn: function getConfirmBtn(options) {
      var confirmBtn = options.confirmBtn,
          className = options.className;
      if (confirmBtn === null) return null;

      if (confirmBtn && this.$slots.confirmBtn) {
        console.warn("Both $props.confirmBtn and $scopedSlots.confirmBtn exist, $props.confirmBtn is preferred.");
      }

      var defaultButtonProps = this.getDefaultConfrimBtnProps(options);

      if (!confirmBtn && !this.$slots.confirmBtn) {
        return createVNode(Button, mergeProps({
          "class": className
        }, defaultButtonProps), null);
      }

      if (confirmBtn && ["string", "object"].includes(_typeof(confirmBtn))) {
        return this.getButtonByProps(confirmBtn, defaultButtonProps, className);
      }

      return renderTNodeJSX(this, "confirmBtn");
    },
    getCancelBtn: function getCancelBtn(options) {
      var cancelBtn = options.cancelBtn,
          className = options.className;
      if (cancelBtn === null) return null;

      if (cancelBtn && this.$slots.cancelBtn) {
        console.warn("Both $props.cancelBtn and $scopedSlots.cancelBtn exist, $props.cancelBtn is preferred.");
      }

      var defaultButtonProps = this.getDefaultCancelBtnProps(options);

      if (!cancelBtn && !this.$slots.cancelBtn) {
        return createVNode(Button, mergeProps({
          "class": className
        }, defaultButtonProps), null);
      }

      if (cancelBtn && ["string", "object"].includes(_typeof(cancelBtn))) {
        return this.getButtonByProps(cancelBtn, defaultButtonProps);
      }

      return renderTNodeJSX(this, "cancelBtn");
    },
    getButtonByProps: function getButtonByProps(button, defaultButton, className) {
      var newOptions = defaultButton;

      if (isString(button)) {
        newOptions.content = button;
      } else if (_isObject(button)) {
        newOptions = _objectSpread(_objectSpread({}, newOptions), button);
      }

      return createVNode(Button, mergeProps({
        "class": className
      }, newOptions), null);
    },
    confirmBtnAction: function confirmBtnAction(e) {},
    cancelBtnAction: function cancelBtnAction(e) {},
    getDefaultConfrimBtnProps: function getDefaultConfrimBtnProps(options) {
      var _this = this;

      var globalConfirm = options.globalConfirm,
          theme = options.theme,
          globalConfirmBtnTheme = options.globalConfirmBtnTheme;
      var defaultTheme = (globalConfirmBtnTheme === null || globalConfirmBtnTheme === void 0 ? void 0 : globalConfirmBtnTheme[theme]) || "primary";
      var props = {
        theme: defaultTheme,
        content: "\u786E\u5B9A",
        onClick: function onClick(e) {
          _this.confirmBtnAction(e);
        }
      };

      if (isString(globalConfirm)) {
        props.content = globalConfirm;
      } else if (_isObject(globalConfirm)) {
        props = _objectSpread(_objectSpread({}, props), globalConfirm);
      }

      return props;
    },
    getDefaultCancelBtnProps: function getDefaultCancelBtnProps(options) {
      var _this2 = this;

      var globalCancel = options.globalCancel;
      var props = {
        theme: "default",
        content: "\u53D6\u6D88",
        onClick: function onClick(e) {
          _this2.cancelBtnAction(e);
        }
      };

      if (isString(globalCancel)) {
        props.content = globalCancel;
      } else if (_isObject(globalCancel)) {
        props = _objectSpread(_objectSpread({}, props), globalCancel);
      }

      return props;
    }
  }
});

export { ActionMixin as default };
//# sourceMappingURL=actions.js.map
