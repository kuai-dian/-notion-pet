import { PopupProps, PopupVisibleChangeContext } from '../popup';
import { ClassName } from '../common';
declare const _default: import("vue").DefineComponent<{
    destroyOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    showArrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "success" | "light" | "primary" | "danger" | "warning">;
        default: "default" | "success" | "light" | "primary" | "danger" | "warning";
        validator(val: "default" | "success" | "light" | "primary" | "danger" | "warning"): boolean;
    };
    attach: {
        type: import("vue").PropType<import("../common").AttachNode>;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    default: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    disabled: BooleanConstructor;
    overlayClassName: {
        type: import("vue").PropType<ClassName>;
    };
    overlayStyle: {
        type: import("vue").PropType<import("../common").Styles | ((trigger: HTMLElement) => import("../common").Styles)>;
    };
    placement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
        default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        validator(val: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
    };
    trigger: {
        type: import("vue").PropType<"click" | "focus" | "context-menu" | "hover">;
        default: "click" | "focus" | "context-menu" | "hover";
        validator(val: "click" | "focus" | "context-menu" | "hover"): boolean;
    };
    triggerElement: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    visible: BooleanConstructor;
    defaultVisible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onVisibleChange: import("vue").PropType<(visible: boolean, context: PopupVisibleChangeContext) => void>;
}, unknown, {
    timer: any;
    tooltipVisible: boolean;
}, {
    tooltipOverlayClassName(): ClassName;
}, {
    onTipVisibleChange(val: boolean, ctx?: PopupVisibleChangeContext): void;
    getPopupProps(): PopupProps;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "visible-change"[], "visible-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    destroyOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    showArrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "success" | "light" | "primary" | "danger" | "warning">;
        default: "default" | "success" | "light" | "primary" | "danger" | "warning";
        validator(val: "default" | "success" | "light" | "primary" | "danger" | "warning"): boolean;
    };
    attach: {
        type: import("vue").PropType<import("../common").AttachNode>;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    default: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    disabled: BooleanConstructor;
    overlayClassName: {
        type: import("vue").PropType<ClassName>;
    };
    overlayStyle: {
        type: import("vue").PropType<import("../common").Styles | ((trigger: HTMLElement) => import("../common").Styles)>;
    };
    placement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
        default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        validator(val: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
    };
    trigger: {
        type: import("vue").PropType<"click" | "focus" | "context-menu" | "hover">;
        default: "click" | "focus" | "context-menu" | "hover";
        validator(val: "click" | "focus" | "context-menu" | "hover"): boolean;
    };
    triggerElement: {
        type: import("vue").PropType<string | import("../common").TNode<any>>;
    };
    visible: BooleanConstructor;
    defaultVisible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onVisibleChange: import("vue").PropType<(visible: boolean, context: PopupVisibleChangeContext) => void>;
}>> & {
    "onVisible-change"?: (...args: any[]) => any;
}, {
    visible: boolean;
    disabled: boolean;
    duration: number;
    attach: import("../common").AttachNode;
    theme: "default" | "success" | "light" | "primary" | "danger" | "warning";
    placement: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
    trigger: "click" | "focus" | "context-menu" | "hover";
    destroyOnClose: boolean;
    showArrow: boolean;
    defaultVisible: boolean;
}>;
export default _default;
