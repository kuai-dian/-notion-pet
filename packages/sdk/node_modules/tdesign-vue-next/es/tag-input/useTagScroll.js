/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import { ref, onMounted, onUnmounted } from 'vue';
import { on, off } from '../utils/dom.js';
import '../_chunks/dep-b66bfe36.js';
import 'lodash/isString';
import '../utils/easing.js';

function useTagScroll(props, root) {
  var scrollDistance = ref(0);
  var scrollElement = ref(null);
  var wheelTimer = ref();
  var mouseEnterTimer = ref();

  var setScrollElement = function setScrollElement(element) {
    scrollElement.value = element;
  };

  var setScrollDistance = function setScrollDistance() {
    scrollDistance.value = scrollElement.value.scrollWidth - scrollElement.value.clientWidth;
  };

  var scrollTo = function scrollTo(distance) {
    scrollElement === null || scrollElement === void 0 ? void 0 : scrollElement.value.scroll({
      left: distance,
      behavior: "smooth"
    });
  };

  var scrollToRight = function scrollToRight() {
    setScrollDistance();
    scrollTo(scrollDistance.value);
  };

  var scrollToLeft = function scrollToLeft() {
    scrollTo(0);
  };

  var clearTimer = function clearTimer(timer) {
    clearTimeout(timer.value);
    timer.value = null;
  };

  var onWheel = function onWheel(e) {
    if (!scrollElement.value || wheelTimer.value) return;

    if (e.deltaX > 0) {
      var distance = Math.min(scrollElement.value.scrollLeft + 120, scrollDistance.value);
      scrollTo(distance);
    } else {
      var _distance = Math.max(scrollElement.value.scrollLeft - 120, 0);

      scrollTo(_distance);
    }

    wheelTimer.value = setTimeout(function () {
      clearTimer(wheelTimer);
    }, 300);
  };

  var scrollToRightOnEnter = function scrollToRightOnEnter() {
    if (props.excessTagsDisplayType !== "scroll") return;
    mouseEnterTimer.value = setTimeout(function () {
      scrollToRight();
      clearTimer(mouseEnterTimer);
    }, 100);
  };

  var scrollToLeftOnLeave = function scrollToLeftOnLeave() {
    if (props.excessTagsDisplayType !== "scroll") return;
    scrollTo(0);
    clearTimer(mouseEnterTimer);
  };

  var addListeners = function addListeners(element) {
    if (props.readonly || props.disabled) return;
    on(element, "mousewheel", onWheel);
  };

  var removeListeners = function removeListeners(element) {
    if (props.readonly || props.disabled) return;
    off(element, "mousewheel", onWheel);
  };

  onMounted(function () {
    var _root$value;

    var element = (_root$value = root.value) === null || _root$value === void 0 ? void 0 : _root$value.$el;
    setScrollElement(element);
    addListeners(element);
  });
  onUnmounted(function () {
    var _root$value2;

    clearTimer(wheelTimer);
    clearTimer(mouseEnterTimer);
    removeListeners((_root$value2 = root.value) === null || _root$value2 === void 0 ? void 0 : _root$value2.$el);
  });
  return {
    scrollElement: scrollElement,
    scrollDistance: scrollDistance,
    scrollTo: scrollTo,
    scrollToRight: scrollToRight,
    scrollToLeft: scrollToLeft,
    setScrollElement: setScrollElement,
    setScrollDistance: setScrollDistance,
    onWheel: onWheel,
    addListeners: addListeners,
    removeListeners: removeListeners,
    scrollToRightOnEnter: scrollToRightOnEnter,
    scrollToLeftOnLeave: scrollToLeftOnLeave
  };
}

export { useTagScroll as default };
//# sourceMappingURL=useTagScroll.js.map
