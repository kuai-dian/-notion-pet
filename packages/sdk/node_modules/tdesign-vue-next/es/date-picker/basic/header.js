/**
 * tdesign v0.8.0
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, createVNode, resolveComponent } from 'vue';
import { RoundIcon, ChevronLeftIcon, ChevronRightIcon } from 'tdesign-icons-vue-next';
import TButton from '../../button/button.js';
import mixins from '../../utils/mixins.js';
import getConfigReceiverMixins from '../../config-provider/config-receiver.js';
import { prefix } from '../../config.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../../utils/classnames.js';
import '../../loading/index.js';
import '../../loading/loading.js';
import '@babel/runtime/helpers/slicedToArray';
import '../../loading/icon/gradient.js';
import '../../_common/js/loading/circle-adapter.js';
import '../../_common/js/utils/set-style.js';
import '../../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../../utils/dom.js';
import '../../_chunks/dep-b66bfe36.js';
import 'lodash/isString';
import '../../utils/easing.js';
import '../../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isFunction';
import 'lodash/isObject';
import '../../utils/transfer-dom.js';
import '../../loading/props.js';
import '../../utils/withInstall.js';
import './style/css.js';
import '../../loading/type.js';
import '../../loading/plugin.js';
import '../../button/props.js';
import '../../utils/ripple.js';
import '../../utils/set-style.js';
import '../../config-provider/zh_CN_config.js';
import '../../config-provider/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(prefix, "-date-picker__header");
var TDateHeader = defineComponent(_objectSpread(_objectSpread({
  name: name
}, mixins(getConfigReceiverMixins("datePicker"))), {}, {
  components: {
    TButton: TButton,
    RoundIcon: RoundIcon,
    ChevronLeftIcon: ChevronLeftIcon,
    ChevronRightIcon: ChevronRightIcon
  },
  props: {
    year: Number,
    month: Number,
    type: {
      type: String,
      "default": "date",
      validator: function validator(v) {
        return ["year", "month", "date"].indexOf(v) > -1;
      }
    },
    onBtnClick: Function,
    onTypeChange: Function
  },
  render: function render() {
    var _this = this;

    var _this$$props = this.$props,
        type = _this$$props.type,
        year = _this$$props.year,
        month = _this$$props.month,
        onBtnClick = _this$$props.onBtnClick,
        onTypeChange = _this$$props.onTypeChange;
    var startYear = parseInt((this.year / 10).toString(), 10) * 10;
    var _this$global = this.global,
        rangeSeparator = _this$global.rangeSeparator,
        yearAriaLabel = _this$global.yearAriaLabel,
        now = _this$global.now,
        preMonth = _this$global.preMonth,
        preYear = _this$global.preYear,
        nextMonth = _this$global.nextMonth,
        nextYear = _this$global.nextYear,
        preDecade = _this$global.preDecade,
        nextDecade = _this$global.nextDecade;
    var preLabel;
    var nextLabel;

    if (type === "year") {
      preLabel = preDecade;
      nextLabel = nextDecade;
    } else if (type === "date") {
      preLabel = preMonth;
      nextLabel = nextMonth;
    } else {
      preLabel = preYear;
      nextLabel = nextYear;
    }

    return createVNode("div", {
      "class": "".concat(prefix, "-date-picker__header")
    }, [createVNode("span", {
      "class": "".concat(prefix, "-date-picker__header-title")
    }, [type === "year" && createVNode("span", null, [createVNode("span", null, [startYear]), rangeSeparator, createVNode("span", null, [startYear + 9])]), type !== "year" && createVNode(resolveComponent("t-button"), {
      "class": "".concat(prefix, "-date-picker__header-btn"),
      "variant": "text",
      "size": "small",
      "onClick": function onClick() {
        return onTypeChange("year");
      }
    }, {
      "default": function _default() {
        return ["".concat(year, " ").concat(yearAriaLabel)];
      }
    }), type === "date" && createVNode(resolveComponent("t-button"), {
      "class": "".concat(prefix, "-date-picker__header-btn"),
      "variant": "text",
      "size": "small",
      "onClick": function onClick() {
        return onTypeChange("month");
      }
    }, {
      "default": function _default() {
        return [_this.global.months[month]];
      }
    })]), createVNode("span", {
      "class": "".concat(prefix, "-date-picker__header-controller")
    }, [createVNode(resolveComponent("t-button"), {
      "class": "".concat(prefix, "-date-picker__header-controller__btn"),
      "variant": "text",
      "onClick": function onClick() {
        return onBtnClick(-1);
      },
      "title": preLabel
    }, {
      icon: function icon() {
        return createVNode(resolveComponent("chevron-left-icon"), null, null);
      }
    }), createVNode(resolveComponent("t-button"), {
      "class": ["".concat(prefix, "-date-picker__header-controller__btn"), "".concat(prefix, "-date-picker__header-controller__btn--now")],
      "variant": "text",
      "onClick": function onClick() {
        return onBtnClick(0);
      },
      "title": now
    }, {
      icon: function icon() {
        return createVNode(resolveComponent("round-icon"), null, null);
      }
    }), createVNode(resolveComponent("t-button"), {
      "class": "".concat(prefix, "-date-picker__header-controller__btn"),
      "variant": "text",
      "onClick": function onClick() {
        return onBtnClick(1);
      },
      "title": nextLabel
    }, {
      icon: function icon() {
        return createVNode(resolveComponent("chevron-right-icon"), null, null);
      }
    })])]);
  }
}));

export { TDateHeader as default };
//# sourceMappingURL=header.js.map
